[{"short_id":"vomhop","short_id_url":"https://lobste.rs/s/vomhop","created_at":"2024-06-18T09:48:10.000-05:00","title":"Introducing a new RISC-V Mainboard from DeepComputing","url":"https://frame.work/blog/introducing-a-new-risc-v-mainboard-from-deepcomputing","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vomhop/introducing_new_risc_v_mainboard_from","submitter_user":"bernhard","user_is_author":false,"tags":["hardware"]},{"short_id":"hnh0oj","short_id_url":"https://lobste.rs/s/hnh0oj","created_at":"2024-06-18T09:24:28.000-05:00","title":"Go package for calculating the sunrise and sunset times for a given location","url":"https://github.com/nathan-osman/go-sunrise","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hnh0oj/go_package_for_calculating_sunrise","submitter_user":"andrewfromx","user_is_author":false,"tags":["go"]},{"short_id":"sz0zfu","short_id_url":"https://lobste.rs/s/sz0zfu","created_at":"2024-06-18T09:17:31.000-05:00","title":"How I would redesign Copilot Workspace","url":"https://austinhenley.com/blog/copilotworkspace.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sz0zfu/how_i_would_redesign_copilot_workspace","submitter_user":"azhenley","user_is_author":true,"tags":["ai"]},{"short_id":"qvhcjf","short_id_url":"https://lobste.rs/s/qvhcjf","created_at":"2024-06-18T08:43:03.000-05:00","title":"S2malloc: Statistically Secure Allocator for Use-After-Free Protection And More","url":"https://arxiv.org/pdf/2402.01894","score":3,"flags":0,"comment_count":1,"description":"\u003cp\u003eAttacks on heap memory, encompassing memory overflow,\ndouble and invalid free, use-after-free (UAF), and various heap spraying\ntechniques are ever-increasing. Existing entropy-based secure memory\nallocators provide statistical defenses against virtually all of these attack\nvectors. Although they claim protections against UAF attacks, their\ndesigns are not tailored to detect (failed) attempts. Consequently, to\nbeat this entropy-based protection, an attacker can simply launch the\nsame attack repeatedly with the potential use of heap spraying to further\nimprove their chance of success.\nWe introduce S2malloc, aiming to enhance UAF-attempt detection\nwithout compromising other security guarantees or introducing significant\nperformance overhead. To achieve this, we use three innovative constructs\nin secure allocator design: free block canaries (FBC) to detect UAF\nattempts, random in-block offset (RIO) to stop the attacker from\naccurately overwriting the victim object, and random bag layout\n(RBL) to impede attackers from estimating the block size based on its\naddress.\nWe show that (a) by reserving 25% of the object size for the RIO offset,\nan 8-byte canary offers a 69% protection rate if the attacker reuses the\nsame pointer and 96% protection rate if the attacker does not, against\nUAF exploitation attempts targeting a 64 bytes object, with equal or\nhigher security guarantees against all other attacks; and (b) S2malloc\nis practical, with only a 2.8% run-time overhead on PARSEC and an\n11.5% overhead on SPEC. Compared to state-of-the-art entropy-based\nallocators, S2malloc improves UAF-protection without incurring addi-\ntional performance overhead. Compared to UAF-mitigating allocators,\nS2malloc trades off a minuscule probability of failed protection for\nsignificantly lower overhead.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2402.01894v2\" rel=\"ugc\"\u003earXiv\u003c/a\u003e, \u003ca href=\"https://dustri.org/b/paper-notes-s2malloc.html\" rel=\"ugc\"\u003epaper review\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Attacks on heap memory, encompassing memory overflow,\r\ndouble and invalid free, use-after-free (UAF), and various heap spraying\r\ntechniques are ever-increasing. Existing entropy-based secure memory\r\nallocators provide statistical defenses against virtually all of these attack\r\nvectors. Although they claim protections against UAF attacks, their\r\ndesigns are not tailored to detect (failed) attempts. Consequently, to\r\nbeat this entropy-based protection, an attacker can simply launch the\r\nsame attack repeatedly with the potential use of heap spraying to further\r\nimprove their chance of success.\r\nWe introduce S2malloc, aiming to enhance UAF-attempt detection\r\nwithout compromising other security guarantees or introducing significant\r\nperformance overhead. To achieve this, we use three innovative constructs\r\nin secure allocator design: free block canaries (FBC) to detect UAF\r\nattempts, random in-block offset (RIO) to stop the attacker from\r\naccurately overwriting the victim object, and random bag layout\r\n(RBL) to impede attackers from estimating the block size based on its\r\naddress.\r\nWe show that (a) by reserving 25% of the object size for the RIO offset,\r\nan 8-byte canary offers a 69% protection rate if the attacker reuses the\r\nsame pointer and 96% protection rate if the attacker does not, against\r\nUAF exploitation attempts targeting a 64 bytes object, with equal or\r\nhigher security guarantees against all other attacks; and (b) S2malloc\r\nis practical, with only a 2.8% run-time overhead on PARSEC and an\r\n11.5% overhead on SPEC. Compared to state-of-the-art entropy-based\r\nallocators, S2malloc improves UAF-protection without incurring addi-\r\ntional performance overhead. Compared to UAF-mitigating allocators,\r\nS2malloc trades off a minuscule probability of failed protection for\r\nsignificantly lower overhead.\r\n\r\n[arXiv](https://arxiv.org/abs/2402.01894v2), [paper review](https://dustri.org/b/paper-notes-s2malloc.html)","comments_url":"https://lobste.rs/s/qvhcjf/s2malloc_statistically_secure","submitter_user":"calvin","user_is_author":false,"tags":["pdf","security"]},{"short_id":"n37nfl","short_id_url":"https://lobste.rs/s/n37nfl","created_at":"2024-06-18T08:23:25.000-05:00","title":"Basic Python project setup","url":"https://peateasea.de/basic-python-project-setup/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/n37nfl/basic_python_project_setup","submitter_user":"peateasea","user_is_author":true,"tags":["python"]},{"short_id":"kn0xmw","short_id_url":"https://lobste.rs/s/kn0xmw","created_at":"2024-06-18T08:06:02.000-05:00","title":"Themes from Real World Crypto 2024","url":"https://blog.trailofbits.com/2024/06/18/themes-from-real-world-crypto-2024/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kn0xmw/themes_from_real_world_crypto_2024","submitter_user":"crazyloglad","user_is_author":false,"tags":["cryptography"]},{"short_id":"5b87th","short_id_url":"https://lobste.rs/s/5b87th","created_at":"2024-06-18T07:11:46.000-05:00","title":"Linux Kernel Development - Automatic Cleanup 2/2","url":"https://javiercarrascocruz.github.io/kernel-auto-cleanup-1","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5b87th/linux_kernel_development_automatic","submitter_user":"eatonphil","user_is_author":false,"tags":["c","linux"]},{"short_id":"nyqqyi","short_id_url":"https://lobste.rs/s/nyqqyi","created_at":"2024-06-18T06:03:07.000-05:00","title":"aurora: A static site generator implemented in Python","url":"https://github.com/capjamesg/aurora","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nyqqyi/aurora_static_site_generator","submitter_user":"capjamesg","user_is_author":true,"tags":["python","web"]},{"short_id":"lia3u8","short_id_url":"https://lobste.rs/s/lia3u8","created_at":"2024-06-18T05:59:00.000-05:00","title":"nuxt-auth-utils release v0.1","url":"https://github.com/Atinux/nuxt-auth-utils","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lia3u8/nuxt_auth_utils_release_v0_1","submitter_user":"Strift","user_is_author":false,"tags":["javascript","web"]},{"short_id":"ia19xj","short_id_url":"https://lobste.rs/s/ia19xj","created_at":"2024-06-18T05:56:05.000-05:00","title":"Enabling Technologies","url":"https://pulse.internetsociety.org/technologies","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ia19xj/enabling_technologies","submitter_user":"adsouza","user_is_author":false,"tags":["networking"]},{"short_id":"bhmxyw","short_id_url":"https://lobste.rs/s/bhmxyw","created_at":"2024-06-18T04:51:32.000-05:00","title":"GitHub Copilot Workspace Review","url":"https://matduggan.com/reviewing-github-copilot-workspaces/","score":17,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bhmxyw/github_copilot_workspace_review","submitter_user":"maduggan","user_is_author":true,"tags":["ai","python"]},{"short_id":"dvslfi","short_id_url":"https://lobste.rs/s/dvslfi","created_at":"2024-06-18T04:24:02.000-05:00","title":"Linux 6.10 Honors One Last ReiserFS Request Made By Hans Reiser","url":"https://www.phoronix.com/news/ReiserFS-README-Linux-6.10","score":16,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dvslfi/linux_6_10_honors_one_last_reiserfs","submitter_user":"RGBCube","user_is_author":false,"tags":["linux","person"]},{"short_id":"jx5j4g","short_id_url":"https://lobste.rs/s/jx5j4g","created_at":"2024-06-18T04:06:15.000-05:00","title":"Troubles In Solving Uno","url":"https://two-wrongs.com/troubles-in-solving-uno.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jx5j4g/troubles_solving_uno","submitter_user":"kqr","user_is_author":true,"tags":["ai","games"]},{"short_id":"9njcqf","short_id_url":"https://lobste.rs/s/9njcqf","created_at":"2024-06-18T03:52:05.000-05:00","title":"Fuzzing an eBPF implementation in Rust","url":"https://secret.club/2022/05/11/fuzzing-solana.html","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9njcqf/fuzzing_ebpf_implementation_rust","submitter_user":"fanf","user_is_author":false,"tags":["rust","testing"]},{"short_id":"martui","short_id_url":"https://lobste.rs/s/martui","created_at":"2024-06-18T02:25:09.000-05:00","title":"How Branch Prediction Works in CPUs","url":"https://www.youtube.com/watch?v=nczJ58WvtYo","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/martui/how_branch_prediction_works_cpus","submitter_user":"xoranth","user_is_author":false,"tags":["hardware","video"]},{"short_id":"5bpnvq","short_id_url":"https://lobste.rs/s/5bpnvq","created_at":"2024-06-18T02:17:38.000-05:00","title":"Every Way To Get Structured Output From LLMs","url":"https://www.boundaryml.com/blog/structured-output-from-llms","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5bpnvq/every_way_get_structured_output_from_llms","submitter_user":"stanbright","user_is_author":false,"tags":["ai","programming"]},{"short_id":"k3ofpn","short_id_url":"https://lobste.rs/s/k3ofpn","created_at":"2024-06-18T01:44:51.000-05:00","title":"AUTOMAP: How to do NumPy-style broadcasting in Futhark (but better)","url":"https://futhark-lang.org/blog/2024-06-17-automap.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/k3ofpn/automap_how_do_numpy_style_broadcasting","submitter_user":"munksgaard","user_is_author":false,"tags":["apl","compilers","ml","plt"]},{"short_id":"gagni0","short_id_url":"https://lobste.rs/s/gagni0","created_at":"2024-06-17T23:10:44.000-05:00","title":"In Codd we Trust (or not)","url":"https://buttondown.email/jaffray/archive/in-codd-we-trust-or-not/","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gagni0/codd_we_trust_not","submitter_user":"abhin4v","user_is_author":false,"tags":["databases","performance"]},{"short_id":"rv5lfj","short_id_url":"https://lobste.rs/s/rv5lfj","created_at":"2024-06-17T22:50:59.000-05:00","title":"Matrix - A Pit of Abuse with Government Ties","url":"https://www.youtube.com/watch?v=W8KEuAEYjQ4","score":0,"flags":2,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rv5lfj/matrix_pit_abuse_with_government_ties","submitter_user":"ecksdee","user_is_author":false,"tags":["privacy","security","video"]},{"short_id":"ozj5nz","short_id_url":"https://lobste.rs/s/ozj5nz","created_at":"2024-06-17T21:59:09.000-05:00","title":"SSH as a sudo replacement","url":"https://whynothugo.nl/journal/2024/06/13/ssh-as-a-sudo-replacement/","score":13,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ozj5nz/ssh_as_sudo_replacement","submitter_user":"wezm","user_is_author":false,"tags":["security"]},{"short_id":"kbihsp","short_id_url":"https://lobste.rs/s/kbihsp","created_at":"2024-06-17T20:40:03.000-05:00","title":"Turning the Tables on AI","url":"https://ia.net/topics/turning-the-tables-on-ai","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kbihsp/turning_tables_on_ai","submitter_user":"carlana","user_is_author":false,"tags":["ai","design"]},{"short_id":"2igpbf","short_id_url":"https://lobste.rs/s/2igpbf","created_at":"2024-06-17T19:41:56.000-05:00","title":"NumPy 2.0: an evolutionary milestone","url":"https://blog.scientific-python.org/numpy/numpy2/","score":10,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2igpbf/numpy_2_0_evolutionary_milestone","submitter_user":"ngoldbaum","user_is_author":false,"tags":["python","release"]},{"short_id":"ppa1up","short_id_url":"https://lobste.rs/s/ppa1up","created_at":"2024-06-17T19:11:04.000-05:00","title":"BulkUnsubscribe: Unsubscribe from all marketing emails in 1-click","url":"https://www.aspiring.dev/bulk-unsubscribe/","score":-3,"flags":4,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ppa1up/bulkunsubscribe_unsubscribe_from_all","submitter_user":"adamcstephens","user_is_author":false,"tags":["email"]},{"short_id":"iawnnh","short_id_url":"https://lobste.rs/s/iawnnh","created_at":"2024-06-17T18:41:30.000-05:00","title":"Understanding a Python Closure Oddity","url":"https://utcc.utoronto.ca/~cks/space/blog/python/UnderstandingClosureOddity","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/iawnnh/understanding_python_closure_oddity","submitter_user":"vrthra","user_is_author":false,"tags":["python"]},{"short_id":"dtrt8b","short_id_url":"https://lobste.rs/s/dtrt8b","created_at":"2024-06-17T18:14:31.000-05:00","title":"Boxing Up Common Parts of an App","url":"https://jacky.wtf/essays/2024/boxing-things-up/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dtrt8b/boxing_up_common_parts_app","submitter_user":"jalcine","user_is_author":true,"tags":["javascript"]}]