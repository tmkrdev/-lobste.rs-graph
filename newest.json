[{"short_id":"efl89f","short_id_url":"https://lobste.rs/s/efl89f","created_at":"2024-11-07T13:53:07.000-06:00","title":"An Opinionated Guide to Keyboard Thumb Keys","url":"https://johnlindquist.com/an-opinionated-guide-to-keyboard-thumb-keys/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/efl89f/opinionated_guide_keyboard_thumb_keys","submitter_user":"pushcx","user_is_author":false,"tags":["hardware"]},{"short_id":"q9dovm","short_id_url":"https://lobste.rs/s/q9dovm","created_at":"2024-11-07T13:15:20.000-06:00","title":"Functors to Monads: A Story of Shapes","url":"https://blog.jle.im/entry/functors-to-monads-a-story-of-shapes.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/q9dovm/functors_monads_story_shapes","submitter_user":"romes","user_is_author":false,"tags":["haskell","plt"]},{"short_id":"hdbvyy","short_id_url":"https://lobste.rs/s/hdbvyy","created_at":"2024-11-07T13:08:49.000-06:00","title":"determination: Rust typecheckers for System F and System F-omega","url":"https://hg.sr.ht/~icefox/determination","score":1,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hdbvyy/determination_rust_typecheckers_for","submitter_user":"icefox","user_is_author":true,"tags":["plt"]},{"short_id":"o15iiw","short_id_url":"https://lobste.rs/s/o15iiw","created_at":"2024-11-07T13:00:04.000-06:00","title":"gccrs: An alternative compiler for Rust","url":"https://blog.rust-lang.org/2024/11/07/gccrs-an-alternative-compiler-for-rust.html","score":9,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o15iiw/gccrs_alternative_compiler_for_rust","submitter_user":"drmorr","user_is_author":false,"tags":["rust"]},{"short_id":"2wtd3h","short_id_url":"https://lobste.rs/s/2wtd3h","created_at":"2024-11-07T12:41:28.000-06:00","title":"Welcoming two new Rust GPU maintainers","url":"https://rust-gpu.github.io/blog/2024/11/06/new-maintainers/","score":4,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2wtd3h/welcoming_two_new_rust_gpu_maintainers","submitter_user":"schell","user_is_author":false,"tags":["graphics","rust"]},{"short_id":"jel39y","short_id_url":"https://lobste.rs/s/jel39y","created_at":"2024-11-07T12:30:52.000-06:00","title":"PYLINGUAL: Toward Perfect Decompilation of Evolving High-Level Languages","url":"https://doi.ieeecomputersociety.org/10.1109/SP61157.2025.00052","score":5,"flags":0,"comment_count":0,"description":"\u003cp\u003eAbstract:\u003c/p\u003e\n\u003cp\u003ePython is one of the most popular programming languages among both industry developers and malware authors. Despite demand for Python decompilers, community efforts to maintain automatic Python decompilation tools have been hindered by Python’s aggressive language improvements and unstable bytecode specification. Every year, language features are added, code generation undergoes significant changes, and opcodes are added, deleted, and modified. Our research aims to integrate NLP techniques with classical PL theory to create a Python decompiler that accomodates evolving language features and changes to the bytecode specification with minimal human maintenance effort. PyLingual plugs in data-driven NLP components to a version-agnostic core to automatically absorb superficial bytecode and compiler changes, while leveraging programmatic components for abstract control flow reconstruction. To establish trust in the decompilation results, we introduce a stringent correctness measure based on “perfect decompilation”, a statically verifiable refinement of semantic equivalence. We demonstrate the efficacy of our approach with extensive real-world datasets of benign and malicious Python source code and their corresponding compiled PYC binaries. Our research makes three major contributions: (1) we present PyLingual, a scalable, data-driven decompilation framework with state-of-the-art support for Python versions 3.6 through 3.12, improving the perfect decompilation rate by an average of 45% over the best results of existing decompiler across four datasets; (2) we provide a Python decompiler evaluation framework that verifies decompilation results with perfect decompilation; and (3) we launch PyLingual as a public online service.\u003c/p\u003e\n","description_plain":"Abstract:\r\n\r\nPython is one of the most popular programming languages among both industry developers and malware authors. Despite demand for Python decompilers, community efforts to maintain automatic Python decompilation tools have been hindered by Python's aggressive language improvements and unstable bytecode specification. Every year, language features are added, code generation undergoes significant changes, and opcodes are added, deleted, and modified. Our research aims to integrate NLP techniques with classical PL theory to create a Python decompiler that accomodates evolving language features and changes to the bytecode specification with minimal human maintenance effort. PyLingual plugs in data-driven NLP components to a version-agnostic core to automatically absorb superficial bytecode and compiler changes, while leveraging programmatic components for abstract control flow reconstruction. To establish trust in the decompilation results, we introduce a stringent correctness measure based on \"perfect decompilation\", a statically verifiable refinement of semantic equivalence. We demonstrate the efficacy of our approach with extensive real-world datasets of benign and malicious Python source code and their corresponding compiled PYC binaries. Our research makes three major contributions: (1) we present PyLingual, a scalable, data-driven decompilation framework with state-of-the-art support for Python versions 3.6 through 3.12, improving the perfect decompilation rate by an average of 45% over the best results of existing decompiler across four datasets; (2) we provide a Python decompiler evaluation framework that verifies decompilation results with perfect decompilation; and (3) we launch PyLingual as a public online service.","comments_url":"https://lobste.rs/s/jel39y/pylingual_toward_perfect_decompilation","submitter_user":"2elli","user_is_author":true,"tags":["python","security"]},{"short_id":"mm25bj","short_id_url":"https://lobste.rs/s/mm25bj","created_at":"2024-11-07T12:26:39.000-06:00","title":"Haiku Activity \u0026 Contract Report, October 2024","url":"https://www.haiku-os.org/blog/waddlesplash/2024-11-06-haiku_activity_contract_report_october_2024","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mm25bj/haiku_activity_contract_report_october","submitter_user":"rjzak","user_is_author":false,"tags":["osdev"]},{"short_id":"wcm44c","short_id_url":"https://lobste.rs/s/wcm44c","created_at":"2024-11-07T09:42:35.000-06:00","title":"Visualising software architecture with the C4 model (2019)","url":"https://www.youtube.com/watch?v=x2-rSnhpw0g","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wcm44c/visualising_software_architecture_with","submitter_user":"stevan","user_is_author":false,"tags":["practices","video"]},{"short_id":"u3t4sg","short_id_url":"https://lobste.rs/s/u3t4sg","created_at":"2024-11-07T08:15:18.000-06:00","title":"XMPP: The Forgotten Gem of Instant Messaging","url":"https://adele.pages.casa/md/blog/xmpp-the-forgotten-gem-of-instant-messaging.md","score":19,"flags":0,"comment_count":21,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/u3t4sg/xmpp_forgotten_gem_instant_messaging","submitter_user":"kidon","user_is_author":false,"tags":["networking"]},{"short_id":"iukhuw","short_id_url":"https://lobste.rs/s/iukhuw","created_at":"2024-11-07T08:02:52.000-06:00","title":"Sanitize Client-Side: Why Server-Side HTML Sanitization is Doomed to Fail","url":"https://www.sonarsource.com/blog/sanitize-client-side-why-server-side-html-sanitization-is-doomed-to-fail/","score":3,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/iukhuw/sanitize_client_side_why_server_side_html","submitter_user":"freddyb","user_is_author":false,"tags":["browsers","security","web"]},{"short_id":"z1cyr1","short_id_url":"https://lobste.rs/s/z1cyr1","created_at":"2024-11-07T07:46:01.000-06:00","title":"FreeBSD 2024 Q3 Status Report","url":"https://www.freebsd.org/status/report-2024-07-2024-09/","score":10,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/z1cyr1/freebsd_2024_q3_status_report","submitter_user":"vermaden","user_is_author":false,"tags":["freebsd"]},{"short_id":"3qif0w","short_id_url":"https://lobste.rs/s/3qif0w","created_at":"2024-11-07T05:23:02.000-06:00","title":"Yellow Scream (2024)","url":"https://hannahilea.com/blog/yellow-scream-2024/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3qif0w/yellow_scream_2024","submitter_user":"vaibhavsagar","user_is_author":false,"tags":["art"]},{"short_id":"tevuuh","short_id_url":"https://lobste.rs/s/tevuuh","created_at":"2024-11-07T04:01:20.000-06:00","title":"Proposal for a Django project template","url":"https://david.guillot.me/en/posts/tech/proposal-for-a-django-project-template/","score":7,"flags":0,"comment_count":6,"description":"\u003cp\u003eI usually don’t post my own blog here, but the whole idea of that post is to get feedback on my proposal, to see if it makes sense to anyone.\u003c/p\u003e\n","description_plain":"I usually don't post my own blog here, but the whole idea of that post is to get feedback on my proposal, to see if it makes sense to anyone.","comments_url":"https://lobste.rs/s/tevuuh/proposal_for_django_project_template","submitter_user":"David-Guillot","user_is_author":true,"tags":["practices","web"]},{"short_id":"vfhknp","short_id_url":"https://lobste.rs/s/vfhknp","created_at":"2024-11-07T03:30:47.000-06:00","title":"The evolution of incident response at Podia","url":"https://jamie.ideasasylum.com/2024/11/02/the-evolution-of-incident-response-at-podia","score":1,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vfhknp/evolution_incident_response_at_podia","submitter_user":"vaibhavsagar","user_is_author":false,"tags":["devops","practices"]},{"short_id":"m9i8jy","short_id_url":"https://lobste.rs/s/m9i8jy","created_at":"2024-11-07T02:37:39.000-06:00","title":"peer to peer but mostly the main peer (2022)","url":"https://computer.rip/2022-01-16-peer-to-peer-but-mostly-the-main-peer.html","score":15,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m9i8jy/peer_peer_mostly_main_peer_2022","submitter_user":"bitfield","user_is_author":false,"tags":["historical","networking"]},{"short_id":"r7glre","short_id_url":"https://lobste.rs/s/r7glre","created_at":"2024-11-07T02:10:19.000-06:00","title":"2NF: The Missing Use Case","url":"https://datademythed.com/posts/2nf_missing_use_case/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/r7glre/2nf_missing_use_case","submitter_user":"squadette","user_is_author":false,"tags":["databases"]},{"short_id":"7b2ldp","short_id_url":"https://lobste.rs/s/7b2ldp","created_at":"2024-11-07T01:59:48.000-06:00","title":"oss-sec: shell wildcard expansion (un)safety","url":"https://seclists.org/oss-sec/2024/q4/56","score":5,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7b2ldp/oss_sec_shell_wildcard_expansion_un","submitter_user":"freddyb","user_is_author":false,"tags":["security","unix"]},{"short_id":"fvlfzx","short_id_url":"https://lobste.rs/s/fvlfzx","created_at":"2024-11-07T01:09:51.000-06:00","title":"The Big Array Size Survey for C","url":"https://thephd.dev/the-big-array-size-survey-for-c","score":23,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fvlfzx/big_array_size_survey_for_c","submitter_user":"darichey","user_is_author":false,"tags":["c"]},{"short_id":"whbh4v","short_id_url":"https://lobste.rs/s/whbh4v","created_at":"2024-11-06T23:28:07.000-06:00","title":"A Science of Concurrent Programs","url":"https://lamport.azurewebsites.net/tla/science-book.html","score":15,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/whbh4v/science_concurrent_programs","submitter_user":"danielcompton","user_is_author":false,"tags":["book","formalmethods"]},{"short_id":"pvt3jh","short_id_url":"https://lobste.rs/s/pvt3jh","created_at":"2024-11-06T23:25:39.000-06:00","title":"Implementing Signal’s Double Ratchet algorithm (2020)","url":"https://nfil.dev/coding/encryption/python/double-ratchet-example/","score":11,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pvt3jh/implementing_signal_s_double_ratchet","submitter_user":"indigo","user_is_author":false,"tags":["cryptography"]},{"short_id":"dbukto","short_id_url":"https://lobste.rs/s/dbukto","created_at":"2024-11-06T21:13:16.000-06:00","title":"Rust Syn Crate Tutorial: Automate Builder Patterns with Custom Macros","url":"https://packetandpine.com/blog/rust-syn-crate-tutorial/","score":4,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dbukto/rust_syn_crate_tutorial_automate_builder","submitter_user":"itamarst","user_is_author":false,"tags":["rust"]},{"short_id":"rzmesn","short_id_url":"https://lobste.rs/s/rzmesn","created_at":"2024-11-06T20:12:45.000-06:00","title":"getopt() but smaller","url":"https://dotat.at/@/2024-11-06-getopt.html","score":36,"flags":1,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rzmesn/getopt_smaller","submitter_user":"fanf","user_is_author":true,"tags":["c"]},{"short_id":"xetixd","short_id_url":"https://lobste.rs/s/xetixd","created_at":"2024-11-06T18:55:17.000-06:00","title":"Visualizing binary files with ImHex's DSL, the \"pattern language\"","url":"https://xy2i.blogspot.com/2024/11/using-imhexs-pattern-language-to-parse.html","score":19,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xetixd/visualizing_binary_files_with_imhex_s_dsl","submitter_user":"jmillikin","user_is_author":false,"tags":["programming"]},{"short_id":"br7rzx","short_id_url":"https://lobste.rs/s/br7rzx","created_at":"2024-11-06T18:10:40.000-06:00","title":"How to Learn: Userland Disk I/O","url":"https://transactional.blog/how-to-learn/disk-io","score":22,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/br7rzx/how_learn_userland_disk_i_o","submitter_user":"eatonphil","user_is_author":false,"tags":["databases"]},{"short_id":"uxyu6v","short_id_url":"https://lobste.rs/s/uxyu6v","created_at":"2024-11-06T16:48:47.000-06:00","title":"Emulator of Odra 1003/1013, Polish mainframes of the 1960s","url":"https://klemens-czajka-xyz.translate.goog/?_x_tr_sl=pl\u0026_x_tr_tl=en\u0026_x_tr_hl=pl\u0026_x_tr_pto=wapp","score":9,"flags":0,"comment_count":1,"description":"\u003cp\u003eFrom \u003ca href=\"https://mastodon.social/@rcz@101010.pl/113432870005003711\" rel=\"ugc\"\u003ethe author’s son\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDuring COVID my dad learned JS just to write an ODRA 1003/1013 emulator. He was even chasing Kamburelis when he was still alive to get some internal implementation details right.\u003c/p\u003e\n\u003c/blockquote\u003e\n","description_plain":"From [the author’s son][0]:\r\n\r\n\u003e During COVID my dad learned JS just to write an ODRA 1003/1013 emulator. He was even chasing Kamburelis when he was still alive to get some internal implementation details right.\r\n\r\n[0]: https://mastodon.social/@rcz@101010.pl/113432870005003711","comments_url":"https://lobste.rs/s/uxyu6v/emulator_odra_1003_1013_polish","submitter_user":"nathell","user_is_author":false,"tags":["retrocomputing"]}]