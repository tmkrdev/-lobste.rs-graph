[{"short_id":"0l57b2","short_id_url":"https://lobste.rs/s/0l57b2","created_at":"2022-05-28T08:02:38.000-05:00","title":"PACMAN: Attacking ARM Pointer Authentication with Speculative Execution","url":"https://people.csail.mit.edu/weontaek/pubs/PACMAN_ISCA22.pdf","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/0l57b2/pacman_attacking_arm_pointer","submitter_user":{"username":"lattera","created_at":"2014-05-30T07:30:38.000-05:00","is_admin":false,"about":"Cofounder of HardenedBSD, lover of most things opensource.","is_moderator":false,"karma":4851,"avatar_url":"/avatars/lattera-100.png","invited_by_user":"xmj","github_username":"lattera","twitter_username":"lattera"},"tags":["pdf","security"]},{"short_id":"730yaa","short_id_url":"https://lobste.rs/s/730yaa","created_at":"2022-05-28T07:50:16.000-05:00","title":"Literate APIs with Emacs and Org Mode","url":"https://www.kpassa.me/posts/literate2/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/730yaa/literate_apis_with_emacs_org_mode","submitter_user":{"username":"schmudde","created_at":"2021-03-24T18:10:24.000-05:00","is_admin":false,"about":"Turing complete. ","is_moderator":false,"karma":134,"avatar_url":"/avatars/schmudde-100.png","invited_by_user":"JordiGH","github_username":"schmudde"},"tags":["emacs"]},{"short_id":"dfrvp3","short_id_url":"https://lobste.rs/s/dfrvp3","created_at":"2022-05-28T06:39:29.000-05:00","title":"clang-format considered harmful","url":"","score":5,"flags":0,"comment_count":3,"description":"\u003cp\u003eI don’t know of a good C++ code formatter, but clang-format is not one. It is a thing I don’t like about C++.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. Myths\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFirst, I must dispel 4 oft-cited myths used to argue for uncritically slapping on a random coding standard.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eMyth 1: Any coding standard is as good as another.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThere \u003cem\u003eis\u003c/em\u003e such a thing as practicality in coding standards. Before even contemplating controversial topics – aesthetics, it’s not hard to think of aspects of code formatting that contribute to \u003ca href=\"https://en.wikipedia.org/wiki/Write_amplification\" rel=\"ugc\"\u003ewrite amplification\u003c/a\u003e – how big a change becomes in the resulting diff – that should be uncontroversial. Let’s get the basics right:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eEase of adding or removing an element at the end. This thing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eXXX XXX = XXX::XXXXXXXXXXXXXX { X,\n                                Y }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eReflow ripple effects: This thing, after inserting “something”:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eXXX XXX = XXX::XXXXXXXXXXXXXX { \"something\",\n                                X, Y }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDependent indentation: This thing, after you renamed it (and forgot to reformat):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eXXX XXX = XXX::XXXX { X,\n                                Y }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIndentation dependence: When changing the scope of a section of code causes the formatter to change strategy:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n    XXX\n    XXX =\n        XXX::\n        XXXXX\n        { X, Y }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHuman predictability: Does the formatter follow rules that a human with infinite experience can predict, or does it play chess with sums of weighted costs? In practical terms, must you run a formatter locally in order to write anything that CI will accept?\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere exists a formatting that has none of these problems. I’m of course talking about the self-evident pythonic/rustic formatting (which probably has many more names):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eXXX XXX = XXX::XXXXXXXXXXXXXX {\n    X,\n    Y,\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eMyth 2: The most important thing is to have a coding standard and enforce it.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI remember a time before clang-format:\nI would say that professional developers did at least as good of a job as clang-format to begin with.\nIn fact, in some ways better than any autoformatter could ever come up with, because the human knows best, such as which arguments are associated. Freedom of expression!\nThis openness to creativity made the conventions fluid, so that better ideas had a foothold.\u003c/p\u003e\n\u003cp\u003eIn contrast, with clang-format, I see good developers being passive and indifferent to details like trailing comma that are not at all insignificant to what clang-format will do.\u003c/p\u003e\n\u003cp\u003eIf the purpose of automatic formatting is to avoid style disputes in code review, it doesn’t work,\nbecause too few people know the importance it gives to trailing comma – I have to nag people about it.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eMyth 3: It is possible to configure clang-format to a pythonic/rustic style.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI have tried every config option. There is \u003ccode\u003eAlignAfterOpenBracket\u003c/code\u003e, but you have to do the rest yourself in terms of remembering trailing comma (which is only applicable in curly braces and not enforceable), forcing line breaks with line comments and liberal use of \u003ccode\u003e// clang-format off\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eMyth 4: It is always convenient for everyone to run the formatter.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf you haven’t noticed the trend, everything is wrapped in impenetrable all-encompassing dockerized CI-scripts that can’t just check a small change quickly.\u0026lt;/sarcasm\u0026gt;\u003c/p\u003e\n\u003cp\u003eIt doesn’t actually matter how convenient it is, because I don’t necessarily approve of what it does to my code – I can’t run the formatter before I have committed my changes anyway. Then, I rewrite my code to comply if needed be. If revising one’s commit stack isn’t hard enough as it is, doing it with style changes into the mix is the worst.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Properties of a good formatter\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSensible by default, or a sensible configuration (after the criteria above) must exist in its configuration space.\u003c/li\u003e\n\u003cli\u003eSlack: The human knows certain things better than the formatter, such as which arguments are associated, and may therefore have a preference for where to break the line if necessary. The formatter’s job is not to take this freedom of expression away. Its job is to satisfy a completely disjoint set of requirements. Therefore, it must allow more than one way to lay out the same code. Python formatters do a good job in this department.\u003c/li\u003e\n\u003cli\u003eHumanly predictable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e3. So what’s wrong with clang-format in particular?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAll the above. If clang-format behaved like a python formatter or like rustfmt, you wouldn’t be reading this. Though I’m no fan of automatic formatting in general, other languages have it better.\u003c/p\u003e\n","description_plain":"I don't know of a good C++ code formatter, but clang-format is not one. It is a thing I don't like about C++.\r\n\r\n**1. Myths**\r\n\r\nFirst, I must dispel 4 oft-cited myths used to argue for uncritically slapping on a random coding standard.\r\n\r\n*Myth 1: Any coding standard is as good as another.*\r\n\r\nThere _is_ such a thing as practicality in coding standards. Before even contemplating controversial topics – aesthetics, it's not hard to think of aspects of code formatting that contribute to [write amplification](https://en.wikipedia.org/wiki/Write_amplification) – how big a change becomes in the resulting diff – that should be uncontroversial. Let's get the basics right:\r\n\r\n* Ease of adding or removing an element at the end. This thing:\r\n\r\n    ```\r\n    XXX XXX = XXX::XXXXXXXXXXXXXX { X,\r\n                                    Y }\r\n    ```\r\n\r\n* Reflow ripple effects: This thing, after inserting \"something\":\r\n\r\n    ```\r\n    XXX XXX = XXX::XXXXXXXXXXXXXX { \"something\",\r\n                                    X, Y }\r\n    ```\r\n\r\n* Dependent indentation: This thing, after you renamed it (and forgot to reformat):\r\n\r\n    ```\r\n    XXX XXX = XXX::XXXX { X,\r\n                                    Y }\r\n    ```\r\n\r\n* Indentation dependence: When changing the scope of a section of code causes the formatter to change strategy:\r\n\r\n    ```\r\n    {\r\n        XXX\r\n        XXX =\r\n            XXX::\r\n            XXXXX\r\n            { X, Y }\r\n    }\r\n    ```\r\n\r\n* Human predictability: Does the formatter follow rules that a human with infinite experience can predict, or does it play chess with sums of weighted costs? In practical terms, must you run a formatter locally in order to write anything that CI will accept?\r\n\r\nThere exists a formatting that has none of these problems. I'm of course talking about the self-evident pythonic/rustic formatting (which probably has many more names):\r\n\r\n    XXX XXX = XXX::XXXXXXXXXXXXXX {\r\n        X,\r\n        Y,\r\n    }\r\n\r\n*Myth 2: The most important thing is to have a coding standard and enforce it.*\r\n\r\nI remember a time before clang-format:\r\nI would say that professional developers did at least as good of a job as clang-format to begin with.\r\nIn fact, in some ways better than any autoformatter could ever come up with, because the human knows best, such as which arguments are associated. Freedom of expression!\r\nThis openness to creativity made the conventions fluid, so that better ideas had a foothold.\r\n\r\nIn contrast, with clang-format, I see good developers being passive and indifferent to details like trailing comma that are not at all insignificant to what clang-format will do.\r\n\r\nIf the purpose of automatic formatting is to avoid style disputes in code review, it doesn't work,\r\nbecause too few people know the importance it gives to trailing comma – I have to nag people about it.\r\n\r\n*Myth 3: It is possible to configure clang-format to a pythonic/rustic style.*\r\n\r\nI have tried every config option. There is `AlignAfterOpenBracket`, but you have to do the rest yourself in terms of remembering trailing comma (which is only applicable in curly braces and not enforceable), forcing line breaks with line comments and liberal use of `// clang-format off`.\r\n\r\n*Myth 4: It is always convenient for everyone to run the formatter.*\r\n\r\nIf you haven't noticed the trend, everything is wrapped in impenetrable all-encompassing dockerized CI-scripts that can't just check a small change quickly.\u0026lt;/sarcasm\u0026gt;\r\n\r\nIt doesn't actually matter how convenient it is, because I don't necessarily approve of what it does to my code – I can't run the formatter before I have committed my changes anyway. Then, I rewrite my code to comply if needed be. If revising one's commit stack isn't hard enough as it is, doing it with style changes into the mix is the worst. \r\n\r\n**2. Properties of a good formatter**\r\n\r\n* Sensible by default, or a sensible configuration (after the criteria above) must exist in its configuration space.\r\n* Slack: The human knows certain things better than the formatter, such as which arguments are associated, and may therefore have a preference for where to break the line if necessary. The formatter's job is not to take this freedom of expression away. Its job is to satisfy a completely disjoint set of requirements. Therefore, it must allow more than one way to lay out the same code. Python formatters do a good job in this department.\r\n* Humanly predictable.\r\n\r\n**3. So what's wrong with clang-format in particular?**\r\n\r\nAll the above. If clang-format behaved like a python formatter or like rustfmt, you wouldn't be reading this. Though I'm no fan of automatic formatting in general, other languages have it better.","comments_url":"https://lobste.rs/s/dfrvp3/clang_format_considered_harmful","submitter_user":{"username":"anordal","created_at":"2017-08-17T01:45:52.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":677,"avatar_url":"/avatars/anordal-100.png","invited_by_user":"xyproto"},"tags":["c++","rant"]},{"short_id":"htpdbu","short_id_url":"https://lobste.rs/s/htpdbu","created_at":"2022-05-28T06:17:08.000-05:00","title":"Please Stop Using Grey Text","url":"https://tangledweb.xyz/please-stop-using-grey-text-3d3e71acfca8","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/htpdbu/please_stop_using_grey_text","submitter_user":{"username":"hedy","created_at":"2020-11-24T03:01:26.000-06:00","is_admin":false,"about":"Playing with some foss \u0026 terminal stuff\r\n\r\nWhat I'm wasting time on:\r\n1. CSS\r\n2. tui \r\n3. go\r\n4 flask\r\n\r\n[Verifying my OpenPGP key: openpgp4fpr:562DAB0963A00534B95C66E345B4B73EDF1304D9]","is_moderator":false,"karma":66,"avatar_url":"/avatars/hedy-100.png","invited_by_user":"gerikson","github_username":"hedyhli"},"tags":["a11y","design","web"]},{"short_id":"xfvtdh","short_id_url":"https://lobste.rs/s/xfvtdh","created_at":"2022-05-28T05:02:17.000-05:00","title":"Derw: hydrating the web language landscape, May 2022 status","url":"https://derw.substack.com/p/derw-hydrating-the-web-language-landscape","score":1,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xfvtdh/derw_hydrating_web_language_landscape","submitter_user":{"username":"eeue56","created_at":"2016-10-30T11:07:08.000-05:00","is_admin":false,"about":"Work at Schibsted. Working on [Derw](https://twitter.com/derwlang)","is_moderator":false,"karma":503,"avatar_url":"/avatars/eeue56-100.png","invited_by_user":"355E3B","github_username":"eeue56","twitter_username":"derwlang"},"tags":["elm"]},{"short_id":"nj6lzd","short_id_url":"https://lobste.rs/s/nj6lzd","created_at":"2022-05-28T03:58:48.000-05:00","title":"vgtk: A declarative desktop UI framework for Rust built on GTK","url":"https://github.com/bodil/vgtk","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nj6lzd/vgtk_declarative_desktop_ui_framework","submitter_user":{"username":"rtpg","created_at":"2016-07-06T05:00:24.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":2502,"avatar_url":"/avatars/rtpg-100.png","invited_by_user":"BruceM"},"tags":["rust"]},{"short_id":"xf0h8j","short_id_url":"https://lobste.rs/s/xf0h8j","created_at":"2022-05-28T02:47:43.000-05:00","title":"Tag suggestion: `sqlite`","url":"","score":22,"flags":0,"comment_count":4,"description":"\u003cp\u003eFree-text search for \u003ccode\u003esqlite\u003c/code\u003e reveals nearly 1,000 entries. It tends to be cross-cutting topic, with stories ranging from web development, to systems, to mobile, etc and it might not always be in the title, so a tag would be useful here.\u003c/p\u003e\n\u003cp\u003eJust a handful of stories within the last two weeks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/fki4tj/architecture_notes_datasette\" rel=\"ugc\"\u003eArchitecture Notes: Datasette\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/tkkdci/rqlite_distributed_sqlite_v7_5_0_trading\" rel=\"ugc\"\u003erqlite – distributed SQLite: v7.5.0 trading durability for higher write performance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/4ac485/temporary_tables_sqlite\" rel=\"ugc\"\u003eTemporary tables in SQLite\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/en6f23/json_virtual_columns_sqlite\" rel=\"ugc\"\u003eJSON and virtual columns in SQLite\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/klejws/performance_tests_for_bulk_insert_into\" rel=\"ugc\"\u003ePerformance tests for bulk insert into SQLite memory database in Go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/k9hzrj/db_browser_for_sqlite\" rel=\"ugc\"\u003eDB Browser for SQLite\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere’s always been a lot of interest in sqlite and this seems to be picking up recently. Compare to topics like \u003ccode\u003ezig\u003c/code\u003e, \u003ccode\u003eswift\u003c/code\u003e, and \u003ccode\u003ekotlin\u003c/code\u003e which have a few hundred hits each, an \u003ccode\u003esqlite\u003c/code\u003e tag seems to be warranted.\u003c/p\u003e\n","description_plain":"Free-text search for `sqlite` reveals nearly 1,000 entries. It tends to be cross-cutting topic, with stories ranging from web development, to systems, to mobile, etc and it might not always be in the title, so a tag would be useful here.\r\n\r\nJust a handful of stories within the last two weeks:\r\n\r\n* [Architecture Notes: Datasette](https://lobste.rs/s/fki4tj/architecture_notes_datasette)\r\n* [rqlite – distributed SQLite: v7.5.0 trading durability for higher write performance](https://lobste.rs/s/tkkdci/rqlite_distributed_sqlite_v7_5_0_trading)\r\n* [Temporary tables in SQLite](https://lobste.rs/s/4ac485/temporary_tables_sqlite)\r\n* [JSON and virtual columns in SQLite](https://lobste.rs/s/en6f23/json_virtual_columns_sqlite)\r\n* [Performance tests for bulk insert into SQLite memory database in Go](https://lobste.rs/s/klejws/performance_tests_for_bulk_insert_into)\r\n* [DB Browser for SQLite](https://lobste.rs/s/k9hzrj/db_browser_for_sqlite)\r\n\r\nThere's always been a lot of interest in sqlite and this seems to be picking up recently. Compare to topics like `zig`, `swift`, and `kotlin` which have a few hundred hits each, an `sqlite` tag seems to be warranted.","comments_url":"https://lobste.rs/s/xf0h8j/tag_suggestion_sqlite","submitter_user":{"username":"hashemi","created_at":"2017-02-16T05:09:25.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":427,"avatar_url":"/avatars/hashemi-100.png","invited_by_user":"Flisk","github_username":"hashemi","twitter_username":"ahmadh"},"tags":["meta"]},{"short_id":"mul1cs","short_id_url":"https://lobste.rs/s/mul1cs","created_at":"2022-05-27T23:30:20.000-05:00","title":"Conway's Game of Life in APL in FORTH","url":"https://github.com/chmykh/apl-life","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mul1cs/conway_s_game_life_apl_forth","submitter_user":{"username":"technetium","created_at":"2020-02-06T19:52:39.000-06:00","is_admin":false,"about":"A sentient lump of a certain high-density material.","is_moderator":false,"karma":3903,"avatar_url":"/avatars/technetium-100.png","invited_by_user":"ngoldbaum"},"tags":["apl","programming"]},{"short_id":"llqm38","short_id_url":"https://lobste.rs/s/llqm38","created_at":"2022-05-27T22:52:18.000-05:00","title":"The unreasonable effectiveness of f‍-‍strings and re.VERBOSE","url":"https://death.andgravity.com/f-re","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/llqm38/unreasonable_effectiveness_f_strings_re","submitter_user":{"username":"adamshaylor","created_at":"2020-10-26T20:04:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1308,"avatar_url":"/avatars/adamshaylor-100.png","invited_by_user":"peterc","github_username":"adamshaylor","keybase_signatures":[{"kb_username":"adamshaylor","sig_hash":"0ebd1a3d88d97f20922147a75889dfcae02b632d94156b9315a6d93384ae2e4f0f"}]},"tags":["python"]},{"short_id":"yjyjwl","short_id_url":"https://lobste.rs/s/yjyjwl","created_at":"2022-05-27T22:20:11.000-05:00","title":"Terraform should have remained stateless","url":"https://www.bejarano.io/terraform-stateless/","score":21,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yjyjwl/terraform_should_have_remained","submitter_user":{"username":"ricardbejarano","created_at":"2018-10-10T16:53:50.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":456,"avatar_url":"/avatars/ricardbejarano-100.png","invited_by_user":"ZeroFiveFive"},"tags":["devops"]},{"short_id":"nz1dgw","short_id_url":"https://lobste.rs/s/nz1dgw","created_at":"2022-05-27T21:13:12.000-05:00","title":"LTeX – Grammar/Spell Checker Using LanguageTool with Support for LaTeX, Markdown, and Others | LTeX","url":"https://valentjn.github.io/ltex/","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nz1dgw/ltex_grammar_spell_checker_using","submitter_user":{"username":"bowyakka","created_at":"2014-04-02T09:33:26.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":275,"avatar_url":"/avatars/bowyakka-100.png","invited_by_user":"andrewcooke"},"tags":["vim"]},{"short_id":"3qomu7","short_id_url":"https://lobste.rs/s/3qomu7","created_at":"2022-05-27T19:42:59.000-05:00","title":"Catalogs and Context","url":"https://kcoyle.net/catcon.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3qomu7/catalogs_context","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":91544,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["design","philosophy"]},{"short_id":"fki4tj","short_id_url":"https://lobste.rs/s/fki4tj","created_at":"2022-05-27T17:02:52.000-05:00","title":"Architecture Notes: Datasette","url":"https://architecturenotes.co/datasette-simon-willison/","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fki4tj/architecture_notes_datasette","submitter_user":{"username":"simonw","created_at":"2021-07-29T15:43:15.000-05:00","is_admin":false,"about":"Creator of https://datasette.io","is_moderator":false,"karma":284,"avatar_url":"/avatars/simonw-100.png","invited_by_user":"scoates","github_username":"simonw"},"tags":["programming","python","web"]},{"short_id":"ywrgvo","short_id_url":"https://lobste.rs/s/ywrgvo","created_at":"2022-05-27T16:21:38.000-05:00","title":"SAGE and a glimpse of group computing from before the PC","url":"https://interconnected.org/home/2021/12/21/sage","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ywrgvo/sage_glimpse_group_computing_from_before","submitter_user":{"username":"df","created_at":"2019-12-17T11:43:16.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":874,"avatar_url":"/avatars/df-100.png","invited_by_user":"roshanravan"},"tags":["historical"]},{"short_id":"rseg9n","short_id_url":"https://lobste.rs/s/rseg9n","created_at":"2022-05-27T15:57:25.000-05:00","title":"React PIN Field v3.0.14 released","url":"https://github.com/soywod/react-pin-field","score":1,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rseg9n/react_pin_field_v3_0_14_released","submitter_user":{"username":"soywod","created_at":"2020-06-10T23:44:32.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":211,"avatar_url":"/avatars/soywod-100.png","invited_by_user":"icy"},"tags":["javascript","release","web"]},{"short_id":"ylrjgq","short_id_url":"https://lobste.rs/s/ylrjgq","created_at":"2022-05-27T14:26:17.000-05:00","title":"Ghost in the Shellcode","url":"https://www.notcheckmark.com/2022/05/ghost-in-the-shellcode/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ylrjgq/ghost_shellcode","submitter_user":{"username":"withzombies","created_at":"2019-07-23T19:12:36.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1,"avatar_url":"/avatars/withzombies-100.png","invited_by_user":"lojikil"},"tags":["event","historical","security"]},{"short_id":"rpjv2w","short_id_url":"https://lobste.rs/s/rpjv2w","created_at":"2022-05-27T13:54:33.000-05:00","title":"A Conference About Software You Can Love","url":"https://kristoff.it/blog/software-you-can-love/","score":14,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rpjv2w/conference_about_software_you_can_love","submitter_user":{"username":"carlmjohnson","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carl M. Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":3682,"avatar_url":"/avatars/carlmjohnson-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson","twitter_username":"carlmjohnson"},"tags":["programming"]},{"short_id":"rsjnxz","short_id_url":"https://lobste.rs/s/rsjnxz","created_at":"2022-05-27T12:32:08.000-05:00","title":"On removing APIs - Linux status bar, GNOME system tray and ElementaryOS AppIndicators","url":"https://blog.console.dev/on-removing-apis-status-appindicators-in-gnome/","score":14,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rsjnxz/on_removing_apis_linux_status_bar_gnome","submitter_user":{"username":"LolPython","created_at":"2019-03-09T13:58:12.000-06:00","is_admin":false,"about":"https://github.com/GabrielDougherty\r\n\r\nhttps://gabrieldougherty.com/","is_moderator":false,"karma":548,"avatar_url":"/avatars/LolPython-100.png","invited_by_user":"gerikson"},"tags":["api","historical","linux"]},{"short_id":"s5co2f","short_id_url":"https://lobste.rs/s/s5co2f","created_at":"2022-05-27T11:50:13.000-05:00","title":"Where Contributors Have Problems with Oil","url":"https://github.com/oilshell/oil/wiki/Where-Contributors-Have-Problems","score":15,"flags":1,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/s5co2f/where_contributors_have_problems_with","submitter_user":{"username":"andyc","created_at":"2016-11-29T12:37:37.000-06:00","is_admin":false,"about":"Working on http://www.oilshell.org/\r\n","is_moderator":false,"karma":7418,"avatar_url":"/avatars/andyc-100.png","invited_by_user":"flyingfisch"},"tags":["programming","unix"]},{"short_id":"rt8lk3","short_id_url":"https://lobste.rs/s/rt8lk3","created_at":"2022-05-27T11:16:13.000-05:00","title":"Layouts RFC","url":"https://nextjs.org/blog/layouts-rfc","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rt8lk3/layouts_rfc","submitter_user":{"username":"adamshaylor","created_at":"2020-10-26T20:04:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1308,"avatar_url":"/avatars/adamshaylor-100.png","invited_by_user":"peterc","github_username":"adamshaylor","keybase_signatures":[{"kb_username":"adamshaylor","sig_hash":"0ebd1a3d88d97f20922147a75889dfcae02b632d94156b9315a6d93384ae2e4f0f"}]},"tags":["javascript","release","web"]},{"short_id":"qzcjgq","short_id_url":"https://lobste.rs/s/qzcjgq","created_at":"2022-05-27T11:13:19.000-05:00","title":"Retrofitting Temporal Memory Safety on C++","url":"https://security.googleblog.com/2022/05/retrofitting-temporal-memory-safety-on-c.html","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qzcjgq/retrofitting_temporal_memory_safety_on_c","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"🐋\r\nhttps://raymii.org","is_moderator":false,"karma":16239,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["c++"]},{"short_id":"dhnprb","short_id_url":"https://lobste.rs/s/dhnprb","created_at":"2022-05-27T11:12:52.000-05:00","title":"A City in a Bottle","url":"https://twitter.com/KilledByAPixel/status/1517294627996545024","score":34,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dhnprb/city_bottle","submitter_user":{"username":"adamshaylor","created_at":"2020-10-26T20:04:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1308,"avatar_url":"/avatars/adamshaylor-100.png","invited_by_user":"peterc","github_username":"adamshaylor","keybase_signatures":[{"kb_username":"adamshaylor","sig_hash":"0ebd1a3d88d97f20922147a75889dfcae02b632d94156b9315a6d93384ae2e4f0f"}]},"tags":["graphics","javascript","web"]},{"short_id":"7ey0wn","short_id_url":"https://lobste.rs/s/7ey0wn","created_at":"2022-05-27T10:46:58.000-05:00","title":"Parse Platform — The complete application stack","url":"https://parseplatform.org/","score":6,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7ey0wn/parse_platform_complete_application","submitter_user":{"username":"idrougge","created_at":"2020-03-20T09:40:53.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1770,"avatar_url":"/avatars/idrougge-100.png","invited_by_user":"gerikson"},"tags":["api"]},{"short_id":"jmpkwv","short_id_url":"https://lobste.rs/s/jmpkwv","created_at":"2022-05-27T10:33:29.000-05:00","title":"After 30 years, the world can now play the lost Marble Madness II","url":"https://arstechnica.com/gaming/2022/05/after-30-years-the-world-can-now-play-the-lost-marble-madness-ii/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jmpkwv/after_30_years_world_can_now_play_lost","submitter_user":{"username":"fernplus","created_at":"2018-12-21T09:13:34.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":684,"avatar_url":"/avatars/fernplus-100.png","invited_by_user":"premysl"},"tags":["games"]},{"short_id":"hgnadb","short_id_url":"https://lobste.rs/s/hgnadb","created_at":"2022-05-27T10:07:58.000-05:00","title":"Perl's undefined behaviors","url":"https://briandfoy.github.io/perl-s-undefined-behavior/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hgnadb/perl_s_undefined_behaviors","submitter_user":{"username":"tbonesteaks","created_at":"2019-09-24T11:30:46.000-05:00","is_admin":false,"about":"Feel free to email at: tbonesteaks at protonmail.com","is_moderator":false,"karma":1195,"avatar_url":"/avatars/tbonesteaks-100.png","invited_by_user":"wink"},"tags":["perl"]}]