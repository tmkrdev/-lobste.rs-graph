[{"short_id":"r9auni","short_id_url":"https://lobste.rs/s/r9auni","created_at":"2024-04-23T03:32:17.000-05:00","title":"Top 10 Trending Python Libraries in April 2024","url":"https://dev.to/libhunt/top-10-trending-python-libraries-in-april-2024-4l0j","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/r9auni/top_10_trending_python_libraries_april","submitter_user":"stanbright","user_is_author":false,"tags":["programming","python"]},{"short_id":"qwebzx","short_id_url":"https://lobste.rs/s/qwebzx","created_at":"2024-04-23T03:29:26.000-05:00","title":"sdt: Prototype implementation of SDT probes using hot-patching","url":"https://reviews.freebsd.org/D44483","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qwebzx/sdt_prototype_implementation_sdt_probes","submitter_user":"0mp","user_is_author":false,"tags":["freebsd","osdev","performance"]},{"short_id":"nbgohm","short_id_url":"https://lobste.rs/s/nbgohm","created_at":"2024-04-23T03:12:51.000-05:00","title":"The Optimizations in Erlang/OTP 27","url":"https://www.erlang.org/blog/optimizations/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nbgohm/optimizations_erlang_otp_27","submitter_user":"ehamberg","user_is_author":false,"tags":["erlang"]},{"short_id":"r65bzs","short_id_url":"https://lobste.rs/s/r65bzs","created_at":"2024-04-23T03:04:42.000-05:00","title":"The value of unit tests","url":"https://nedbatchelder.com//blog/201602/the_value_of_unit_tests.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/r65bzs/value_unit_tests","submitter_user":"hongminhee","user_is_author":false,"tags":["programming","testing"]},{"short_id":"pzdmin","short_id_url":"https://lobste.rs/s/pzdmin","created_at":"2024-04-23T01:19:14.000-05:00","title":"udev-hid-bpf: quickstart tooling to fix your HID devices with eBPF","url":"http://who-t.blogspot.com/2024/04/udev-hid-bpf-quickstart-tooling-to-fix.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pzdmin/udev_hid_bpf_quickstart_tooling_fix_your","submitter_user":"wezm","user_is_author":false,"tags":["linux"]},{"short_id":"kyuc6h","short_id_url":"https://lobste.rs/s/kyuc6h","created_at":"2024-04-22T19:42:21.000-05:00","title":"Understanding and avoiding visually ambiguous characters in IDs","url":"https://gajus.com/blog/avoiding-visually-ambiguous-characters-in-ids","score":4,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kyuc6h/understanding_avoiding_visually","submitter_user":"gajus","user_is_author":true,"tags":["a11y"]},{"short_id":"ifxjz6","short_id_url":"https://lobste.rs/s/ifxjz6","created_at":"2024-04-22T19:00:16.000-05:00","title":"LLM in a flash: Efficient Large Language Model Inference with Limited Memory","url":"https://arxiv.org/pdf/2312.11514.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eLarge language models (LLMs) are central to modern natural language processing, delivering exceptional performance in various tasks. However, their substantial computational and memory requirements present challenges, especially for devices with limited DRAM capacity. This paper tackles the challenge of efficiently running LLMs that exceed the available DRAM capacity by storing the model parameters in flash memory, but bringing them on demand to DRAM. Our method involves constructing an inference cost model that takes into account the characteristics of flash memory, guiding us to optimize in two critical areas: reducing the volume of data transferred from flash and reading data in larger, more contiguous chunks. Within this hardware-informed framework, we introduce two principal techniques. First, “windowing” strategically reduces data transfer by reusing previously activated neurons, and second, “row-column bundling”, tailored to the sequential data access strengths of flash memory, increases the size of data chunks read from flash memory. These methods collectively enable running models up to twice the size of the available DRAM, with a 4-5x and 20-25x increase in inference speed compared to naive loading approaches in CPU and GPU, respectively. Our integration of sparsity awareness, context-adaptive loading, and a hardware-oriented design paves the way for effective inference of LLMs on devices with limited memory.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2312.11514\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Large language models (LLMs) are central to modern natural language processing, delivering exceptional performance in various tasks. However, their substantial computational and memory requirements present challenges, especially for devices with limited DRAM capacity. This paper tackles the challenge of efficiently running LLMs that exceed the available DRAM capacity by storing the model parameters in flash memory, but bringing them on demand to DRAM. Our method involves constructing an inference cost model that takes into account the characteristics of flash memory, guiding us to optimize in two critical areas: reducing the volume of data transferred from flash and reading data in larger, more contiguous chunks. Within this hardware-informed framework, we introduce two principal techniques. First, \"windowing\" strategically reduces data transfer by reusing previously activated neurons, and second, \"row-column bundling\", tailored to the sequential data access strengths of flash memory, increases the size of data chunks read from flash memory. These methods collectively enable running models up to twice the size of the available DRAM, with a 4-5x and 20-25x increase in inference speed compared to naive loading approaches in CPU and GPU, respectively. Our integration of sparsity awareness, context-adaptive loading, and a hardware-oriented design paves the way for effective inference of LLMs on devices with limited memory.\r\n\r\n[arXiv](https://arxiv.org/abs/2312.11514)","comments_url":"https://lobste.rs/s/ifxjz6/llm_flash_efficient_large_language_model","submitter_user":"calvin","user_is_author":false,"tags":["ai","pdf"]},{"short_id":"tcl9yc","short_id_url":"https://lobste.rs/s/tcl9yc","created_at":"2024-04-22T18:34:00.000-05:00","title":"Understanding a Trait Selection Bug in Rust Compiler","url":"https://veera.app/trait_selection_bug.html","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tcl9yc/understanding_trait_selection_bug_rust","submitter_user":"veera","user_is_author":true,"tags":["compilers","rust"]},{"short_id":"gqdpoo","short_id_url":"https://lobste.rs/s/gqdpoo","created_at":"2024-04-22T18:25:15.000-05:00","title":"Equinox","url":"https://equinox.space/","score":-2,"flags":3,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gqdpoo/equinox","submitter_user":"Teckla","user_is_author":false,"tags":["art","games"]},{"short_id":"kruxyr","short_id_url":"https://lobste.rs/s/kruxyr","created_at":"2024-04-22T17:51:56.000-05:00","title":"Good Ideas in Computer Science","url":"https://danielchasehooper.com/posts/good-ideas-in-cs/","score":11,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kruxyr/good_ideas_computer_science","submitter_user":"DanielHooper","user_is_author":true,"tags":["compsci","historical"]},{"short_id":"d8qwvo","short_id_url":"https://lobste.rs/s/d8qwvo","created_at":"2024-04-22T16:52:29.000-05:00","title":"Introducing for-each loops for Hare","url":"https://harelang.org/blog/2024-04-01-introducing-for-each-loops-in-hare/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/d8qwvo/introducing_for_each_loops_for_hare","submitter_user":"vfoley","user_is_author":false,"tags":["programming"]},{"short_id":"vxf3ud","short_id_url":"https://lobste.rs/s/vxf3ud","created_at":"2024-04-22T16:28:09.000-05:00","title":"Announcing Beatrice: A finally tagless, dependently typed, self-aware programming language","url":"https://hirrolot.github.io/posts/announcing-beatrice.html","score":16,"flags":2,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vxf3ud/announcing_beatrice_finally_tagless","submitter_user":"vg_head","user_is_author":false,"tags":["plt"]},{"short_id":"grkmii","short_id_url":"https://lobste.rs/s/grkmii","created_at":"2024-04-22T16:20:57.000-05:00","title":"The Bubble Sort Curve","url":"https://youtu.be/Gm8v_MR7TGk","score":3,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/grkmii/bubble_sort_curve","submitter_user":"Corbin","user_is_author":false,"tags":["compsci","math","video"]},{"short_id":"bcncfl","short_id_url":"https://lobste.rs/s/bcncfl","created_at":"2024-04-22T15:45:12.000-05:00","title":"What is the Metropolis algorithm?","url":"https://jameshfisher.com/2024/04/18/metropolis-algorithm/","score":-1,"flags":2,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bcncfl/what_is_metropolis_algorithm","submitter_user":"j11g","user_is_author":false,"tags":["programming"]},{"short_id":"bk1odi","short_id_url":"https://lobste.rs/s/bk1odi","created_at":"2024-04-22T15:45:12.000-05:00","title":"What is the Metropolis algorithm?","url":"https://jameshfisher.com/2024/04/18/metropolis-algorithm/","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bk1odi/what_is_metropolis_algorithm","submitter_user":"j11g","user_is_author":false,"tags":["programming"]},{"short_id":"g4mu2o","short_id_url":"https://lobste.rs/s/g4mu2o","created_at":"2024-04-22T15:15:52.000-05:00","title":"Voyager 1 Resumes Sending Engineering Updates to Earth","url":"https://blogs.nasa.gov/voyager/2024/04/22/nasas-voyager-1-resumes-sending-engineering-updates-to-earth/","score":79,"flags":1,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g4mu2o/voyager_1_resumes_sending_engineering","submitter_user":"stip","user_is_author":false,"tags":["hardware","programming"]},{"short_id":"hut0to","short_id_url":"https://lobste.rs/s/hut0to","created_at":"2024-04-22T13:22:15.000-05:00","title":"The Performance Impact of C++'s `final` Keyword","url":"https://16bpp.net/blog/post/the-performance-impact-of-cpp-final-keyword/","score":13,"flags":0,"comment_count":12,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hut0to/performance_impact_c_s_final_keyword","submitter_user":"raymii","user_is_author":false,"tags":["c++"]},{"short_id":"mvzes6","short_id_url":"https://lobste.rs/s/mvzes6","created_at":"2024-04-22T12:48:01.000-05:00","title":"First Come First Served: The Impact of File Position on Code Review (2022)","url":"https://arxiv.org/abs/2208.04259","score":7,"flags":0,"comment_count":2,"description":"\u003cp\u003e\u003cem\u003eAbstract:\u003c/em\u003e The most popular code review tools (e.g., Gerrit and GitHub) present the files to review sorted in alphabetical order. Could this choice or, more generally, the relative position in which a file is presented bias the outcome of code reviews? We investigate this hypothesis by triangulating complementary evidence in a two-step study.\u003c/p\u003e\n","description_plain":"*Abstract:* The most popular code review tools (e.g., Gerrit and GitHub) present the files to review sorted in alphabetical order. Could this choice or, more generally, the relative position in which a file is presented bias the outcome of code reviews? We investigate this hypothesis by triangulating complementary evidence in a two-step study.","comments_url":"https://lobste.rs/s/mvzes6/first_come_first_served_impact_file","submitter_user":"hwayne","user_is_author":false,"tags":["pdf","practices"]},{"short_id":"zq4jhx","short_id_url":"https://lobste.rs/s/zq4jhx","created_at":"2024-04-22T11:09:22.000-05:00","title":"Practical parsing with PEG and cpp-peglib","url":"https://berthub.eu/articles/posts/practical-peg-parsing/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zq4jhx/practical_parsing_with_peg_cpp_peglib","submitter_user":"calvin","user_is_author":false,"tags":["compilers"]},{"short_id":"s16hwy","short_id_url":"https://lobste.rs/s/s16hwy","created_at":"2024-04-22T10:38:08.000-05:00","title":"Options for accessing Llama 3 from the terminal using LLM","url":"https://simonwillison.net/2024/Apr/22/llama-3/","score":11,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/s16hwy/options_for_accessing_llama_3_from","submitter_user":"simonw","user_is_author":true,"tags":["ai"]},{"short_id":"fzl9ba","short_id_url":"https://lobste.rs/s/fzl9ba","created_at":"2024-04-22T08:51:29.000-05:00","title":"Automated stitching of chip images","url":"https://www.bunniestudios.com/blog/2024/automated-stitching-of-chip-images/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fzl9ba/automated_stitching_chip_images","submitter_user":"jmillikin","user_is_author":false,"tags":["hardware"]},{"short_id":"ebt4ys","short_id_url":"https://lobste.rs/s/ebt4ys","created_at":"2024-04-22T08:27:06.000-05:00","title":"Secure Boot \u0026 TPM-backed Full Disk Encryption on NixOS","url":"https://jnsgr.uk/2024/04/nixos-secure-boot-tpm-fde/","score":10,"flags":1,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ebt4ys/secure_boot_tpm_backed_full_disk","submitter_user":"jnsgruk","user_is_author":true,"tags":["linux","nix","security"]},{"short_id":"i1f3xl","short_id_url":"https://lobste.rs/s/i1f3xl","created_at":"2024-04-22T07:05:40.000-05:00","title":"Making a flute controlled mouse","url":"https://0110.be/posts/Making_a_flute_controlled_mouse","score":20,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i1f3xl/making_flute_controlled_mouse","submitter_user":"fs111","user_is_author":false,"tags":["a11y","hardware"]},{"short_id":"9hgrkl","short_id_url":"https://lobste.rs/s/9hgrkl","created_at":"2024-04-22T06:56:38.000-05:00","title":"LogTape: Simple logging library with zero dependencies for Deno/Node.js/Bun/browsers","url":"https://github.com/dahlia/logtape","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9hgrkl/logtape_simple_logging_library_with_zero","submitter_user":"hongminhee","user_is_author":true,"tags":["javascript","show","web"]},{"short_id":"bjumde","short_id_url":"https://lobste.rs/s/bjumde","created_at":"2024-04-22T06:45:47.000-05:00","title":"The only two log levels you need are INFO and ERROR","url":"https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/","score":24,"flags":0,"comment_count":20,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bjumde/only_two_log_levels_you_need_are_info_error","submitter_user":"antonz","user_is_author":false,"tags":["programming"]}]