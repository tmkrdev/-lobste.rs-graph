[{"short_id":"lnktsy","short_id_url":"https://lobste.rs/s/lnktsy","created_at":"2024-07-22T08:57:13.000-05:00","title":"Why do config changes keep coming up in major incidents? (2021)","url":"https://surfingcomplexity.blog/2021/05/29/why-do-config-changes-keep-coming-up-in-major-incidents/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lnktsy/why_do_config_changes_keep_coming_up_major","submitter_user":"azhenley","user_is_author":false,"tags":["programming"]},{"short_id":"bzrkiv","short_id_url":"https://lobste.rs/s/bzrkiv","created_at":"2024-07-22T08:24:39.000-05:00","title":"What are you doing this week?","url":"","score":4,"flags":0,"comment_count":2,"description":"\u003cp\u003eWhat are you doing this week? Feel free to share!\u003c/p\u003e\n\u003cp\u003eKeep in mind it’s OK to do nothing at all, too.\u003c/p\u003e\n","description_plain":"What are you doing this week? Feel free to share!\r\n\r\nKeep in mind it’s OK to do nothing at all, too.","comments_url":"https://lobste.rs/s/bzrkiv/what_are_you_doing_this_week","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"uqqtiy","short_id_url":"https://lobste.rs/s/uqqtiy","created_at":"2024-07-22T08:22:44.000-05:00","title":"Nix Camp 2024 is On","url":"https://nix.camp/","score":3,"flags":0,"comment_count":3,"description":"\u003cp\u003eBring your friends :)\u003c/p\u003e\n","description_plain":"Bring your friends :)","comments_url":"https://lobste.rs/s/uqqtiy/nix_camp_2024_is_on","submitter_user":"matthewcroughan","user_is_author":true,"tags":["linux","nix"]},{"short_id":"pplfdt","short_id_url":"https://lobste.rs/s/pplfdt","created_at":"2024-07-22T06:38:42.000-05:00","title":"Social Computing, before the Internet","url":"https://netsettlement.blogspot.com/2024/07/social-computing-before-internet.html","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pplfdt/social_computing_before_internet","submitter_user":"LeahNeukirchen","user_is_author":false,"tags":["culture","historical"]},{"short_id":"i6mhqj","short_id_url":"https://lobste.rs/s/i6mhqj","created_at":"2024-07-22T04:55:00.000-05:00","title":"Parsing Protobuf Definitions with Tree-sitter","url":"https://relistan.com/parsing-protobuf-files-with-treesitter","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i6mhqj/parsing_protobuf_definitions_with_tree","submitter_user":"relistan","user_is_author":true,"tags":["go","programming"]},{"short_id":"gc91lz","short_id_url":"https://lobste.rs/s/gc91lz","created_at":"2024-07-22T04:13:01.000-05:00","title":"Crowdstroke","url":"https://blog.koehntopp.info/2024/07/22/crowdstroke.html","score":27,"flags":0,"comment_count":10,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gc91lz/crowdstroke","submitter_user":"freddyb","user_is_author":false,"tags":["practices","security"]},{"short_id":"mfbveg","short_id_url":"https://lobste.rs/s/mfbveg","created_at":"2024-07-22T04:05:27.000-05:00","title":"The algebra (and calculus!) of algebraic data types","url":"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types","score":5,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mfbveg/algebra_calculus_algebraic_data_types","submitter_user":"jackdk","user_is_author":false,"tags":["plt"]},{"short_id":"prwwwm","short_id_url":"https://lobste.rs/s/prwwwm","created_at":"2024-07-22T02:05:52.000-05:00","title":"Rust Question on embedding FSM in wrapper struct(s)","url":"","score":5,"flags":0,"comment_count":3,"description":"\u003cp\u003eHi folks! Perhaps a bit of an odd post but wanted to reach out to get some feedback from the Rust fellows in the community. I’m writing a toy work pool/supervisor library, \u003ca href=\"https://github.com/JuxhinDB/poolparty?tab=readme-ov-file\" rel=\"ugc\"\u003epoolparty\u003c/a\u003e, inspired by Erlang’s \u003ca href=\"https://github.com/devinus/poolboy\" rel=\"ugc\"\u003e\u003ccode\u003epoolboy\u003c/code\u003e\u003c/a\u003e. Everything is effectively a back-of-the-napkin sketch but have some areas I’d like some guidance with.\u003c/p\u003e\n\u003cp\u003eWe have a concept of a \u003ca href=\"https://github.com/JuxhinDB/poolparty/blob/main/src/worker.rs\" rel=\"ugc\"\u003e\u003ccode\u003eWorker\u003c/code\u003e\u003c/a\u003e trait that library-users can implement to encapsulate some workload (e.g., perform inference against some dataset).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003epub trait Workable: Debug + Send + Sync + Sized {\n    type Task: Task + Debug;\n    type Output: Debug + Send;\n    type Error: Debug + Send;\n\n    fn process(task: Self::Task) -\u0026gt; impl Future\u0026lt;Output = Response\u0026lt;Self\u0026gt;\u0026gt;;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs a library, I’d like to hide away all the state-machinery and the running of the worker. Specifically how it receives messages from the supervisor, changes state, propagates results and handles errors (outside of the task context).\u003c/p\u003e\n\u003cp\u003eAfter reading a few posts on state-machines in Rust, some more complex than others, there are a few requirements I had:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eState transitions do not need to be checked at compile-time\u003c/li\u003e\n\u003cli\u003eTransitions may need to accept event inputs (e.g., a Task to run)\u003c/li\u003e\n\u003cli\u003eTransitions should not block the task, as we still need to be able to receive events from the supervisor during a long transition (e.g., while running a task, we receive a \u003ccode\u003ecancel\u003c/code\u003e event) and must gracefully cancel and transition to \u003ccode\u003eidle\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe idea I have so far is a simple \u003ccode\u003eState\u003c/code\u003e enum that is packed into the \u003ccode\u003eWorker\u003c/code\u003e struct, which is a wrapper struct around the \u003ccode\u003eWorkable\u003c/code\u003e trait.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003e#[derive(Debug)]\nenum State\u0026lt;W: Workable\u0026gt; {\n    Idle,\n    Running { task: W::Task },\n    Error(W::Error),\n    Stop,\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eWorker\u003c/code\u003e struct containing the state.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003epub struct Worker\u0026lt;'a, W: Workable\u0026gt; {\n    id: usize,\n    rx: Receiver\u0026lt;Request\u0026lt;W\u0026gt;\u0026gt;,\n    state: State\u0026lt;W\u0026gt;,\n    worker: PhantomData\u0026lt;\u0026amp;'a W\u0026gt;, // Ignore\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd implementing the state transitions by implementing the \u003ccode\u003eState\u003c/code\u003e enum on the generic \u003ccode\u003eWorker\u0026lt;W\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003eimpl\u0026lt;W: Workable\u0026gt; State\u0026lt;W\u0026gt; {\n    // NOTE(jdb): The following is the initial state machine for workers.\n    //\n    //                           complete/success\n    //                           cancel\n    //              ┌───────────────────────────────┐\n    //              │                               │\n    //         ┌────▼─────┐                   ┌─────┴─────┐\n    //       ┌─┤          │      task         │           │\n    // cancel│ │   IDLE   ├───────────────────►  RUNNING  │\n    //       └─►          │                   │           │\n    //         └────┬─────┘                   └───┬─┬─────┘\n    //              │            shutdown         │ │\n    //      shutdown│ ┌───────────────────────────┘ │complete/fail\n    //              │ │                             │\n    //         ┌────▼─▼───┐                   ┌─────▼─────┐\n    //         │          │      shutdown     │           │\n    //         │   STOP   ◄───────────────────┤   ERROR   │\n    //         │          │                   │           │\n    //         └──────────┘                   └───────────┘\n    //\n    //  Note that retrying should not be handled by the worker. Instead it\n    //  is the job of the Supervisor to determine if we should shut down\n    //  the worker, and spawn a new one with the same task. This is done to\n    //  ensure that we are able to capture error state before terminating a\n    //  worker.\n    fn next(\u0026amp;self, event: Request\u0026lt;W\u0026gt;) -\u0026gt; Result\u0026lt;State\u0026lt;W\u0026gt;, String\u0026gt; {\n        match (self, event) {\n            (State::Idle, Request::Task(t)) =\u0026gt; Ok(State::Running { task: t }),\n            (State::Idle, Request::Cancel) =\u0026gt; Ok(State::Idle),\n            (State::Running { task: _ }, Request::Cancel) =\u0026gt; Ok(State::Idle),\n            (_, Request::Shutdown) =\u0026gt; Ok(State::Stop),\n            _ =\u0026gt; Err(\"invalid transition\".to_string()),\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis part seems \u003cem\u003eokay\u003c/em\u003e. My issues are that:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eI cannot take ownership of the \u003ccode\u003eWorker\u003c/code\u003e struct as part of the state transition. This leads to this weird case where we need a \u003ca href=\"https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L67-L73\" rel=\"ugc\"\u003e\u003ccode\u003e\u0026amp;mut self\u003c/code\u003e\u003c/a\u003e to update state.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehandle_event\u003c/code\u003e cannot return the \u003ca href=\"https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L75\" rel=\"ugc\"\u003etransitioned state\u003c/a\u003e. That said, this might be overcome with a macro.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAnd likely a large number of other anti-patterns. Happy to hear any feedback or guidance on how to improve this!\u003c/p\u003e\n","description_plain":"Hi folks! Perhaps a bit of an odd post but wanted to reach out to get some feedback from the Rust fellows in the community. I'm writing a toy work pool/supervisor library, [poolparty](https://github.com/JuxhinDB/poolparty?tab=readme-ov-file), inspired by Erlang's [`poolboy`](https://github.com/devinus/poolboy). Everything is effectively a back-of-the-napkin sketch but have some areas I'd like some guidance with.\r\n\r\nWe have a concept of a [`Worker`](https://github.com/JuxhinDB/poolparty/blob/main/src/worker.rs) trait that library-users can implement to encapsulate some workload (e.g., perform inference against some dataset). \r\n\r\n```rust\r\npub trait Workable: Debug + Send + Sync + Sized {\r\n    type Task: Task + Debug;\r\n    type Output: Debug + Send;\r\n    type Error: Debug + Send;\r\n\r\n    fn process(task: Self::Task) -\u003e impl Future\u003cOutput = Response\u003cSelf\u003e\u003e;\r\n}\r\n```\r\n\r\nAs a library, I'd like to hide away all the state-machinery and the running of the worker. Specifically how it receives messages from the supervisor, changes state, propagates results and handles errors (outside of the task context).\r\n\r\nAfter reading a few posts on state-machines in Rust, some more complex than others, there are a few requirements I had:\r\n\r\n* State transitions do not need to be checked at compile-time\r\n* Transitions may need to accept event inputs (e.g., a Task to run)\r\n* Transitions should not block the task, as we still need to be able to receive events from the supervisor during a long transition (e.g., while running a task, we receive a `cancel` event) and must gracefully cancel and transition to `idle`.\r\n\r\nThe idea I have so far is a simple `State` enum that is packed into the `Worker` struct, which is a wrapper struct around the `Workable` trait.\r\n\r\n```rust\r\n#[derive(Debug)]\r\nenum State\u003cW: Workable\u003e {\r\n    Idle,\r\n    Running { task: W::Task },\r\n    Error(W::Error),\r\n    Stop,\r\n}\r\n```\r\n\r\n`Worker` struct containing the state.\r\n\r\n```rust\r\npub struct Worker\u003c'a, W: Workable\u003e {\r\n    id: usize,\r\n    rx: Receiver\u003cRequest\u003cW\u003e\u003e,\r\n    state: State\u003cW\u003e,\r\n    worker: PhantomData\u003c\u0026'a W\u003e, // Ignore\r\n}\r\n```\r\n\r\nAnd implementing the state transitions by implementing the `State` enum on the generic `Worker\u003cW\u003e`.\r\n\r\n```rust\r\nimpl\u003cW: Workable\u003e State\u003cW\u003e {\r\n    // NOTE(jdb): The following is the initial state machine for workers.\r\n    //\r\n    //                           complete/success\r\n    //                           cancel\r\n    //              ┌───────────────────────────────┐\r\n    //              │                               │\r\n    //         ┌────▼─────┐                   ┌─────┴─────┐\r\n    //       ┌─┤          │      task         │           │\r\n    // cancel│ │   IDLE   ├───────────────────►  RUNNING  │\r\n    //       └─►          │                   │           │\r\n    //         └────┬─────┘                   └───┬─┬─────┘\r\n    //              │            shutdown         │ │\r\n    //      shutdown│ ┌───────────────────────────┘ │complete/fail\r\n    //              │ │                             │\r\n    //         ┌────▼─▼───┐                   ┌─────▼─────┐\r\n    //         │          │      shutdown     │           │\r\n    //         │   STOP   ◄───────────────────┤   ERROR   │\r\n    //         │          │                   │           │\r\n    //         └──────────┘                   └───────────┘\r\n    //\r\n    //  Note that retrying should not be handled by the worker. Instead it\r\n    //  is the job of the Supervisor to determine if we should shut down\r\n    //  the worker, and spawn a new one with the same task. This is done to\r\n    //  ensure that we are able to capture error state before terminating a\r\n    //  worker.\r\n    fn next(\u0026self, event: Request\u003cW\u003e) -\u003e Result\u003cState\u003cW\u003e, String\u003e {\r\n        match (self, event) {\r\n            (State::Idle, Request::Task(t)) =\u003e Ok(State::Running { task: t }),\r\n            (State::Idle, Request::Cancel) =\u003e Ok(State::Idle),\r\n            (State::Running { task: _ }, Request::Cancel) =\u003e Ok(State::Idle),\r\n            (_, Request::Shutdown) =\u003e Ok(State::Stop),\r\n            _ =\u003e Err(\"invalid transition\".to_string()),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis part seems _okay_. My issues are that:\r\n\r\n1. I cannot take ownership of the `Worker` struct as part of the state transition. This leads to this weird case where we need a [`\u0026mut self`](https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L67-L73) to update state.\r\n2. `handle_event` cannot return the [transitioned state](https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L75). That said, this might be overcome with a macro.\r\n\r\nAnd likely a large number of other anti-patterns. Happy to hear any feedback or guidance on how to improve this!","comments_url":"https://lobste.rs/s/prwwwm/rust_question_on_embedding_fsm_wrapper","submitter_user":"juxhin","user_is_author":true,"tags":["rust"]},{"short_id":"g4nt4n","short_id_url":"https://lobste.rs/s/g4nt4n","created_at":"2024-07-21T23:59:03.000-05:00","title":"jiff: A date-time library for Rust that encourages you to jump into the pit of success","url":"https://github.com/BurntSushi/jiff","score":19,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g4nt4n/jiff_date_time_library_for_rust","submitter_user":"simonw","user_is_author":false,"tags":["rust"]},{"short_id":"ibwlo0","short_id_url":"https://lobste.rs/s/ibwlo0","created_at":"2024-07-21T20:46:41.000-05:00","title":"Mapping symbols: rethinking for efficiency","url":"https://maskray.me/blog/2024-07-21-mapping-symbols-rethinking-for-efficiency","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ibwlo0/mapping_symbols_rethinking_for","submitter_user":"MaskRay","user_is_author":true,"tags":["compilers"]},{"short_id":"kr9od0","short_id_url":"https://lobste.rs/s/kr9od0","created_at":"2024-07-21T20:29:25.000-05:00","title":"Did you know about Instruments?","url":"https://registerspill.thorstenball.com/p/did-you-know-about-instruments","score":19,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kr9od0/did_you_know_about_instruments","submitter_user":"carlana","user_is_author":false,"tags":["debugging","mac","performance"]},{"short_id":"ysn6kc","short_id_url":"https://lobste.rs/s/ysn6kc","created_at":"2024-07-21T17:52:34.000-05:00","title":"Nested Dynamic Modules in NestJS","url":"https://dev.clintonblackburn.com/2024/07/21/nested-dynamic-modules-in-nestjs","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ysn6kc/nested_dynamic_modules_nestjs","submitter_user":"clintonb","user_is_author":true,"tags":["nodejs","programming"]},{"short_id":"5jjtem","short_id_url":"https://lobste.rs/s/5jjtem","created_at":"2024-07-21T17:08:07.000-05:00","title":"Maintain a golden test of your package's API with `diff-package-api` and `print-api`","url":"https://discourse.haskell.org/t/maintain-a-golden-test-of-your-packages-api-with-diff-package-api-and-print-api/9997","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5jjtem/maintain_golden_test_your_package_s_api","submitter_user":"Hecate","user_is_author":true,"tags":["haskell","testing"]},{"short_id":"bonojc","short_id_url":"https://lobste.rs/s/bonojc","created_at":"2024-07-21T16:22:08.000-05:00","title":"A brief history of Dell UNIX","url":"https://notes.technologists.com/notes/2008/01/10/a-brief-history-of-dell-unix/","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bonojc/brief_history_dell_unix","submitter_user":"fs111","user_is_author":false,"tags":["historical","unix"]},{"short_id":"e5kbev","short_id_url":"https://lobste.rs/s/e5kbev","created_at":"2024-07-21T14:35:21.000-05:00","title":"Baby's second wasm compiler","url":"https://www.scattered-thoughts.net/writing/babys-second-wasm-compiler","score":16,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/e5kbev/baby_s_second_wasm_compiler","submitter_user":"jamii","user_is_author":true,"tags":["compilers","wasm","zig"]},{"short_id":"j7fazh","short_id_url":"https://lobste.rs/s/j7fazh","created_at":"2024-07-21T14:05:39.000-05:00","title":"Extracting ELF executables from binary blobs","url":"https://blog.nietaanraken.nl/posts/elf-file-size/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/j7fazh/extracting_elf_executables_from_binary","submitter_user":"jmillikin","user_is_author":false,"tags":["reversing"]},{"short_id":"thz7su","short_id_url":"https://lobste.rs/s/thz7su","created_at":"2024-07-21T10:09:10.000-05:00","title":"Give Me the Green Light Part 2: Dirty Little Secrets","url":"https://www.redthreatsec.com/blog/give-me-the-green-light-part2-dirty-little-secrets","score":11,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/thz7su/give_me_green_light_part_2_dirty_little","submitter_user":"bedrovelsen","user_is_author":false,"tags":["security"]},{"short_id":"6jhqjo","short_id_url":"https://lobste.rs/s/6jhqjo","created_at":"2024-07-21T09:48:25.000-05:00","title":"How not to use box shadows","url":"https://dgerrells.com/blog/how-not-to-use-box-shadows","score":45,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6jhqjo/how_not_use_box_shadows","submitter_user":"dkasper","user_is_author":false,"tags":["css","graphics"]},{"short_id":"gseiin","short_id_url":"https://lobste.rs/s/gseiin","created_at":"2024-07-21T08:57:34.000-05:00","title":"UI for sums must remember products","url":"https://eighty-twenty.org/2024/07/21/ui-for-sums-remembers-products","score":48,"flags":0,"comment_count":29,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gseiin/ui_for_sums_must_remember_products","submitter_user":"tonyg","user_is_author":true,"tags":["plt"]},{"short_id":"unuya5","short_id_url":"https://lobste.rs/s/unuya5","created_at":"2024-07-21T01:00:33.000-05:00","title":"zig-aio: io_uring like asynchronous API and coroutine powered IO tasks for zig","url":"https://github.com/Cloudef/zig-aio","score":18,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/unuya5/zig_aio_io_uring_like_asynchronous_api","submitter_user":"Cloudef","user_is_author":true,"tags":["api","zig"]},{"short_id":"zc72rg","short_id_url":"https://lobste.rs/s/zc72rg","created_at":"2024-07-21T00:44:43.000-05:00","title":"Scan HTML even faster with SIMD instructions (C++ and C#)","url":"https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/","score":13,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zc72rg/scan_html_even_faster_with_simd","submitter_user":"raymii","user_is_author":false,"tags":["c++"]},{"short_id":"itcq2l","short_id_url":"https://lobste.rs/s/itcq2l","created_at":"2024-07-20T21:52:56.000-05:00","title":"Tricks In Arc Swap (2019)","url":"https://vorner.github.io/2019/04/06/tricks-in-arc-swap.html","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/itcq2l/tricks_arc_swap_2019","submitter_user":"peter","user_is_author":false,"tags":["performance","rust"]},{"short_id":"2plemo","short_id_url":"https://lobste.rs/s/2plemo","created_at":"2024-07-20T21:01:35.000-05:00","title":"operator_precedence_parsing: C89 expressions parsed with the shunting yard algorithm in Python","url":"https://github.com/bourguet/operator_precedence_parsing","score":4,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2plemo/operator_precedence_parsing_c89","submitter_user":"MaskRay","user_is_author":false,"tags":["compilers"]},{"short_id":"vubidl","short_id_url":"https://lobste.rs/s/vubidl","created_at":"2024-07-20T16:49:36.000-05:00","title":"Calling Go Functions from c++","url":"https://xnacly.me/posts/2024/go-cpp-interop/","score":12,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vubidl/calling_go_functions_from_c","submitter_user":"xnacly","user_is_author":true,"tags":["go"]},{"short_id":"ci9fib","short_id_url":"https://lobste.rs/s/ci9fib","created_at":"2024-07-20T16:33:34.000-05:00","title":"What TeX Gets Right","url":"https://newton.cx/~peter/2024/what-tex-gets-right/","score":29,"flags":0,"comment_count":10,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ci9fib/what_tex_gets_right","submitter_user":"kmaasrud","user_is_author":false,"tags":["programming"]}]