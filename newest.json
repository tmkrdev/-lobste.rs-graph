[{"short_id":"9jec8p","short_id_url":"https://lobste.rs/s/9jec8p","created_at":"2024-01-11T13:25:30.000-06:00","title":"Linux Journey","url":"https://linuxjourney.com/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9jec8p/linux_journey","submitter_user":{"username":"pushcx","created_at":"2012-08-14T20:25:08.000-05:00","is_admin":true,"about":"Hi, I'm [Peter Bhat Harkins](https://malaprop.org), a programmer and entrepreneur from Chicago. From June 2014 to winter of 2015 I typically posted a dozen stories per day to [help](https://lobste.rs/s/9pm09z/what_is_on_topic_what_is_not/comments/nie0yn#c_nie0yn) the site reach a critical mass of regular visitors. In October 2017 I became the site administrator after the site creator @jcs stepped down.\r\n\r\n * Please don’t message me for an invitation if we're complete strangers; check \u003ca href=\"https://lobste.rs/u\"\u003ethe user list\u003c/a\u003e for someone you know or ask [in chat](https://lobste.rs/chat).\r\n * Submit a [`meta`](https://lobste.rs/t/meta) post for feature requests (including new tags) to let the community discuss. Bug reports and \"is this a bug?\" should go to [the issue tracker](https://github.com/lobsters/lobsters/issues).\r\n * [Message me](https://lobste.rs/messages?to=pushcx) for administrative and moderator things. I don't see everything and I gotta sleep sometime.\r\n * E-mail my first name @malaprop.org regarding site security or if you can't log in to message me. If I've posted or commented about something here or in the chat room, I'd almost certainly love to talk more about it.\r\n","is_moderator":true,"avatar_url":"/avatars/pushcx-100.png","invited_by_user":"jcs","github_username":"pushcx","twitter_username":"pushcx","keybase_signatures":[{"kb_username":"pushcx","sig_hash":"de6fb28b501c211e88fabddeacc834c6b922d738efd6b4108ce871879d039e510f"}]},"user_is_author":false,"tags":["linux"]},{"short_id":"qqm9pa","short_id_url":"https://lobste.rs/s/qqm9pa","created_at":"2024-01-11T13:08:34.000-06:00","title":"Paper page - Soaring from 4K to 400K: Extending LLM's Context with Activation Beacon","url":"https://huggingface.co/papers/2401.03462","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qqm9pa/paper_page_soaring_from_4k_400k_extending","submitter_user":{"username":"rajtilakjee","created_at":"2024-01-11T12:57:08.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":1,"avatar_url":"/avatars/rajtilakjee-100.png","invited_by_user":"malxau"},"user_is_author":false,"tags":["ai"]},{"short_id":"slsfog","short_id_url":"https://lobste.rs/s/slsfog","created_at":"2024-01-11T12:33:26.000-06:00","title":"The one ring problem: abstraction and our quest for power (2018)","url":"https://www.tedinski.com/2018/01/30/the-one-ring-problem-abstraction-and-power.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/slsfog/one_ring_problem_abstraction_our_quest","submitter_user":{"username":"matklad","created_at":"2019-07-02T07:23:10.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":7942,"avatar_url":"/avatars/matklad-100.png","invited_by_user":"skade","github_username":"matklad"},"user_is_author":false,"tags":["plt"]},{"short_id":"5y768y","short_id_url":"https://lobste.rs/s/5y768y","created_at":"2024-01-11T12:24:31.000-06:00","title":"Nix Evaluation Performance \u0026 Thunks","url":"https://nixos.wiki/wiki/Nix_Evaluation_Performance","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5y768y/nix_evaluation_performance_thunks","submitter_user":{"username":"RGBCube","created_at":"2023-06-02T08:13:55.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":315,"avatar_url":"/avatars/RGBCube-100.png","invited_by_user":"proctrap","github_username":"RGBCube"},"user_is_author":false,"tags":["nix"]},{"short_id":"jqrykn","short_id_url":"https://lobste.rs/s/jqrykn","created_at":"2024-01-11T12:19:01.000-06:00","title":"Wayland really breaks things… Just for now?","url":"https://blog.tenstral.net/2024/01/wayland-really-breaks-things-just-for-now.html","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jqrykn/wayland_really_breaks_things_just_for_now","submitter_user":{"username":"gioele","created_at":"2018-04-25T11:31:25.000-05:00","is_admin":false,"about":"https://gioele.io","is_moderator":false,"karma":746,"avatar_url":"/avatars/gioele-100.png","invited_by_user":"pushcx"},"user_is_author":false,"tags":["graphics"]},{"short_id":"ttr8op","short_id_url":"https://lobste.rs/s/ttr8op","created_at":"2024-01-11T12:14:22.000-06:00","title":"Lobsters interview with David Chisnall","url":"","score":38,"flags":0,"comment_count":6,"description":"\u003cp\u003eHi everyone! Long ago Lobsters used to run \u003ca href=\"https://lobste.rs/t/interview\" rel=\"ugc\"\u003einterviews on active users\u003c/a\u003e. I thought that was a great idea but noticed it hadn’t happened for some time. I thought about which lobster I’d most like to see interviewed and immediately thought of \u003ca href=\"https://lobste.rs/~david_chisnall\" rel=\"ugc\"\u003eDavid Chisnall\u003c/a\u003e. Enjoy!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIntroduce yourself, describe what you do for work and how long you’ve been at it.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eProfessionally, I am currently the Director of System Architecture at SCI Semiconductor. I’ve been at that for a couple of months. About the time I was thinking about leaving Microsoft, I was introduced to someone who was putting together a startup aiming to commercialise the CHERIoT platform (which I’d open sourced at Microsoft, but which Microsoft didn’t want to sell, just to use in other products). We got on well and so I joined his team to lead the evolution of the CHERIoT ISA and software stack. We aim to ship CHERIoT chips some time this year, at which point I may finally be able to buy IoT devices that I trust to connect to my network and the Internet, for the first time. The company is still starting up, but I expect to be hiring very soon.\u003c/p\u003e\n\u003cp\u003eThat covers the very recent bits, but my career has not gone in a straight line at all. I went to Swansea University because I did very badly in my A-level exams (the ones you take at 18 in the UK) and so didn’t get into any of the universities that I’d applied to. Swansea was most well known as the UK university closest to the sea. It was also home of the Swansea University Computer Society (yes, we know the acronym sucks) which popped up in the boot screen for Linux at the time because they’d written the original Linux TCP/IP stack. Folks like Alan Cox still hung around society events. I found the balance between a very theoretical course (Computer Science in Swansea acknowledged that there were machines that approximated universal models of computation, but wasn’t really in favour of touching them) and a very hands-on computer society gave a usefully broad education.\u003c/p\u003e\n\u003cp\u003eI ended up staying there for a PhD, where I met Nicolas Roard (funded on the same grant), who introduced me to Objective-C and OpenStep. I had a Mac, but hadn’t really planned on doing anything with Cocoa (which implements the OpenStep specification) because I wanted to write cross-platform things. Nicolas was a GNUstep contributor and persuaded me that it was worth writing Mac software and improving GNUstep so that it had the features to run it.\u003c/p\u003e\n\u003cp\u003eAround this time, Apple was rapidly adding Objective-C features and FSF GCC was not keeping up. I ended up being persuaded to write a new Objective-C runtime and add support for it to clang and discovered that I really enjoyed language implementation. The runtime I wrote was explicitly designed to support multiple languages and that led to a much deeper rabbit hole.\u003c/p\u003e\n\u003cp\u003eIn parallel with this, I’d been actively involved in Jabber / XMPP and written a couple of clients. Peter Saint-Andre, who was driving the effort, posted to the mailing list that he had a contract for a book about the protocol but no time to write it and asked if anyone else was interested and, when I replied, he put me in touch with his editor. It turned out that another publisher had just released a Jabber book and it had not sold well, so the publisher was happy to let the project die, but they gave me some work-for-hire on a Linux book that was behind schedule. This went well and led to some regular writing for InformIT. They also asked me if I knew anyone who would be qualified to write a book on the Xen internals. I jokingly said ‘I could do it if you gave me six months to study the source code’. Six months later they came back with ‘so, that Xen book you’re going to write…’ and I ended up writing it. This was very much active procrastination: I wrote the book while avoiding working on my PhD thesis and the thesis while avoiding the book. I subsequently wrote three more books for them.\u003c/p\u003e\n\u003cp\u003eI spent the next five years working freelance, writing some code and some more books (and a lot of articles) before I came to Cambridge to work on CHERI.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat is your work/computing environment like?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI run macOS locally and use a mix of native, FreeBSD, and Linux VMs (some managed by Docker and Podman). Most of the remote machines I use are FreeBSD, with some Linux. On the floor next to me there’s a Morello desktop (CheriBSD), which I mostly use remotely. The M2 Max is fast enough that I don’t need to do much remote anymore.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat tools do you use to write software?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI keep finding myself going back to vim, not because it’s great, but because nothing else meets my requirements the same way. I want an editor that I can use with local and remote projects. VS Code has a remote extension but, because it works by running a headless instance of most of VS Code remotely, there’s a long tail of places where it doesn’t work, so I end up needing a local editor and a remote one and it’s easier if they’re the same.\u003c/p\u003e\n\u003cp\u003eWithin vim, I use ALE for talking to clangd and other LSP servers (this lets me use a CHERI-aware clangd nice and easily, so all of the language extensions are supported) and I’m trying the Copilot plugin. I’m still unconvinced by Copilot but, at worst, it’s only a small net productivity drop to use it and it’s important to keep abreast of new developments in tooling.\u003c/p\u003e\n\u003cp\u003eI generally use clang for compiling, lldb for debugging. I test things with GCC if GCC supports the target and source language. Outside of Smalltalk, I’ve not found an IDE that I felt made me more productive.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHow did you get started with CHERI?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI knew Robert Watson through FreeBSD. I’d ported libc++ to FreeBSD (which mostly involved implementing the POSIX 2008 xlocale APIs in libc) under contract with the FreeBSD Foundation and he’d been involved in organising that. At the time, I was still living in Swansea, which has a very low cost of living (it still does). This let me do a few days of paid work per month and spend the rest of the time on fun projects. His pitch was that, if I came to the University of Cambridge, I could work on the fun stuff full time and be paid for it.\u003c/p\u003e\n\u003cp\u003eI’d spent a lot of the previous years on Étoilé, which was a project to build a user-focused desktop environment that was built out of composable components with end-user programming as a key focus. We were inspired by the STEPS project at VPRI, which tried to build an entire system in under 20,000 lines of code. Our rule was simpler: we aimed to keep individual components to under 10 KLoC, which is small enough that a single person can understand it. This meant that we needed to be able to both use expressive languages and build expressive DSLs. We were starting from an Objective-C base, which gave us a nice model for late-bound components but brought along a lot of C baggage.\u003c/p\u003e\n\u003cp\u003eUnlike STEPs, I didn’t want to rewrite the world in high-level languages. I wanted to use things like libavcodec and libavformat as-is, but without bugs in them being able to destroy the invariants that higher-level software depended on. I’d tried building isolation mechanisms with the MMU and found it severely limiting. I’d also looked at Mondrian Memory Protection, but the table-based approach didn’t compose well with language-level abstractions. Early CHERI wasn’t the right thing either, but it was close enough that I felt I could evolve it into the right shape.\u003c/p\u003e\n\u003cp\u003eMost of my fingerprints in CHERI ISAs are with that goal in mind. I want to be able to compile existing C/C++ libraries for a CHERI compiler and use them safely from higher-level languages and use them directly. I’ve written a bit about this before:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/pulse/i-dont-care-memory-safety-david-chisnall\" rel=\"ugc\"\u003ehttps://www.linkedin.com/pulse/i-dont-care-memory-safety-david-chisnall\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI want to be able to have documents embed scripting-language programs that can directly call large native libraries and still have strong guarantees that my system won’t be compromised. The key point is this observation:\u003c/p\u003e\n\u003cp\u003eIsolation is easy, (safe) sharing is hard.\u003c/p\u003e\n\u003cp\u003eIt’s trivial to fully isolate two components. Separate cores, sandboxed processes, or WebAssembly sandboxes can give this kind of isolation, depending on the degree of isolation that you need. Most interesting things are built from communicating components and keeping things mostly isolated, but able to communicate safely, is much harder. For example, Rust says FFI is unsafe, but if you wanted it to be safe except that objects passed from Rust to C may contain arbitrary bit patterns after the call, that’s harder. You can do it with deep copies, but that’s a lot of overhead and very hard to do in the general case. You can do it with CHERI fairly easily, including richer things like deep immutability (in CHERIoT, we can also provide shallow and deep no-capture guarantees).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat was the hardest technical problem you’ve ever had to address?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThat’s difficult to answer. Any problem seems easy when you know how to solve it and it’s easy to forget how much effort it took. Teaching a C/C++ toolchain that pointers and integers were, in fact, not interchangeable types might be in that space.\u003c/p\u003e\n\u003cp\u003eThe one with the most evil solution is probably related to C++ exception interoperability with Objective-C. There are three C++ runtimes in wide use: libsupc++ (GNU), libc++abi (LLVM), and libcxxrt (which I wrote and is shipped by FreeBSD, Sony Playstations, OpenEnclave, and a bunch of other places). The story there is slightly annoying: I wrote libcxxrt for a company that agreed to open source it if other organisations would split the development cost. They approached the FreeBSD and NetBSD Foundations, who agreed to pay for some of it, along with Apple (who, at the time, were shipping libc++ but without a permissively licensed runtime). A few days before the public release, we sent Apple a polite heads up that we were going to be doing the release. They responded by creating the libc++abi project in LLVM, with a demangler that was much too large and generic for the runtime and none of the code that’s actually necessary.\u003c/p\u003e\n\u003cp\u003eHistory aside, all of these have very subtly different layouts of the structure that encapsulates an exception. This is not part of their public APIs (or ABIs) and has, in the past, changed between versions. We did have a load of compile-time detection for this in the GNUstep Objective-C runtime, but it proved somewhat fragile. Eventually, I rewrote it with some run-time detection that works by throwing a C++ exception though a stack frame with a custom personality function. The C++ exception is a custom type and contains a specific bit pattern as its value. We just poke at the memory for the object until we find the pointer to the typeid object for our type and until we find the bit pattern of the thrown object. This lets us find the two fields that we care about.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDo you have a long-term software pipe dream?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI still think of myself as working on Étoilé. I simply found that I can’t build it with existing software and programming languages and so took a little diversion to build the lower layers that I need. I need CHERI to be able to do fine-grained sharing with legacy libraries (i.e. the billions of lines of code that have been written already that I don’t want to rewrite). With Verona, we have a language that has sandboxing as a first-class abstraction so that we can reason about things like two independent instances of libavcodec for different movies in the same document, at the source level. We also have a deadlock-free and data-race-free concurrency model that we can use as a coordination language, which lets us build DSLs and end-user-programming systems that give strong local reasoning guarantees for individual components.\u003c/p\u003e\n\u003cp\u003eWhen those two things are mature, the things that we wanted to build in Étoilé are feasible and I can get back to building them.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDo you have any suggestions on how on may turn their open source interests into a fulfilling career?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAny form of success requires some luck. Remember that any time someone is telling you that an approach will lead to success, they’re working from a sample size of one and have no idea how many people tried the same thing and failed.\u003c/p\u003e\n\u003cp\u003eWhen I was a PhD student, someone pointed me at a study that showed that the main difference between people that self identified as lucky and those that didn’t was that the former were better at recognising and taking opportunities that were presented. Some people don’t have the opportunities at all, but a lot more do and miss them. A couple of examples:\u003c/p\u003e\n\u003cp\u003eWhen I saw Peter’s email about writing a book, I followed up and that led to an entire writing career for several years. I don’t write professionally anymore, but that experience has been useful in many of the things that I’ve done subsequently. I’d been pondering writing as a career option but really had no idea how to do it. I could easily have not had this opportunity (I was lucky to be working on XMPP at the time) and I could easily have not taken advantage of it.\u003c/p\u003e\n\u003cp\u003eWhen I started working with each of GNUstep, FreeBSD, and LLVM, I joined the mailing lists and IRC channels and helped people who had problems. There’s always a spectrum of people that want help. Some are individuals doing things for a hobby, some are working for companies and really need the help. Some of those companies have a decent contracting budget because they know that it’s much faster to pay someone who knows how to solve a problem now than it is to build that in-house expertise. Several conversations I had led to people offering to pay me to do the thing that they were trying to do, rather than finish explaining it to them (a few also led to requests to do training for their company).\u003c/p\u003e\n\u003cp\u003eA big part of the reason that this worked for me was that most of the things I worked on were used by companies that understood software development. It’s much easier to sell software development services to a company that employs software developers than it is to a company that doesn’t really know what that means. If you’re working on applications that target end users, I don’t think the same approach would work.\u003c/p\u003e\n\u003cp\u003eA lot of contracting work comes as a result of having a solid reputation. If people know that you know a codebase well, can be trusted to get work done, and aren’t a total pain to work with, they’re likely to consider hiring you. Open source lets you build this kind of reputation in public.\u003c/p\u003e\n\u003cp\u003ePermissive licenses also help a lot. We knew of a couple of companies shipping products using GNUstep, but violating the LGPL. The FSF didn’t want to take them to court and, because they were in violation of the license, they didn’t want to hire anyone who worked upstream and might report them. Unless you’re willing to pay lawyers to enforce license conditions, you won’t stop people infringing the license but you will put people off if they’re not 100% sure that they can comply. In contrast, I’ve worked with several companies that decided to do in-house forks of permissively licensed things and then changed their minds later and wanted to either upstream things or have things added upstream that let them ditch their fork. The permissive license lets them build a dependency on your project and then they grow a need for people with your expertise, with no effort on your part. Now you have a market for the exact skills that you have.\u003c/p\u003e\n\u003cp\u003eA lot of people slap restrictive copyleft licenses on things because they don’t want companies to benefit from their work, but that also means that those same companies have no incentive to contribute (code or money) to the project. If your project is valuable and people don’t like the license, they will either reimplement it or they will violate the license and hope that they don’t get caught. Neither of these benefits you. I think the GPL has led to fairly noticeable increase in the amount of proprietary software in the world as companies that would happily adopt a BSDL component decide to create an in-house proprietary version rather than adopt a GPL’d component. This benefits nobody but it especially won’t benefit you if you want someone to pay you to work on the GPL’d component.\u003c/p\u003e\n","description_plain":"Hi everyone! Long ago Lobsters used to run [interviews on active users](https://lobste.rs/t/interview). I thought that was a great idea but noticed it hadn't happened for some time. I thought about which lobster I'd most like to see interviewed and immediately thought of [David Chisnall](https://lobste.rs/~david_chisnall). Enjoy!\r\n\r\n**Introduce yourself, describe what you do for work and how long you’ve been at it.**\r\n\r\nProfessionally, I am currently the Director of System Architecture at SCI Semiconductor. I’ve been at that for a couple of months. About the time I was thinking about leaving Microsoft, I was introduced to someone who was putting together a startup aiming to commercialise the CHERIoT platform (which I’d open sourced at Microsoft, but which Microsoft didn’t want to sell, just to use in other products). We got on well and so I joined his team to lead the evolution of the CHERIoT ISA and software stack. We aim to ship CHERIoT chips some time this year, at which point I may finally be able to buy IoT devices that I trust to connect to my network and the Internet, for the first time. The company is still starting up, but I expect to be hiring very soon.\r\n\r\nThat covers the very recent bits, but my career has not gone in a straight line at all. I went to Swansea University because I did very badly in my A-level exams (the ones you take at 18 in the UK) and so didn’t get into any of the universities that I’d applied to. Swansea was most well known as the UK university closest to the sea. It was also home of the Swansea University Computer Society (yes, we know the acronym sucks) which popped up in the boot screen for Linux at the time because they’d written the original Linux TCP/IP stack. Folks like Alan Cox still hung around society events. I found the balance between a very theoretical course (Computer Science in Swansea acknowledged that there were machines that approximated universal models of computation, but wasn’t really in favour of touching them) and a very hands-on computer society gave a usefully broad education.\r\n\r\nI ended up staying there for a PhD, where I met Nicolas Roard (funded on the same grant), who introduced me to Objective-C and OpenStep. I had a Mac, but hadn’t really planned on doing anything with Cocoa (which implements the OpenStep specification) because I wanted to write cross-platform things. Nicolas was a GNUstep contributor and persuaded me that it was worth writing Mac software and improving GNUstep so that it had the features to run it.\r\n\r\nAround this time, Apple was rapidly adding Objective-C features and FSF GCC was not keeping up. I ended up being persuaded to write a new Objective-C runtime and add support for it to clang and discovered that I really enjoyed language implementation. The runtime I wrote was explicitly designed to support multiple languages and that led to a much deeper rabbit hole.\r\n\r\nIn parallel with this, I’d been actively involved in Jabber / XMPP and written a couple of clients. Peter Saint-Andre, who was driving the effort, posted to the mailing list that he had a contract for a book about the protocol but no time to write it and asked if anyone else was interested and, when I replied, he put me in touch with his editor. It turned out that another publisher had just released a Jabber book and it had not sold well, so the publisher was happy to let the project die, but they gave me some work-for-hire on a Linux book that was behind schedule. This went well and led to some regular writing for InformIT. They also asked me if I knew anyone who would be qualified to write a book on the Xen internals. I jokingly said ‘I could do it if you gave me six months to study the source code’. Six months later they came back with ‘so, that Xen book you’re going to write…’ and I ended up writing it. This was very much active procrastination: I wrote the book while avoiding working on my PhD thesis and the thesis while avoiding the book. I subsequently wrote three more books for them.\r\n\r\nI spent the next five years working freelance, writing some code and some more books (and a lot of articles) before I came to Cambridge to work on CHERI.\r\n\r\n**What is your work/computing environment like?**\r\n\r\nI run macOS locally and use a mix of native, FreeBSD, and Linux VMs (some managed by Docker and Podman). Most of the remote machines I use are FreeBSD, with some Linux. On the floor next to me there’s a Morello desktop (CheriBSD), which I mostly use remotely. The M2 Max is fast enough that I don’t need to do much remote anymore.\r\n\r\n**What tools do you use to write software?**\r\n\r\nI keep finding myself going back to vim, not because it’s great, but because nothing else meets my requirements the same way. I want an editor that I can use with local and remote projects. VS Code has a remote extension but, because it works by running a headless instance of most of VS Code remotely, there’s a long tail of places where it doesn’t work, so I end up needing a local editor and a remote one and it’s easier if they’re the same.\r\n\r\nWithin vim, I use ALE for talking to clangd and other LSP servers (this lets me use a CHERI-aware clangd nice and easily, so all of the language extensions are supported) and I’m trying the Copilot plugin. I’m still unconvinced by Copilot but, at worst, it’s only a small net productivity drop to use it and it’s important to keep abreast of new developments in tooling.\r\n\r\nI generally use clang for compiling, lldb for debugging. I test things with GCC if GCC supports the target and source language. Outside of Smalltalk, I’ve not found an IDE that I felt made me more productive.\r\n\r\n**How did you get started with CHERI?**\r\n\r\nI knew Robert Watson through FreeBSD. I’d ported libc++ to FreeBSD (which mostly involved implementing the POSIX 2008 xlocale APIs in libc) under contract with the FreeBSD Foundation and he’d been involved in organising that. At the time, I was still living in Swansea, which has a very low cost of living (it still does). This let me do a few days of paid work per month and spend the rest of the time on fun projects. His pitch was that, if I came to the University of Cambridge, I could work on the fun stuff full time and be paid for it.\r\n\r\nI’d spent a lot of the previous years on Étoilé, which was a project to build a user-focused desktop environment that was built out of composable components with end-user programming as a key focus. We were inspired by the STEPS project at VPRI, which tried to build an entire system in under 20,000 lines of code. Our rule was simpler: we aimed to keep individual components to under 10 KLoC, which is small enough that a single person can understand it. This meant that we needed to be able to both use expressive languages and build expressive DSLs. We were starting from an Objective-C base, which gave us a nice model for late-bound components but brought along a lot of C baggage.\r\n\r\nUnlike STEPs, I didn’t want to rewrite the world in high-level languages. I wanted to use things like libavcodec and libavformat as-is, but without bugs in them being able to destroy the invariants that higher-level software depended on. I’d tried building isolation mechanisms with the MMU and found it severely limiting. I’d also looked at Mondrian Memory Protection, but the table-based approach didn’t compose well with language-level abstractions. Early CHERI wasn’t the right thing either, but it was close enough that I felt I could evolve it into the right shape.\r\n\r\nMost of my fingerprints in CHERI ISAs are with that goal in mind. I want to be able to compile existing C/C++ libraries for a CHERI compiler and use them safely from higher-level languages and use them directly. I’ve written a bit about this before:\r\n\r\nhttps://www.linkedin.com/pulse/i-dont-care-memory-safety-david-chisnall\r\n\r\nI want to be able to have documents embed scripting-language programs that can directly call large native libraries and still have strong guarantees that my system won’t be compromised. The key point is this observation:\r\n\r\nIsolation is easy, (safe) sharing is hard.\r\n\r\nIt’s trivial to fully isolate two components. Separate cores, sandboxed processes, or WebAssembly sandboxes can give this kind of isolation, depending on the degree of isolation that you need. Most interesting things are built from communicating components and keeping things mostly isolated, but able to communicate safely, is much harder. For example, Rust says FFI is unsafe, but if you wanted it to be safe except that objects passed from Rust to C may contain arbitrary bit patterns after the call, that’s harder. You can do it with deep copies, but that’s a lot of overhead and very hard to do in the general case. You can do it with CHERI fairly easily, including richer things like deep immutability (in CHERIoT, we can also provide shallow and deep no-capture guarantees).\r\n\r\n**What was the hardest technical problem you’ve ever had to address?**\r\n\r\nThat’s difficult to answer. Any problem seems easy when you know how to solve it and it’s easy to forget how much effort it took. Teaching a C/C++ toolchain that pointers and integers were, in fact, not interchangeable types might be in that space.\r\n\r\nThe one with the most evil solution is probably related to C++ exception interoperability with Objective-C. There are three C++ runtimes in wide use: libsupc++ (GNU), libc++abi (LLVM), and libcxxrt (which I wrote and is shipped by FreeBSD, Sony Playstations, OpenEnclave, and a bunch of other places). The story there is slightly annoying: I wrote libcxxrt for a company that agreed to open source it if other organisations would split the development cost. They approached the FreeBSD and NetBSD Foundations, who agreed to pay for some of it, along with Apple (who, at the time, were shipping libc++ but without a permissively licensed runtime). A few days before the public release, we sent Apple a polite heads up that we were going to be doing the release. They responded by creating the libc++abi project in LLVM, with a demangler that was much too large and generic for the runtime and none of the code that’s actually necessary.\r\n\r\nHistory aside, all of these have very subtly different layouts of the structure that encapsulates an exception. This is not part of their public APIs (or ABIs) and has, in the past, changed between versions. We did have a load of compile-time detection for this in the GNUstep Objective-C runtime, but it proved somewhat fragile. Eventually, I rewrote it with some run-time detection that works by throwing a C++ exception though a stack frame with a custom personality function. The C++ exception is a custom type and contains a specific bit pattern as its value. We just poke at the memory for the object until we find the pointer to the typeid object for our type and until we find the bit pattern of the thrown object. This lets us find the two fields that we care about.\r\n\r\n**Do you have a long-term software pipe dream?**\r\n\r\nI still think of myself as working on Étoilé. I simply found that I can’t build it with existing software and programming languages and so took a little diversion to build the lower layers that I need. I need CHERI to be able to do fine-grained sharing with legacy libraries (i.e. the billions of lines of code that have been written already that I don’t want to rewrite). With Verona, we have a language that has sandboxing as a first-class abstraction so that we can reason about things like two independent instances of libavcodec for different movies in the same document, at the source level. We also have a deadlock-free and data-race-free concurrency model that we can use as a coordination language, which lets us build DSLs and end-user-programming systems that give strong local reasoning guarantees for individual components.\r\n\r\nWhen those two things are mature, the things that we wanted to build in Étoilé are feasible and I can get back to building them.\r\n\r\n**Do you have any suggestions on how on may turn their open source interests into a fulfilling career?**\r\n\r\nAny form of success requires some luck. Remember that any time someone is telling you that an approach will lead to success, they’re working from a sample size of one and have no idea how many people tried the same thing and failed.\r\n\r\nWhen I was a PhD student, someone pointed me at a study that showed that the main difference between people that self identified as lucky and those that didn’t was that the former were better at recognising and taking opportunities that were presented. Some people don’t have the opportunities at all, but a lot more do and miss them. A couple of examples:\r\n\r\nWhen I saw Peter’s email about writing a book, I followed up and that led to an entire writing career for several years. I don’t write professionally anymore, but that experience has been useful in many of the things that I’ve done subsequently. I’d been pondering writing as a career option but really had no idea how to do it. I could easily have not had this opportunity (I was lucky to be working on XMPP at the time) and I could easily have not taken advantage of it.\r\n\r\nWhen I started working with each of GNUstep, FreeBSD, and LLVM, I joined the mailing lists and IRC channels and helped people who had problems. There’s always a spectrum of people that want help. Some are individuals doing things for a hobby, some are working for companies and really need the help. Some of those companies have a decent contracting budget because they know that it’s much faster to pay someone who knows how to solve a problem now than it is to build that in-house expertise. Several conversations I had led to people offering to pay me to do the thing that they were trying to do, rather than finish explaining it to them (a few also led to requests to do training for their company).\r\n\r\nA big part of the reason that this worked for me was that most of the things I worked on were used by companies that understood software development. It’s much easier to sell software development services to a company that employs software developers than it is to a company that doesn’t really know what that means. If you’re working on applications that target end users, I don’t think the same approach would work.\r\n\r\nA lot of contracting work comes as a result of having a solid reputation. If people know that you know a codebase well, can be trusted to get work done, and aren’t a total pain to work with, they’re likely to consider hiring you. Open source lets you build this kind of reputation in public.\r\n\r\nPermissive licenses also help a lot. We knew of a couple of companies shipping products using GNUstep, but violating the LGPL. The FSF didn’t want to take them to court and, because they were in violation of the license, they didn’t want to hire anyone who worked upstream and might report them. Unless you’re willing to pay lawyers to enforce license conditions, you won’t stop people infringing the license but you will put people off if they’re not 100% sure that they can comply. In contrast, I’ve worked with several companies that decided to do in-house forks of permissively licensed things and then changed their minds later and wanted to either upstream things or have things added upstream that let them ditch their fork. The permissive license lets them build a dependency on your project and then they grow a need for people with your expertise, with no effort on your part. Now you have a market for the exact skills that you have.\r\n\r\nA lot of people slap restrictive copyleft licenses on things because they don’t want companies to benefit from their work, but that also means that those same companies have no incentive to contribute (code or money) to the project. If your project is valuable and people don’t like the license, they will either reimplement it or they will violate the license and hope that they don’t get caught. Neither of these benefits you. I think the GPL has led to fairly noticeable increase in the amount of proprietary software in the world as companies that would happily adopt a BSDL component decide to create an in-house proprietary version rather than adopt a GPL’d component. This benefits nobody but it especially won’t benefit you if you want someone to pay you to work on the GPL’d component.","comments_url":"https://lobste.rs/s/ttr8op/lobsters_interview_with_david_chisnall","submitter_user":{"username":"PhantomZorba","created_at":"2022-04-18T15:29:33.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":372,"avatar_url":"/avatars/PhantomZorba-100.png","invited_by_user":"sirwart"},"user_is_author":true,"tags":["culture","person"]},{"short_id":"epzot8","short_id_url":"https://lobste.rs/s/epzot8","created_at":"2024-01-11T11:59:36.000-06:00","title":"Scaling Golang to 192 Cores with Heavy I/O","url":"https://jazco.dev/2024/01/10/golang-and-epoll/","score":4,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/epzot8/scaling_golang_192_cores_with_heavy_i_o","submitter_user":{"username":"jaz","created_at":"2023-09-02T12:10:20.000-05:00","is_admin":false,"about":"FOSS protocol engineer","is_moderator":false,"karma":4,"avatar_url":"/avatars/jaz-100.png","invited_by_user":"unlobito"},"user_is_author":true,"tags":["databases","go"]},{"short_id":"uzm14h","short_id_url":"https://lobste.rs/s/uzm14h","created_at":"2024-01-11T11:24:02.000-06:00","title":"Is htmx Just Another JavaScript Framework?","url":"https://htmx.org/essays/is-htmx-another-javascript-framework/","score":18,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uzm14h/is_htmx_just_another_javascript","submitter_user":{"username":"apetros","created_at":"2024-01-08T11:11:16.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":17,"avatar_url":"/avatars/apetros-100.png","invited_by_user":"dz4k"},"user_is_author":true,"tags":["javascript","web"]},{"short_id":"d4o4ia","short_id_url":"https://lobste.rs/s/d4o4ia","created_at":"2024-01-11T11:18:52.000-06:00","title":"First steps with pkgbase","url":"https://phala.isatty.net/~amber/hacks/pkgbase","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/d4o4ia/first_steps_with_pkgbase","submitter_user":{"username":"LeahNeukirchen","created_at":"2012-11-15T17:05:29.000-06:00","is_admin":false,"about":"https://leahneukirchen.org\r\nhttps://blahaj.social/@leah","is_moderator":false,"karma":1598,"avatar_url":"/avatars/LeahNeukirchen-100.png","invited_by_user":"MSch"},"user_is_author":false,"tags":["freebsd"]},{"short_id":"rfnw3o","short_id_url":"https://lobste.rs/s/rfnw3o","created_at":"2024-01-11T10:59:35.000-06:00","title":"Printy C with ABC","url":"http://tom7.org/abc/paper.pdf","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rfnw3o/printy_c_with_abc","submitter_user":{"username":"napkindrawing","created_at":"2014-05-14T10:03:04.000-05:00","is_admin":false,"about":"Dad. Tinkerer. Software developer. he/they.","is_moderator":false,"karma":4607,"avatar_url":"/avatars/napkindrawing-100.png","invited_by_user":"howdoipython"},"user_is_author":false,"tags":["c","pdf","satire"]},{"short_id":"gc3caf","short_id_url":"https://lobste.rs/s/gc3caf","created_at":"2024-01-11T10:55:20.000-06:00","title":"How Google perfected the web","url":"https://www.theverge.com/c/23998379/google-search-seo-algorithm-webpage-optimization","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gc3caf/how_google_perfected_web","submitter_user":{"username":"coby","created_at":"2021-07-13T18:52:55.000-05:00","is_admin":false,"about":"Web dev, musician, aspiring vanlifer","is_moderator":false,"karma":460,"avatar_url":"/avatars/coby-100.png","invited_by_user":"nono"},"user_is_author":false,"tags":["web"]},{"short_id":"4ypwik","short_id_url":"https://lobste.rs/s/4ypwik","created_at":"2024-01-11T08:25:38.000-06:00","title":"Distributed Systems Horror Stories: Kubernetes Deep Health Checks","url":"https://encore.dev/blog/horror-stories-k8s","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4ypwik/distributed_systems_horror_stories","submitter_user":{"username":"machete","created_at":"2021-04-12T10:29:12.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":12,"avatar_url":"/avatars/machete-100.png","invited_by_user":"eandre"},"user_is_author":false,"tags":["distributed"]},{"short_id":"mtksdi","short_id_url":"https://lobste.rs/s/mtksdi","created_at":"2024-01-11T07:45:21.000-06:00","title":"bash_irc_quotes · Unoffficial of cleaned IRC quotes from bash.org","url":"https://gitlab.com/dwrodri/bash_irc_quotes","score":3,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mtksdi/bash_irc_quotes_unoffficial_cleaned_irc","submitter_user":{"username":"quad","created_at":"2013-11-18T14:08:27.000-06:00","is_admin":false,"about":"\"Any sufficiently complicated concurrent program in another language contains an ad hoc informally-specified bug-ridden slow implementation of half of Erlang.\" — Robert Virding","is_moderator":false,"karma":2994,"avatar_url":"/avatars/quad-100.png","invited_by_user":"dl","github_username":"quad"},"user_is_author":false,"tags":["culture"]},{"short_id":"72mba0","short_id_url":"https://lobste.rs/s/72mba0","created_at":"2024-01-11T07:07:47.000-06:00","title":"SSH-Snake: Automatic traversal of networks using SSH private keys","url":"https://joshua.hu/ssh-snake-ssh-network-traversal-discover-ssh-private-keys-network-graph","score":4,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/72mba0/ssh_snake_automatic_traversal_networks","submitter_user":{"username":"355E3B","created_at":"2015-12-16T09:48:38.000-06:00","is_admin":false,"about":"Software developer, protocol hipster\r\n\r\nOn libera.chat as \"c355e3b\"","is_moderator":true,"karma":4997,"avatar_url":"/avatars/355E3B-100.png","invited_by_user":"pushcx","github_username":"hmadison","twitter_username":"355E3B"},"user_is_author":false,"tags":["networking","release","security"]},{"short_id":"bsqsjk","short_id_url":"https://lobste.rs/s/bsqsjk","created_at":"2024-01-11T06:45:10.000-06:00","title":"Is Odin \"Programming done right\"? (Interview with creator, Bill Hall)","url":"https://youtu.be/aKYdj0f1iQI","score":8,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bsqsjk/is_odin_programming_done_right_interview","submitter_user":{"username":"krisajenkins","created_at":"2016-06-10T08:58:55.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":121,"avatar_url":"/avatars/krisajenkins-100.png","invited_by_user":"dominicm"},"user_is_author":true,"tags":["compilers","programming","video"]},{"short_id":"f486jm","short_id_url":"https://lobste.rs/s/f486jm","created_at":"2024-01-11T06:23:59.000-06:00","title":"Exploring the Gleam FFI","url":"https://www.jonashietala.se/blog/2024/01/11/exploring_the_gleam_ffi/","score":6,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/f486jm/exploring_gleam_ffi","submitter_user":{"username":"lpil","created_at":"2019-04-02T03:50:42.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1779,"avatar_url":"/avatars/lpil-100.png","invited_by_user":"djm","github_username":"lpil"},"user_is_author":false,"tags":["plt"]},{"short_id":"iwrusm","short_id_url":"https://lobste.rs/s/iwrusm","created_at":"2024-01-11T06:21:04.000-06:00","title":"jsfree: a community-curated collection of web services that work without JavaScript","url":"https://jsfree.org/","score":22,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/iwrusm/jsfree_community_curated_collection_web","submitter_user":{"username":"bt","created_at":"2022-09-23T07:06:36.000-05:00","is_admin":false,"about":"UX designer / developer passionate about usability and software freedom.","is_moderator":false,"karma":404,"avatar_url":"/avatars/bt-100.png","invited_by_user":"galaiko"},"user_is_author":true,"tags":["web"]},{"short_id":"sgap8j","short_id_url":"https://lobste.rs/s/sgap8j","created_at":"2024-01-11T05:48:52.000-06:00","title":"Safe Zero-Cost Coercions for Haskell","url":"https://www.youtube.com/watch?v=xFy_8n_HdI4","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sgap8j/safe_zero_cost_coercions_for_haskell","submitter_user":{"username":"xoranth","created_at":"2023-11-09T20:44:58.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":105,"avatar_url":"/avatars/xoranth-100.png","invited_by_user":"benj"},"user_is_author":false,"tags":["haskell","plt","video"]},{"short_id":"ds5phr","short_id_url":"https://lobste.rs/s/ds5phr","created_at":"2024-01-11T05:37:36.000-06:00","title":"The 1xers Guide to LLM, ChatGpt \u0026 AI","url":"https://new.pythonforengineers.com/blog/the-1xers-guide-to-llm-chatgpt-ai/","score":-3,"flags":4,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ds5phr/1xers_guide_llm_chatgpt_ai","submitter_user":{"username":"shantnu_tiwari","created_at":"2014-04-30T07:10:29.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":172,"avatar_url":"/avatars/shantnu_tiwari-100.png","invited_by_user":"stefantalpalaru"},"user_is_author":true,"tags":["ai"]},{"short_id":"lut3d7","short_id_url":"https://lobste.rs/s/lut3d7","created_at":"2024-01-11T05:33:40.000-06:00","title":"X-Wing: A post-quantum encryption scheme that wont fail if the Kyber is broken","url":"https://eprint.iacr.org/2024/039","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lut3d7/x_wing_post_quantum_encryption_scheme","submitter_user":{"username":"squiddish","created_at":"2021-05-11T08:34:12.000-05:00","is_admin":false,"about":"Software engineer from Germany interested in functional programming, soundness, formal methods, cryptography.","is_moderator":false,"karma":5,"avatar_url":"/avatars/squiddish-100.png","invited_by_user":"shapr"},"user_is_author":true,"tags":["cryptography"]},{"short_id":"kn7ap0","short_id_url":"https://lobste.rs/s/kn7ap0","created_at":"2024-01-11T03:46:50.000-06:00","title":"Creating Domain Specific Error Helpers in Go With errors.As","url":"https://blog.carlana.net/post/2020/working-with-errors-as/","score":7,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kn7ap0/creating_domain_specific_error_helpers","submitter_user":{"username":"matklad","created_at":"2019-07-02T07:23:10.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":7942,"avatar_url":"/avatars/matklad-100.png","invited_by_user":"skade","github_username":"matklad"},"user_is_author":false,"tags":["go"]},{"short_id":"lubhcb","short_id_url":"https://lobste.rs/s/lubhcb","created_at":"2024-01-11T03:42:25.000-06:00","title":"Elisp in Replacement String","url":"https://susam.net/maze/elisp-in-replacement-string.html","score":13,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lubhcb/elisp_replacement_string","submitter_user":{"username":"susam","created_at":"2020-04-29T15:40:43.000-05:00","is_admin":false,"about":"Author of [melpa.org/#/devil](https://melpa.org/#/devil), [git.io/texme](https://git.io/texme), [git.io/uncap](https://git.io/uncap), [mathb.in](https://mathb.in/), etc.\r\n\r\nMastodon: [@susam@mastodon.social](https://mastodon.social/@susam)\r\n\r\nGitHub: [@susam](https://github.com/susam)","is_moderator":false,"karma":2895,"avatar_url":"/avatars/susam-100.png","invited_by_user":"premysl","github_username":"susam"},"user_is_author":true,"tags":["emacs"]},{"short_id":"l7hn45","short_id_url":"https://lobste.rs/s/l7hn45","created_at":"2024-01-11T02:17:11.000-06:00","title":"Messengers performance study","url":"https://decentim.grafana.net/public-dashboards/92602d3a4aa842ce97812d310077691d","score":15,"flags":0,"comment_count":14,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/l7hn45/messengers_performance_study","submitter_user":{"username":"Flow","created_at":"2019-02-25T03:11:56.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":586,"avatar_url":"/avatars/Flow-100.png","invited_by_user":"river","github_username":"Flowdalic"},"user_is_author":false,"tags":["networking"]},{"short_id":"bm1gzi","short_id_url":"https://lobste.rs/s/bm1gzi","created_at":"2024-01-10T22:48:40.000-06:00","title":"DynamoDB Foreign Data Wrapper for PostgreSQL","url":"https://github.com/pgspider/dynamodb_fdw","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bm1gzi/dynamodb_foreign_data_wrapper_for","submitter_user":{"username":"quad","created_at":"2013-11-18T14:08:27.000-06:00","is_admin":false,"about":"\"Any sufficiently complicated concurrent program in another language contains an ad hoc informally-specified bug-ridden slow implementation of half of Erlang.\" — Robert Virding","is_moderator":false,"karma":2994,"avatar_url":"/avatars/quad-100.png","invited_by_user":"dl","github_username":"quad"},"user_is_author":false,"tags":["databases"]},{"short_id":"7zi4wk","short_id_url":"https://lobste.rs/s/7zi4wk","created_at":"2024-01-10T18:59:39.000-06:00","title":"Hacking Factorio – From save game to remote code execution","url":"https://github.com/Valentin-Metz/writeup_factorio","score":16,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7zi4wk/hacking_factorio_from_save_game_remote","submitter_user":{"username":"timschumi","created_at":"2022-08-03T13:01:38.000-05:00","is_admin":false,"about":"CS-Student, SerenityOS contributor, occasionally works on Android (read: LineageOS) and five million other projects.","is_moderator":false,"karma":35,"avatar_url":"/avatars/timschumi-100.png","invited_by_user":"CxByte","github_username":"timschumi","twitter_username":"t1mschumi"},"user_is_author":false,"tags":["reversing","security"]}]