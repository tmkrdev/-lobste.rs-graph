[{"short_id":"5j8qxc","short_id_url":"https://lobste.rs/s/5j8qxc","created_at":"2024-07-22T21:36:32.000-05:00","title":"From Linux to NetBSD, with SSH only","url":"https://cloudbsd.xyz/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5j8qxc/from_linux_netbsd_with_ssh_only","submitter_user":"jaypatelani","user_is_author":false,"tags":["netbsd"]},{"short_id":"mtnfwp","short_id_url":"https://lobste.rs/s/mtnfwp","created_at":"2024-07-22T21:34:53.000-05:00","title":"OpenCV and the Wild Kingdom","url":"https://scottsexton.co/post/opencv_wild_kingdom/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mtnfwp/opencv_wild_kingdom","submitter_user":"kaycebasques","user_is_author":false,"tags":["ai","c++","hardware","python"]},{"short_id":"9lkulm","short_id_url":"https://lobste.rs/s/9lkulm","created_at":"2024-07-22T18:41:00.000-05:00","title":"Ronin 2.1.0 has finally been released! New database tables, new payloads, new recon engine, new Web UI, and more","url":"https://ronin-rb.dev/blog/2024/07/22/ronin-2-1-0-finally-released.html","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9lkulm/ronin_2_1_0_has_finally_been_released_new","submitter_user":"postmodern","user_is_author":true,"tags":["ruby","security"]},{"short_id":"eehf7s","short_id_url":"https://lobste.rs/s/eehf7s","created_at":"2024-07-22T18:34:56.000-05:00","title":"Mastering Emacs","url":"https://www.masteringemacs.org/","score":5,"flags":0,"comment_count":0,"description":"\u003cp\u003eBook “Mastering Emacs”, Emacs 29 Edition is out\u003c/p\u003e\n","description_plain":"Book \"Mastering Emacs\", Emacs 29 Edition is out","comments_url":"https://lobste.rs/s/eehf7s/mastering_emacs","submitter_user":"vladislavp","user_is_author":false,"tags":["emacs"]},{"short_id":"n2qczh","short_id_url":"https://lobste.rs/s/n2qczh","created_at":"2024-07-22T17:02:59.000-05:00","title":"Build your own SQLite in Rust - Part1","url":"https://blog.sylver.dev/build-your-own-sqlite-part-1-listing-tables","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/n2qczh/build_your_own_sqlite_rust_part1","submitter_user":"sevender","user_is_author":true,"tags":["databases","rust"]},{"short_id":"amanh7","short_id_url":"https://lobste.rs/s/amanh7","created_at":"2024-07-22T14:06:39.000-05:00","title":"(glisp) - graphical LISP","url":"https://glisp.app/commit:e7fbaae/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/amanh7/glisp_graphical_lisp","submitter_user":"mpweiher","user_is_author":false,"tags":["graphics","lisp"]},{"short_id":"d8alwc","short_id_url":"https://lobste.rs/s/d8alwc","created_at":"2024-07-22T12:52:57.000-05:00","title":"Reverse engineering a USB device with Rust (2020)","url":"https://gill.net.in/posts/reverse-engineering-a-usb-device-with-rust/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/d8alwc/reverse_engineering_usb_device_with_rust","submitter_user":"vaguelytagged","user_is_author":false,"tags":["rust"]},{"short_id":"woj8tt","short_id_url":"https://lobste.rs/s/woj8tt","created_at":"2024-07-22T11:47:59.000-05:00","title":"How conditional breakpoints work","url":"https://werat.dev/blog/how-conditional-breakpoints-work/","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/woj8tt/how_conditional_breakpoints_work","submitter_user":"werat","user_is_author":true,"tags":["debugging"]},{"short_id":"vffdwj","short_id_url":"https://lobste.rs/s/vffdwj","created_at":"2024-07-22T11:14:11.000-05:00","title":"\"Doors\" in Solaris: Lightweight RPC using File Descriptors (1996)","url":"http://www.kohala.com/start/papers.others/doors.html","score":14,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vffdwj/doors_solaris_lightweight_rpc_using_file","submitter_user":"manuel","user_is_author":false,"tags":["unix"]},{"short_id":"g02fw7","short_id_url":"https://lobste.rs/s/g02fw7","created_at":"2024-07-22T10:14:23.000-05:00","title":"3 ways to get Remote Code Execution in Kafka UI","url":"https://github.blog/2024-07-22-3-ways-to-get-remote-code-execution-in-kafka-ui/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g02fw7/3_ways_get_remote_code_execution_kafka_ui","submitter_user":"raymii","user_is_author":false,"tags":["security"]},{"short_id":"mzksfr","short_id_url":"https://lobste.rs/s/mzksfr","created_at":"2024-07-22T09:53:16.000-05:00","title":"The Historical Case for Fair Source","url":"https://openpath.chadwhitacre.com/2024/the-historical-case-for-fair-source/","score":2,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mzksfr/historical_case_for_fair_source","submitter_user":"ezekg","user_is_author":false,"tags":["law"]},{"short_id":"40a2yb","short_id_url":"https://lobste.rs/s/40a2yb","created_at":"2024-07-22T09:25:44.000-05:00","title":"git-spice - manage stacked Git branches","url":"https://abhinav.github.io/git-spice/","score":17,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/40a2yb/git_spice_manage_stacked_git_branches","submitter_user":"jparise","user_is_author":false,"tags":["release","vcs"]},{"short_id":"bzrkiv","short_id_url":"https://lobste.rs/s/bzrkiv","created_at":"2024-07-22T08:24:39.000-05:00","title":"What are you doing this week?","url":"","score":7,"flags":0,"comment_count":9,"description":"\u003cp\u003eWhat are you doing this week? Feel free to share!\u003c/p\u003e\n\u003cp\u003eKeep in mind it’s OK to do nothing at all, too.\u003c/p\u003e\n","description_plain":"What are you doing this week? Feel free to share!\r\n\r\nKeep in mind it’s OK to do nothing at all, too.","comments_url":"https://lobste.rs/s/bzrkiv/what_are_you_doing_this_week","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"uqqtiy","short_id_url":"https://lobste.rs/s/uqqtiy","created_at":"2024-07-22T08:22:44.000-05:00","title":"Nix Camp 2024 is On","url":"https://nix.camp/","score":17,"flags":0,"comment_count":5,"description":"\u003cp\u003eBring your friends :)\u003c/p\u003e\n","description_plain":"Bring your friends :)","comments_url":"https://lobste.rs/s/uqqtiy/nix_camp_2024_is_on","submitter_user":"matthewcroughan","user_is_author":true,"tags":["linux","nix"]},{"short_id":"pplfdt","short_id_url":"https://lobste.rs/s/pplfdt","created_at":"2024-07-22T06:38:42.000-05:00","title":"Social Computing, before the Internet","url":"https://netsettlement.blogspot.com/2024/07/social-computing-before-internet.html","score":17,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pplfdt/social_computing_before_internet","submitter_user":"LeahNeukirchen","user_is_author":false,"tags":["culture","historical"]},{"short_id":"i6mhqj","short_id_url":"https://lobste.rs/s/i6mhqj","created_at":"2024-07-22T04:55:00.000-05:00","title":"Parsing Protobuf Definitions with Tree-sitter","url":"https://relistan.com/parsing-protobuf-files-with-treesitter","score":15,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i6mhqj/parsing_protobuf_definitions_with_tree","submitter_user":"relistan","user_is_author":true,"tags":["go","programming"]},{"short_id":"mfbveg","short_id_url":"https://lobste.rs/s/mfbveg","created_at":"2024-07-22T04:05:27.000-05:00","title":"The algebra (and calculus!) of algebraic data types","url":"https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types","score":26,"flags":0,"comment_count":26,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mfbveg/algebra_calculus_algebraic_data_types","submitter_user":"jackdk","user_is_author":false,"tags":["plt"]},{"short_id":"prwwwm","short_id_url":"https://lobste.rs/s/prwwwm","created_at":"2024-07-22T02:05:52.000-05:00","title":"Rust Question on embedding FSM in wrapper struct(s)","url":"","score":7,"flags":0,"comment_count":5,"description":"\u003cp\u003eHi folks! Perhaps a bit of an odd post but wanted to reach out to get some feedback from the Rust fellows in the community. I’m writing a toy work pool/supervisor library, \u003ca href=\"https://github.com/JuxhinDB/poolparty?tab=readme-ov-file\" rel=\"ugc\"\u003epoolparty\u003c/a\u003e, inspired by Erlang’s \u003ca href=\"https://github.com/devinus/poolboy\" rel=\"ugc\"\u003e\u003ccode\u003epoolboy\u003c/code\u003e\u003c/a\u003e. Everything is effectively a back-of-the-napkin sketch but have some areas I’d like some guidance with.\u003c/p\u003e\n\u003cp\u003eWe have a concept of a \u003ca href=\"https://github.com/JuxhinDB/poolparty/blob/main/src/worker.rs\" rel=\"ugc\"\u003e\u003ccode\u003eWorker\u003c/code\u003e\u003c/a\u003e trait that library-users can implement to encapsulate some workload (e.g., perform inference against some dataset).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003epub trait Workable: Debug + Send + Sync + Sized {\n    type Task: Task + Debug;\n    type Output: Debug + Send;\n    type Error: Debug + Send;\n\n    fn process(task: Self::Task) -\u0026gt; impl Future\u0026lt;Output = Response\u0026lt;Self\u0026gt;\u0026gt;;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs a library, I’d like to hide away all the state-machinery and the running of the worker. Specifically how it receives messages from the supervisor, changes state, propagates results and handles errors (outside of the task context).\u003c/p\u003e\n\u003cp\u003eAfter reading a few posts on state-machines in Rust, some more complex than others, there are a few requirements I had:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eState transitions do not need to be checked at compile-time\u003c/li\u003e\n\u003cli\u003eTransitions may need to accept event inputs (e.g., a Task to run)\u003c/li\u003e\n\u003cli\u003eTransitions should not block the task, as we still need to be able to receive events from the supervisor during a long transition (e.g., while running a task, we receive a \u003ccode\u003ecancel\u003c/code\u003e event) and must gracefully cancel and transition to \u003ccode\u003eidle\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe idea I have so far is a simple \u003ccode\u003eState\u003c/code\u003e enum that is packed into the \u003ccode\u003eWorker\u003c/code\u003e struct, which is a wrapper struct around the \u003ccode\u003eWorkable\u003c/code\u003e trait.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003e#[derive(Debug)]\nenum State\u0026lt;W: Workable\u0026gt; {\n    Idle,\n    Running { task: W::Task },\n    Error(W::Error),\n    Stop,\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eWorker\u003c/code\u003e struct containing the state.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003epub struct Worker\u0026lt;'a, W: Workable\u0026gt; {\n    id: usize,\n    rx: Receiver\u0026lt;Request\u0026lt;W\u0026gt;\u0026gt;,\n    state: State\u0026lt;W\u0026gt;,\n    worker: PhantomData\u0026lt;\u0026amp;'a W\u0026gt;, // Ignore\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd implementing the state transitions by implementing the \u003ccode\u003eState\u003c/code\u003e enum on the generic \u003ccode\u003eWorker\u0026lt;W\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-rust\"\u003eimpl\u0026lt;W: Workable\u0026gt; State\u0026lt;W\u0026gt; {\n    // NOTE(jdb): The following is the initial state machine for workers.\n    //\n    //                           complete/success\n    //                           cancel\n    //              ┌───────────────────────────────┐\n    //              │                               │\n    //         ┌────▼─────┐                   ┌─────┴─────┐\n    //       ┌─┤          │      task         │           │\n    // cancel│ │   IDLE   ├───────────────────►  RUNNING  │\n    //       └─►          │                   │           │\n    //         └────┬─────┘                   └───┬─┬─────┘\n    //              │            shutdown         │ │\n    //      shutdown│ ┌───────────────────────────┘ │complete/fail\n    //              │ │                             │\n    //         ┌────▼─▼───┐                   ┌─────▼─────┐\n    //         │          │      shutdown     │           │\n    //         │   STOP   ◄───────────────────┤   ERROR   │\n    //         │          │                   │           │\n    //         └──────────┘                   └───────────┘\n    //\n    //  Note that retrying should not be handled by the worker. Instead it\n    //  is the job of the Supervisor to determine if we should shut down\n    //  the worker, and spawn a new one with the same task. This is done to\n    //  ensure that we are able to capture error state before terminating a\n    //  worker.\n    fn next(\u0026amp;self, event: Request\u0026lt;W\u0026gt;) -\u0026gt; Result\u0026lt;State\u0026lt;W\u0026gt;, String\u0026gt; {\n        match (self, event) {\n            (State::Idle, Request::Task(t)) =\u0026gt; Ok(State::Running { task: t }),\n            (State::Idle, Request::Cancel) =\u0026gt; Ok(State::Idle),\n            (State::Running { task: _ }, Request::Cancel) =\u0026gt; Ok(State::Idle),\n            (_, Request::Shutdown) =\u0026gt; Ok(State::Stop),\n            _ =\u0026gt; Err(\"invalid transition\".to_string()),\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis part seems \u003cem\u003eokay\u003c/em\u003e. My issues are that:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eI cannot take ownership of the \u003ccode\u003eWorker\u003c/code\u003e struct as part of the state transition. This leads to this weird case where we need a \u003ca href=\"https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L67-L73\" rel=\"ugc\"\u003e\u003ccode\u003e\u0026amp;mut self\u003c/code\u003e\u003c/a\u003e to update state.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehandle_event\u003c/code\u003e cannot return the \u003ca href=\"https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L75\" rel=\"ugc\"\u003etransitioned state\u003c/a\u003e. That said, this might be overcome with a macro.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAnd likely a large number of other anti-patterns. Happy to hear any feedback or guidance on how to improve this!\u003c/p\u003e\n","description_plain":"Hi folks! Perhaps a bit of an odd post but wanted to reach out to get some feedback from the Rust fellows in the community. I'm writing a toy work pool/supervisor library, [poolparty](https://github.com/JuxhinDB/poolparty?tab=readme-ov-file), inspired by Erlang's [`poolboy`](https://github.com/devinus/poolboy). Everything is effectively a back-of-the-napkin sketch but have some areas I'd like some guidance with.\r\n\r\nWe have a concept of a [`Worker`](https://github.com/JuxhinDB/poolparty/blob/main/src/worker.rs) trait that library-users can implement to encapsulate some workload (e.g., perform inference against some dataset). \r\n\r\n```rust\r\npub trait Workable: Debug + Send + Sync + Sized {\r\n    type Task: Task + Debug;\r\n    type Output: Debug + Send;\r\n    type Error: Debug + Send;\r\n\r\n    fn process(task: Self::Task) -\u003e impl Future\u003cOutput = Response\u003cSelf\u003e\u003e;\r\n}\r\n```\r\n\r\nAs a library, I'd like to hide away all the state-machinery and the running of the worker. Specifically how it receives messages from the supervisor, changes state, propagates results and handles errors (outside of the task context).\r\n\r\nAfter reading a few posts on state-machines in Rust, some more complex than others, there are a few requirements I had:\r\n\r\n* State transitions do not need to be checked at compile-time\r\n* Transitions may need to accept event inputs (e.g., a Task to run)\r\n* Transitions should not block the task, as we still need to be able to receive events from the supervisor during a long transition (e.g., while running a task, we receive a `cancel` event) and must gracefully cancel and transition to `idle`.\r\n\r\nThe idea I have so far is a simple `State` enum that is packed into the `Worker` struct, which is a wrapper struct around the `Workable` trait.\r\n\r\n```rust\r\n#[derive(Debug)]\r\nenum State\u003cW: Workable\u003e {\r\n    Idle,\r\n    Running { task: W::Task },\r\n    Error(W::Error),\r\n    Stop,\r\n}\r\n```\r\n\r\n`Worker` struct containing the state.\r\n\r\n```rust\r\npub struct Worker\u003c'a, W: Workable\u003e {\r\n    id: usize,\r\n    rx: Receiver\u003cRequest\u003cW\u003e\u003e,\r\n    state: State\u003cW\u003e,\r\n    worker: PhantomData\u003c\u0026'a W\u003e, // Ignore\r\n}\r\n```\r\n\r\nAnd implementing the state transitions by implementing the `State` enum on the generic `Worker\u003cW\u003e`.\r\n\r\n```rust\r\nimpl\u003cW: Workable\u003e State\u003cW\u003e {\r\n    // NOTE(jdb): The following is the initial state machine for workers.\r\n    //\r\n    //                           complete/success\r\n    //                           cancel\r\n    //              ┌───────────────────────────────┐\r\n    //              │                               │\r\n    //         ┌────▼─────┐                   ┌─────┴─────┐\r\n    //       ┌─┤          │      task         │           │\r\n    // cancel│ │   IDLE   ├───────────────────►  RUNNING  │\r\n    //       └─►          │                   │           │\r\n    //         └────┬─────┘                   └───┬─┬─────┘\r\n    //              │            shutdown         │ │\r\n    //      shutdown│ ┌───────────────────────────┘ │complete/fail\r\n    //              │ │                             │\r\n    //         ┌────▼─▼───┐                   ┌─────▼─────┐\r\n    //         │          │      shutdown     │           │\r\n    //         │   STOP   ◄───────────────────┤   ERROR   │\r\n    //         │          │                   │           │\r\n    //         └──────────┘                   └───────────┘\r\n    //\r\n    //  Note that retrying should not be handled by the worker. Instead it\r\n    //  is the job of the Supervisor to determine if we should shut down\r\n    //  the worker, and spawn a new one with the same task. This is done to\r\n    //  ensure that we are able to capture error state before terminating a\r\n    //  worker.\r\n    fn next(\u0026self, event: Request\u003cW\u003e) -\u003e Result\u003cState\u003cW\u003e, String\u003e {\r\n        match (self, event) {\r\n            (State::Idle, Request::Task(t)) =\u003e Ok(State::Running { task: t }),\r\n            (State::Idle, Request::Cancel) =\u003e Ok(State::Idle),\r\n            (State::Running { task: _ }, Request::Cancel) =\u003e Ok(State::Idle),\r\n            (_, Request::Shutdown) =\u003e Ok(State::Stop),\r\n            _ =\u003e Err(\"invalid transition\".to_string()),\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis part seems _okay_. My issues are that:\r\n\r\n1. I cannot take ownership of the `Worker` struct as part of the state transition. This leads to this weird case where we need a [`\u0026mut self`](https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L67-L73) to update state.\r\n2. `handle_event` cannot return the [transitioned state](https://github.com/JuxhinDB/poolparty/blob/d384d836eee059adb11d4944e5dcbd654f00e51d/src/worker.rs#L75). That said, this might be overcome with a macro.\r\n\r\nAnd likely a large number of other anti-patterns. Happy to hear any feedback or guidance on how to improve this!","comments_url":"https://lobste.rs/s/prwwwm/rust_question_on_embedding_fsm_wrapper","submitter_user":"juxhin","user_is_author":true,"tags":["rust"]},{"short_id":"g4nt4n","short_id_url":"https://lobste.rs/s/g4nt4n","created_at":"2024-07-21T23:59:03.000-05:00","title":"jiff: A date-time library for Rust that encourages you to jump into the pit of success","url":"https://github.com/BurntSushi/jiff","score":42,"flags":0,"comment_count":22,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g4nt4n/jiff_date_time_library_for_rust","submitter_user":"simonw","user_is_author":false,"tags":["rust"]},{"short_id":"ibwlo0","short_id_url":"https://lobste.rs/s/ibwlo0","created_at":"2024-07-21T20:46:41.000-05:00","title":"Mapping symbols: rethinking for efficiency","url":"https://maskray.me/blog/2024-07-21-mapping-symbols-rethinking-for-efficiency","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ibwlo0/mapping_symbols_rethinking_for","submitter_user":"MaskRay","user_is_author":true,"tags":["compilers"]},{"short_id":"kr9od0","short_id_url":"https://lobste.rs/s/kr9od0","created_at":"2024-07-21T20:29:25.000-05:00","title":"Did you know about Instruments?","url":"https://registerspill.thorstenball.com/p/did-you-know-about-instruments","score":27,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kr9od0/did_you_know_about_instruments","submitter_user":"carlana","user_is_author":false,"tags":["debugging","mac","performance"]},{"short_id":"ysn6kc","short_id_url":"https://lobste.rs/s/ysn6kc","created_at":"2024-07-21T17:52:34.000-05:00","title":"Nested Dynamic Modules in NestJS","url":"https://dev.clintonblackburn.com/2024/07/21/nested-dynamic-modules-in-nestjs","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ysn6kc/nested_dynamic_modules_nestjs","submitter_user":"clintonb","user_is_author":true,"tags":["nodejs","programming"]},{"short_id":"5jjtem","short_id_url":"https://lobste.rs/s/5jjtem","created_at":"2024-07-21T17:08:07.000-05:00","title":"Maintain a golden test of your package's API with `diff-package-api` and `print-api`","url":"https://discourse.haskell.org/t/maintain-a-golden-test-of-your-packages-api-with-diff-package-api-and-print-api/9997","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5jjtem/maintain_golden_test_your_package_s_api","submitter_user":"Hecate","user_is_author":true,"tags":["haskell","testing"]},{"short_id":"bonojc","short_id_url":"https://lobste.rs/s/bonojc","created_at":"2024-07-21T16:22:08.000-05:00","title":"A brief history of Dell UNIX","url":"https://notes.technologists.com/notes/2008/01/10/a-brief-history-of-dell-unix/","score":14,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bonojc/brief_history_dell_unix","submitter_user":"fs111","user_is_author":false,"tags":["historical","unix"]},{"short_id":"e5kbev","short_id_url":"https://lobste.rs/s/e5kbev","created_at":"2024-07-21T14:35:21.000-05:00","title":"Baby's second wasm compiler","url":"https://www.scattered-thoughts.net/writing/babys-second-wasm-compiler","score":21,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/e5kbev/baby_s_second_wasm_compiler","submitter_user":"jamii","user_is_author":true,"tags":["compilers","wasm","zig"]}]