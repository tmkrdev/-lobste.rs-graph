[{"short_id":"b8noca","short_id_url":"https://lobste.rs/s/b8noca","created_at":"2025-01-05T19:10:02.000-06:00","title":"Keeping Too Much Logic in SQL Queries Does Not Scale","url":"https://lu.sagebl.eu/notes/keeping-too-much-logic-in-sql-queries-does-not-scale/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/b8noca/keeping_too_much_logic_sql_queries_does","submitter_user":"emschwartz","user_is_author":false,"tags":["databases","practices"]},{"short_id":"yzwq1l","short_id_url":"https://lobste.rs/s/yzwq1l","created_at":"2025-01-05T15:52:53.000-06:00","title":"Learning Laravel by building a postal code finder","url":"https://usrme.xyz/posts/learning-laravel-by-building-a-postal-code-finder/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yzwq1l/learning_laravel_by_building_postal_code","submitter_user":"usrme","user_is_author":true,"tags":["databases","php"]},{"short_id":"nw5rci","short_id_url":"https://lobste.rs/s/nw5rci","created_at":"2025-01-05T15:47:07.000-06:00","title":"Any standard graph representations?","url":"","score":5,"flags":0,"comment_count":2,"description":"\u003cp\u003eI’m looking to show a Temporal.io workflow and I wish to make it so that I can query the workflow and get back a representation of the graph.\u003c/p\u003e\n\u003cp\u003eI then would render it and do other such things so that I may show other humans where workflows are and what they might be waiting for.\u003c/p\u003e\n\u003cp\u003eOn the rendering side I could use mermaid or d2 or any number of visualizations. My question is somewhere else. I am worried about the data origination side, the definition of the graph itself, to then be compiled into mermaid or D2 format. For example, there is a project called ReactFlow. It makes beautiful diagrams. Why shouldn’t I simply use that work for rendering? The point I’m making is I don’t want to deal with the data presentation within my workflows. I want to have a graph description and then I wish to render it elsewhere.\u003c/p\u003e\n\u003cp\u003eThere is prior art where somebody did a proof of concept using PlantUML. Unfortunately, this is just one representation and it requires a bit of heavy lifting on the workflow side to make it possible to share. It also does something where the graph is defined only once. One of my workflows creates its graph in the middle of its run. I’m sure it’s not that uncommon to have a temporal workflow start with one finite state machine but end up with a different one. This is one concrete reason I want to simply describe the nodes and edges instead of sharing the final representation format over the wire.\u003c/p\u003e\n\u003cp\u003eSo I’m now looking for an interchange format. I want to describe nodes and edges and I want to be able to highlight some of them as being more active or important or whatever. I think CSV would do, but then the question is which format? So I am putting forth the question. What format should I use to communicate with the most people and existing systems? Or are there no such things and I should just make myself a simple CSV format?\u003c/p\u003e\n","description_plain":"I'm looking to show a Temporal.io workflow and I wish to make it so that I can query the workflow and get back a representation of the graph.\r\n\r\nI then would render it and do other such things so that I may show other humans where workflows are and what they might be waiting for. \r\n\r\nOn the rendering side I could use mermaid or d2 or any number of visualizations. My question is somewhere else. I am worried about the data origination side, the definition of the graph itself, to then be compiled into mermaid or D2 format. For example, there is a project called ReactFlow. It makes beautiful diagrams. Why shouldn't I simply use that work for rendering? The point I'm making is I don't want to deal with the data presentation within my workflows. I want to have a graph description and then I wish to render it elsewhere.\r\n\r\nThere is prior art where somebody did a proof of concept using PlantUML. Unfortunately, this is just one representation and it requires a bit of heavy lifting on the workflow side to make it possible to share. It also does something where the graph is defined only once. One of my workflows creates its graph in the middle of its run. I'm sure it's not that uncommon to have a temporal workflow start with one finite state machine but end up with a different one. This is one concrete reason I want to simply describe the nodes and edges instead of sharing the final representation format over the wire.\r\n\r\nSo I'm now looking for an interchange format. I want to describe nodes and edges and I want to be able to highlight some of them as being more active or important or whatever. I think CSV would do, but then the question is which format? So I am putting forth the question. What format should I use to communicate with the most people and existing systems? Or are there no such things and I should just make myself a simple CSV format?","comments_url":"https://lobste.rs/s/nw5rci/any_standard_graph_representations","submitter_user":"Vaelatern","user_is_author":true,"tags":["ask","visualization"]},{"short_id":"aqesrh","short_id_url":"https://lobste.rs/s/aqesrh","created_at":"2025-01-05T14:52:55.000-06:00","title":"Rescuing my feeds from QuiteRss","url":"https://henderson.lol/posts/rescuing-data-from-quiterss.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/aqesrh/rescuing_my_feeds_from_quiterss","submitter_user":"hendersonreed","user_is_author":true,"tags":["ai"]},{"short_id":"g2adw4","short_id_url":"https://lobste.rs/s/g2adw4","created_at":"2025-01-05T14:23:47.000-06:00","title":"From Go to Rust 1: async Dispatch","url":"https://medium.com/@jberkenbilt/from-go-to-rust-1-async-dispatch-866e042cd98a","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g2adw4/from_go_rust_1_async_dispatch","submitter_user":"wofo","user_is_author":false,"tags":["go","rust"]},{"short_id":"bmxtj4","short_id_url":"https://lobste.rs/s/bmxtj4","created_at":"2025-01-05T13:46:16.000-06:00","title":"Pi in the Pentium: reverse-engineering the constants in its floating-point unit","url":"http://www.righto.com/2025/01/pentium-floating-point-ROM.html","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bmxtj4/pi_pentium_reverse_engineering","submitter_user":"calvin","user_is_author":false,"tags":["hardware","historical","reversing"]},{"short_id":"uwwgmn","short_id_url":"https://lobste.rs/s/uwwgmn","created_at":"2025-01-05T10:28:51.000-06:00","title":"Solving Advent of Code “Seating System” with Comonads and Stencils","url":"https://abhinavsarkar.net/posts/solving-aoc20-seating-system/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uwwgmn/solving_advent_code_seating_system_with","submitter_user":"abhin4v","user_is_author":true,"tags":["haskell"]},{"short_id":"hhwad9","short_id_url":"https://lobste.rs/s/hhwad9","created_at":"2025-01-05T09:55:36.000-06:00","title":"Reliable system call interception","url":"https://blog.mggross.com/intercepting-syscalls/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hhwad9/reliable_system_call_interception","submitter_user":"crazyloglad","user_is_author":false,"tags":["osdev"]},{"short_id":"qmdpl8","short_id_url":"https://lobste.rs/s/qmdpl8","created_at":"2025-01-05T08:40:56.000-06:00","title":"NESFab","url":"https://pubby.games/nesfab.html","score":29,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qmdpl8/nesfab","submitter_user":"JordiGH","user_is_author":false,"tags":["games","retrocomputing"]},{"short_id":"hyvqm6","short_id_url":"https://lobste.rs/s/hyvqm6","created_at":"2025-01-05T07:31:05.000-06:00","title":"World's First MIDI Shellcode","url":"https://psi3.ru/blog/swl01u/","score":18,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hyvqm6/world_s_first_midi_shellcode","submitter_user":"purplesyringa","user_is_author":false,"tags":["hardware","reversing"]},{"short_id":"uzyyf4","short_id_url":"https://lobste.rs/s/uzyyf4","created_at":"2025-01-05T06:35:15.000-06:00","title":"A story on home server security","url":"https://raniseth.com/blog/2025-01-04-Home-Server-Security.html","score":22,"flags":1,"comment_count":16,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uzyyf4/story_on_home_server_security","submitter_user":"kmaasrud","user_is_author":false,"tags":["security"]},{"short_id":"kcjd1w","short_id_url":"https://lobste.rs/s/kcjd1w","created_at":"2025-01-05T05:25:41.000-06:00","title":"How I run LLMs locally","url":"https://abishekmuthian.com/how-i-run-llms-locally/","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kcjd1w/how_i_run_llms_locally","submitter_user":"mpweiher","user_is_author":false,"tags":["ai"]},{"short_id":"xjwix5","short_id_url":"https://lobste.rs/s/xjwix5","created_at":"2025-01-05T04:55:36.000-06:00","title":"C Is Not a Low-level Language (2018)","url":"https://dl.acm.org/doi/pdf/10.1145/3212477.3212479","score":12,"flags":0,"comment_count":12,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xjwix5/c_is_not_low_level_language_2018","submitter_user":"bitfield","user_is_author":false,"tags":["c","hardware","pdf"]},{"short_id":"3dzs83","short_id_url":"https://lobste.rs/s/3dzs83","created_at":"2025-01-05T04:34:54.000-06:00","title":"I keep turning my Google Sheets into phone-friendly webapps, and I can’t stop","url":"https://arstechnica.com/gadgets/2024/12/making-tiny-no-code-webapps-out-of-spreadsheets-is-a-weirdly-fulfilling-hobby/","score":16,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3dzs83/i_keep_turning_my_google_sheets_into_phone","submitter_user":"mpweiher","user_is_author":false,"tags":["web"]},{"short_id":"gpyj5x","short_id_url":"https://lobste.rs/s/gpyj5x","created_at":"2025-01-05T01:47:59.000-06:00","title":"Game dev in Rust, a year later","url":"https://users.rust-lang.org/t/game-dev-in-rust-a-year-later/123522","score":37,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gpyj5x/game_dev_rust_year_later","submitter_user":"BenjaminRi","user_is_author":false,"tags":["games","graphics","rust"]},{"short_id":"evd0gt","short_id_url":"https://lobste.rs/s/evd0gt","created_at":"2025-01-05T00:59:54.000-06:00","title":"Don't Clobber the Frame Pointer","url":"https://nsrip.com/posts/clobberfp.html","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/evd0gt/don_t_clobber_frame_pointer","submitter_user":"apc","user_is_author":false,"tags":["assembly","go"]},{"short_id":"nljec1","short_id_url":"https://lobste.rs/s/nljec1","created_at":"2025-01-05T00:06:43.000-06:00","title":"Minimum bipartite matching via Riemann optimization","url":"https://ocramz.github.io/posts/2023-12-21-assignment-riemann-opt.html","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nljec1/minimum_bipartite_matching_via_riemann","submitter_user":"ocramz","user_is_author":true,"tags":["math"]},{"short_id":"bqahl6","short_id_url":"https://lobste.rs/s/bqahl6","created_at":"2025-01-04T21:14:40.000-06:00","title":"John Earnest and Decker","url":"https://www.arraycast.com/episodes/episode96-decker","score":12,"flags":0,"comment_count":12,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bqahl6/john_earnest_decker","submitter_user":"janus","user_is_author":false,"tags":["audio","mac","plt","visualization"]},{"short_id":"2m3jmr","short_id_url":"https://lobste.rs/s/2m3jmr","created_at":"2025-01-04T20:48:07.000-06:00","title":"Synthesizing 1-Bit Audio on an Esoteric CPU","url":"https://www.youtube.com/watch?v=_6f8PURcPEE","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2m3jmr/synthesizing_1_bit_audio_on_esoteric_cpu","submitter_user":"LenFalken","user_is_author":true,"tags":["assembly","programming","video"]},{"short_id":"8uaigo","short_id_url":"https://lobste.rs/s/8uaigo","created_at":"2025-01-04T20:43:15.000-06:00","title":"Oils 0.24.0 - Closures, Objects, and Namespaces","url":"https://www.oilshell.org/blog/2025/01/release-0.24.0.html","score":22,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8uaigo/oils_0_24_0_closures_objects_namespaces","submitter_user":"andyc","user_is_author":true,"tags":["programming","release","unix"]},{"short_id":"vvssqt","short_id_url":"https://lobste.rs/s/vvssqt","created_at":"2025-01-04T20:23:50.000-06:00","title":"Refurb weekend: Atari Stacy","url":"https://oldvcr.blogspot.com/2025/01/refurb-weekend-atari-stacy.html","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vvssqt/refurb_weekend_atari_stacy","submitter_user":"classichasclass","user_is_author":true,"tags":["retrocomputing"]},{"short_id":"joba3k","short_id_url":"https://lobste.rs/s/joba3k","created_at":"2025-01-04T20:17:27.000-06:00","title":"Core statement on version control systems","url":"https://mail-index.netbsd.org/tech-repository/2025/01/04/msg000805.html","score":15,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/joba3k/core_statement_on_version_control","submitter_user":"jaypatelani","user_is_author":false,"tags":["netbsd"]},{"short_id":"eybgfc","short_id_url":"https://lobste.rs/s/eybgfc","created_at":"2025-01-04T19:59:52.000-06:00","title":"The tiny ultrabright laser that can melt steel","url":"https://spectrum.ieee.org/pcsel","score":13,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/eybgfc/tiny_ultrabright_laser_can_melt_steel","submitter_user":"smaddox","user_is_author":false,"tags":["hardware"]},{"short_id":"jfljqy","short_id_url":"https://lobste.rs/s/jfljqy","created_at":"2025-01-04T19:52:29.000-06:00","title":"Web page annoyances that I don't inflict on you here","url":"http://rachelbythebay.com/w/2025/01/04/cruft/","score":124,"flags":0,"comment_count":49,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jfljqy/web_page_annoyances_i_don_t_inflict_on_you","submitter_user":"equeue","user_is_author":false,"tags":["web"]},{"short_id":"z98fqy","short_id_url":"https://lobste.rs/s/z98fqy","created_at":"2025-01-04T18:40:08.000-06:00","title":"Linux High DPI Settings","url":"https://horstmann.com/unblog/2023-01-07/index.html","score":16,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/z98fqy/linux_high_dpi_settings","submitter_user":"neeasade","user_is_author":false,"tags":["linux"]}]