[{"short_id":"twzn9n","short_id_url":"https://lobste.rs/s/twzn9n","created_at":"2024-12-20T12:16:15.000-06:00","title":"Rivet Actors, Cloudflare Durable Objects-like infrastructure built with Rust, FoundationDB, V8 Isolates","url":"https://github.com/rivet-gg/rivet","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eHello! I’ve been a lurker here for a good while, I think it’s due time I share what my team and I have been working on in hopes that other crustaceans find it interesting.\u003c/p\u003e\n\u003cp\u003eRivet is open-source actor infrastructure similar to Cloudflare’s Durable Objects. Rivet itself already serves millions of MAU in production using our current container runtime – primarily for multiplayer games – and Rivet Actors are a new extension to support actor-like workloads. Rivet Actor’s core primitives are RPC, state, and events.\u003c/p\u003e\n\u003cp\u003eActors are powered by Rust, V8 isolates (supports Deno), and FoundationDB. An architecture diagram is available \u003ca href=\"https://github.com/rivet-gg/rivet?tab=readme-ov-file#diagram\" rel=\"ugc\"\u003ehere\u003c/a\u003e. If you’re not familiar with FoundationDB, you’re overdue to watch \u003ca href=\"https://www.youtube.com/watch?v=9g84y_60VGM\" rel=\"ugc\"\u003eDave Rosenthal’s talk\u003c/a\u003e. (I firmly believe it’s by far the best permissively licensed database; if only it had a well maintained SQL layer.)\u003c/p\u003e\n\u003cp\u003eHere’s where Rivet’s architecture gets fun – we don’t rely on a traditional orchestrator like Kubernetes or Nomad for our runtime. Instead, our orchestrator is powered by an in-house actor-like workflow engine – similar to how FoundationDB is powered by their own actor library (\u003ca href=\"https://apple.github.io/foundationdb/flow.html\" rel=\"ugc\"\u003eFlow\u003c/a\u003e) internally. It lets us reliably \u0026amp; efficiently build complex logic – like our orchestrator – that would normally be incredibly difficult to build correctly. For example, \u003ca href=\"https://github.com/rivet-gg/rivet/blob/a3db31f3b5c351061d665003a6a8dfbf3372690b/packages/services/ds/src/workflows/server/pegboard/mod.rs#L49\" rel=\"ugc\"\u003ehere’s the logic that powers Rivet Actors themselves\u003c/a\u003e with complex mechanisms like retry upgrades, retry backoffs, and draining.\u003c/p\u003e\n\u003cp\u003eOne of the reasons we built Rivet Actors is because we tried to replace most of our Redis-based realtime infrastructure with Durable Objects. The architecture allowed us to build realtime features much faster \u0026amp; efficiently, but the platform \u0026amp; APIs were needlessly rigid and difficult to use. Our goal is to build an actor-like platform that includes the bells and whistles required for developers to benefit from the actor model without the learning curve of tools like Erlang/OTP, Akka, or Orleans.\u003c/p\u003e\n\u003cp\u003eRivet Actors provides a few key benefits in flexibility over Durable Objects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eOpen-source (Apache 2.0) – built to be self-hosted and deployed on-prem\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProvides observability out of the box, no Logpush required\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRivet Actors support the Deno runtime, so NPM \u0026amp; JSR just works\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://jsr.io/@rivet-gg/actor/doc\" rel=\"ugc\"\u003e@rivet-gg/actor\u003c/a\u003e framework provides RPC, state, and events out of the box for faster bootstrapping; you can modify and deploy it yourself\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSupports both V8 isolates \u0026amp; Docker-compatible containers so you can run any software you’d like, like Godot/Unity servers or video transcoding\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAlso supports TCP \u0026amp; UDP (we run games!)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProvides vanilla HTTP API for easy use with existing apps\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFull control over regions\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere’s plenty more that I don’t have space to talk about. Give \u003ca href=\"https://rivet.gg/docs\" rel=\"ugc\"\u003eour docs\u003c/a\u003e a read if you’d like to learn more or read about \u003ca href=\"https://rivet.gg/docs/internals/design-decisions\" rel=\"ugc\"\u003einternal design decisions\u003c/a\u003e. I’ll be in the comments answering questions!\u003c/p\u003e\n\u003cp\u003eCheers, Nathan\u003c/p\u003e\n","description_plain":"Hello! I've been a lurker here for a good while, I think it's due time I share what my team and I have been working on in hopes that other crustaceans find it interesting.\r\n\r\nRivet is open-source actor infrastructure similar to Cloudflare's Durable Objects. Rivet itself already serves millions of MAU in production using our current container runtime – primarily for multiplayer games – and Rivet Actors are a new extension to support actor-like workloads. Rivet Actor's core primitives are RPC, state, and events.\r\n\r\nActors are powered by Rust, V8 isolates (supports Deno), and FoundationDB. An architecture diagram is available [here](https://github.com/rivet-gg/rivet?tab=readme-ov-file#diagram). If you're not familiar with FoundationDB, you're overdue to watch [Dave Rosenthal's talk](https://www.youtube.com/watch?v=9g84y_60VGM). (I firmly believe it's by far the best permissively licensed database; if only it had a well maintained SQL layer.)\r\n\r\nHere's where Rivet's architecture gets fun – we don't rely on a traditional orchestrator like Kubernetes or Nomad for our runtime. Instead, our orchestrator is powered by an in-house actor-like workflow engine – similar to how FoundationDB is powered by their own actor library ([Flow](https://apple.github.io/foundationdb/flow.html)) internally. It lets us reliably \u0026 efficiently build complex logic – like our orchestrator – that would normally be incredibly difficult to build correctly. For example, [here's the logic that powers Rivet Actors themselves](https://github.com/rivet-gg/rivet/blob/a3db31f3b5c351061d665003a6a8dfbf3372690b/packages/services/ds/src/workflows/server/pegboard/mod.rs#L49) with complex mechanisms like retry upgrades, retry backoffs, and draining.\r\n\r\nOne of the reasons we built Rivet Actors is because we tried to replace most of our Redis-based realtime infrastructure with Durable Objects. The architecture allowed us to build realtime features much faster \u0026 efficiently, but the platform \u0026 APIs were needlessly rigid and difficult to use. Our goal is to build an actor-like platform that includes the bells and whistles required for developers to benefit from the actor model without the learning curve of tools like Erlang/OTP, Akka, or Orleans.\r\n\r\nRivet Actors provides a few key benefits in flexibility over Durable Objects:\r\n\r\n- Open-source (Apache 2.0) – built to be self-hosted and deployed on-prem\r\n\r\n- Provides observability out of the box, no Logpush required\r\n\r\n- Rivet Actors support the Deno runtime, so NPM \u0026 JSR just works\r\n\r\n- [@rivet-gg/actor](https://jsr.io/@rivet-gg/actor/doc) framework provides RPC, state, and events out of the box for faster bootstrapping; you can modify and deploy it yourself\r\n\r\n- Supports both V8 isolates \u0026 Docker-compatible containers so you can run any software you'd like, like Godot/Unity servers or video transcoding\r\n\r\n- Also supports TCP \u0026 UDP (we run games!)\r\n\r\n- Provides vanilla HTTP API for easy use with existing apps\r\n\r\n- Full control over regions\r\n\r\nThere's plenty more that I don't have space to talk about. Give [our docs](https://rivet.gg/docs) a read if you'd like to learn more or read about [internal design decisions](https://rivet.gg/docs/internals/design-decisions). I'll be in the comments answering questions!\r\n\r\nCheers, Nathan","comments_url":"https://lobste.rs/s/twzn9n/rivet_actors_cloudflare_durable_objects","submitter_user":"nathanflurry","user_is_author":true,"tags":["javascript","rust"]},{"short_id":"l05xsl","short_id_url":"https://lobste.rs/s/l05xsl","created_at":"2024-12-20T11:23:03.000-06:00","title":"The long and winding road to safe browser-based cryptography","url":"https://securedrop.org/news/browser-based-cryptography/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/l05xsl/long_winding_road_safe_browser_based","submitter_user":"legoktm","user_is_author":false,"tags":["browsers","security"]},{"short_id":"hmgsin","short_id_url":"https://lobste.rs/s/hmgsin","created_at":"2024-12-20T10:47:53.000-06:00","title":"The CD Pipeline Manifesto","url":"https://manifesto.getglu.dev/","score":3,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hmgsin/cd_pipeline_manifesto","submitter_user":"markphelps","user_is_author":true,"tags":["devops","practices"]},{"short_id":"ouvo2l","short_id_url":"https://lobste.rs/s/ouvo2l","created_at":"2024-12-20T09:22:30.000-06:00","title":"Poetry(-core), or the ultimate footgun","url":"https://blogs.gentoo.org/mgorny/2024/12/20/poetry-core-or-the-ultimate-footgun/","score":7,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ouvo2l/poetry_core_ultimate_footgun","submitter_user":"calvin","user_is_author":false,"tags":["python","rant"]},{"short_id":"kbot2h","short_id_url":"https://lobste.rs/s/kbot2h","created_at":"2024-12-20T09:14:52.000-06:00","title":"A Zephyr-based camera trap for seagrass monitoring","url":"https://lwn.net/Articles/998893/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kbot2h/zephyr_based_camera_trap_for_seagrass","submitter_user":"jzb","user_is_author":false,"tags":["networking","science"]},{"short_id":"n8atz0","short_id_url":"https://lobste.rs/s/n8atz0","created_at":"2024-12-20T08:18:53.000-06:00","title":"From net/rpc to gRPC in Go Applications","url":"https://victoriametrics.com/blog/go-net-rpc/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/n8atz0/from_net_rpc_grpc_go_applications","submitter_user":"valyala","user_is_author":false,"tags":["go"]},{"short_id":"yygpjf","short_id_url":"https://lobste.rs/s/yygpjf","created_at":"2024-12-20T08:14:00.000-06:00","title":"Optimize your shell experience","url":"https://thoughtbot.com/blog/optimize-your-shell-experience","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yygpjf/optimize_your_shell_experience","submitter_user":"MatheusRich","user_is_author":true,"tags":["programming"]},{"short_id":"thcudm","short_id_url":"https://lobste.rs/s/thcudm","created_at":"2024-12-20T06:54:12.000-06:00","title":"Writing \u0026 Testing a Paginated API Iterator in Go","url":"https://blog.thibaut-rousseau.com/blog/writing-testing-a-paginated-api-iterator/","score":4,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/thcudm/writing_testing_paginated_api_iterator","submitter_user":"thiht","user_is_author":true,"tags":["go"]},{"short_id":"ptlefv","short_id_url":"https://lobste.rs/s/ptlefv","created_at":"2024-12-20T06:20:57.000-06:00","title":"Enum of Arrays","url":"https://tigerbeetle.com/blog/2024-12-19-enum-of-arrays/","score":37,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ptlefv/enum_arrays","submitter_user":"matklad","user_is_author":true,"tags":["performance","zig"]},{"short_id":"fbb1lw","short_id_url":"https://lobste.rs/s/fbb1lw","created_at":"2024-12-20T05:34:40.000-06:00","title":"What are you doing this weekend?","url":"","score":8,"flags":0,"comment_count":15,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it’s more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it’s more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/fbb1lw/what_are_you_doing_this_weekend","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"onyn3r","short_id_url":"https://lobste.rs/s/onyn3r","created_at":"2024-12-20T04:31:21.000-06:00","title":"cargo-testdox turns your Rust tests into docs","url":"https://github.com/bitfield/cargo-testdox","score":4,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/onyn3r/cargo_testdox_turns_your_rust_tests_into","submitter_user":"bitfield","user_is_author":true,"tags":["release","rust","testing"]},{"short_id":"cv6v1o","short_id_url":"https://lobste.rs/s/cv6v1o","created_at":"2024-12-20T04:05:32.000-06:00","title":"The era of open voice assistants has arrived","url":"https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/","score":11,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cv6v1o/era_open_voice_assistants_has_arrived","submitter_user":"kmaasrud","user_is_author":false,"tags":["ai"]},{"short_id":"3om9b9","short_id_url":"https://lobste.rs/s/3om9b9","created_at":"2024-12-20T03:50:53.000-06:00","title":"We Have Google Drive at Home: Musings on Merkle-Tree Based File Sharing","url":"https://www.dolthub.com/blog/2024-12-19-merkle-trees-for-file-systems/","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3om9b9/we_have_google_drive_at_home_musings_on","submitter_user":"manuel","user_is_author":false,"tags":["merkle-trees"]},{"short_id":"sl3l10","short_id_url":"https://lobste.rs/s/sl3l10","created_at":"2024-12-20T02:30:26.000-06:00","title":"Pragmatic Category Theory | Part 3: Associativity","url":"https://chshersh.com/blog/2024-12-20-pragmatic-category-theory-part-03.html","score":8,"flags":1,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sl3l10/pragmatic_category_theory_part_3","submitter_user":"chshersh","user_is_author":true,"tags":["ml"]},{"short_id":"8utgbj","short_id_url":"https://lobste.rs/s/8utgbj","created_at":"2024-12-20T02:26:54.000-06:00","title":"Lisp expression replacements with query-regexp-replace","url":"https://breatheoutbreathe.in/blog/2024-12-19-query-regexp-replace-lisp-replacement.html","score":2,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8utgbj/lisp_expression_replacements_with_query","submitter_user":"breatheoutbreathein","user_is_author":true,"tags":["emacs"]},{"short_id":"zzr4iu","short_id_url":"https://lobste.rs/s/zzr4iu","created_at":"2024-12-20T02:25:39.000-06:00","title":"How to mirror worg to a hyperdrive","url":"https://breatheoutbreathe.in/blog/2024-12-16-mirror-worg-to-a-hyperdrive.html","score":2,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zzr4iu/how_mirror_worg_hyperdrive","submitter_user":"breatheoutbreathein","user_is_author":true,"tags":["emacs","networking"]},{"short_id":"xynhcy","short_id_url":"https://lobste.rs/s/xynhcy","created_at":"2024-12-20T00:31:13.000-06:00","title":"My favourite colour is Chuck Norris red","url":"https://htmhell.dev/adventcalendar/2024/20/","score":37,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xynhcy/my_favourite_colour_is_chuck_norris_red","submitter_user":"j3s","user_is_author":false,"tags":["web"]},{"short_id":"pbbtv8","short_id_url":"https://lobste.rs/s/pbbtv8","created_at":"2024-12-19T20:57:51.000-06:00","title":"Debugging a network performance issue in an OCaml 5 program","url":"https://roscidus.com/blog/blog/2024/07/22/performance/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pbbtv8/debugging_network_performance_issue","submitter_user":"teymour","user_is_author":false,"tags":["ml","performance"]},{"short_id":"jdgjjt","short_id_url":"https://lobste.rs/s/jdgjjt","created_at":"2024-12-19T18:00:46.000-06:00","title":"Visitor Pattern Considered Pointless - Use Pattern Switches Instead (2021)","url":"https://nipafx.dev/java-visitor-pattern-pointless/","score":14,"flags":0,"comment_count":28,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jdgjjt/visitor_pattern_considered_pointless","submitter_user":"roryokane","user_is_author":false,"tags":["java"]},{"short_id":"mamynb","short_id_url":"https://lobste.rs/s/mamynb","created_at":"2024-12-19T16:21:11.000-06:00","title":"Top Python Web Development Frameworks in 2025","url":"https://reflex.dev/blog/2024-12-20-python-comparison/","score":3,"flags":9,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mamynb/top_python_web_development_frameworks","submitter_user":"jturner","user_is_author":false,"tags":["python","web"]},{"short_id":"2nygrt","short_id_url":"https://lobste.rs/s/2nygrt","created_at":"2024-12-19T13:45:32.000-06:00","title":"Elixir v1.18 released: type checking of function calls, Language Server listeners, built-in JSON, and ExUnit improvements","url":"https://elixir-lang.org/blog/2024/12/19/elixir-v1-18-0-released/","score":43,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2nygrt/elixir_v1_18_released_type_checking","submitter_user":"munksgaard","user_is_author":false,"tags":["elixir","release"]},{"short_id":"ztyd1z","short_id_url":"https://lobste.rs/s/ztyd1z","created_at":"2024-12-19T12:46:22.000-06:00","title":"The Intel 80376 – a Legacy-Free i386 (with a Twist!) (2010)","url":"https://www.pagetable.com/?p=460","score":21,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ztyd1z/intel_80376_legacy_free_i386_with_twist","submitter_user":"dzwdz","user_is_author":false,"tags":["hardware","historical"]},{"short_id":"glm3j9","short_id_url":"https://lobste.rs/s/glm3j9","created_at":"2024-12-19T11:01:08.000-06:00","title":"Understanding Basic Graal Graphs","url":"https://chrisseaton.com/truffleruby/basic-graal-graphs/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/glm3j9/understanding_basic_graal_graphs","submitter_user":"gf0","user_is_author":false,"tags":["compilers","java"]},{"short_id":"g0b5ga","short_id_url":"https://lobste.rs/s/g0b5ga","created_at":"2024-12-19T10:47:41.000-06:00","title":"The Year in Computer Science","url":"https://www.quantamagazine.org/the-year-in-computer-science-20241219/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g0b5ga/year_computer_science","submitter_user":"dayanruben","user_is_author":false,"tags":["compsci"]},{"short_id":"oclya6","short_id_url":"https://lobste.rs/s/oclya6","created_at":"2024-12-19T10:14:47.000-06:00","title":"Building Python tools with a one-shot prompt using uv run and Claude Projects","url":"https://simonwillison.net/2024/Dec/19/one-shot-python-tools/","score":8,"flags":15,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/oclya6/building_python_tools_with_one_shot","submitter_user":"simonw","user_is_author":true,"tags":["ai","python"]}]