[{"short_id":"bokf45","short_id_url":"https://lobste.rs/s/bokf45","created_at":"2023-02-04T00:54:24.000-06:00","title":"The Cryptopals Crypto Challenges","url":"https://www.cryptopals.com","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bokf45/cryptopals_crypto_challenges","submitter_user":{"username":"lorddimwit","created_at":"2016-08-15T09:39:45.000-05:00","is_admin":false,"about":"\r\n","is_moderator":false,"karma":12864,"avatar_url":"/avatars/lorddimwit-100.png","invited_by_user":"cks","github_username":"deadpixi"},"tags":["cryptography","math"]},{"short_id":"wn58fj","short_id_url":"https://lobste.rs/s/wn58fj","created_at":"2023-02-03T23:24:01.000-06:00","title":"Servo 2023 Roadmap","url":"https://servo.org/blog/2023/02/03/servo-2023-roadmap/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wn58fj/servo_2023_roadmap","submitter_user":{"username":"jado","created_at":"2019-08-06T03:14:15.000-05:00","is_admin":false,"about":"Software Engineer, CompSci Grad Student (researching ML)\r\n\r\nloves plt, compilers, ml, rust\r\n\r\n[Website](https://jadon.io) | [GitHub](https://github.com/phase) | [LinkedIn](https://www.linkedin.com/in/jado/)","is_moderator":false,"karma":1129,"avatar_url":"/avatars/jado-100.png","invited_by_user":"BruceM","github_username":"phase"},"tags":["browsers","rust"]},{"short_id":"bbd1pw","short_id_url":"https://lobste.rs/s/bbd1pw","created_at":"2023-02-03T23:13:37.000-06:00","title":"How AMD killed the Itanium","url":"https://utcc.utoronto.ca/~cks/space/blog/tech/AMDandItanium","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bbd1pw/how_amd_killed_itanium","submitter_user":{"username":"hongminhee","created_at":"2015-01-23T08:30:02.000-06:00","is_admin":false,"about":"I'm Hong Minhee, and a software engineer in Seoul. I write some open source softwares, and the most of them are in C#, Haskell, and Python. I'm an enthusiast of free software and Open Web.","is_moderator":false,"karma":43,"avatar_url":"/avatars/hongminhee-100.png","invited_by_user":"sanxiyn","github_username":"dahlia","twitter_username":"hongminhee","keybase_signatures":[{"kb_username":"hongminhee","sig_hash":"0fd024e1d2644dea82b224e8ee051ff8128c42e793b3539e8db7ab3e76dd87bf0f"}]},"tags":["hardware"]},{"short_id":"lx0t71","short_id_url":"https://lobste.rs/s/lx0t71","created_at":"2023-02-03T22:22:20.000-06:00","title":"New macOS Dropbox client moves files from ~/ to ~/Library","url":"https://help.dropbox.com/installs/macos-support-for-expected-changes","score":3,"flags":1,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lx0t71/new_macos_dropbox_client_moves_files_from","submitter_user":{"username":"jez","created_at":"2022-11-16T17:03:30.000-06:00","is_admin":false,"about":"https://jez.io","is_moderator":false,"karma":30,"avatar_url":"/avatars/jez-100.png","invited_by_user":"jmiven"},"tags":["mac"]},{"short_id":"limzlm","short_id_url":"https://lobste.rs/s/limzlm","created_at":"2023-02-03T21:14:36.000-06:00","title":"LibColony (library for task scheduling, for simulation games like Dwarf Fortress)","url":"https://mrogalski.eu/libcolony/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/limzlm/libcolony_library_for_task_scheduling","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"üêã\r\nhttps://raymii.org","is_moderator":false,"karma":19428,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["c++","games"]},{"short_id":"w5egrh","short_id_url":"https://lobste.rs/s/w5egrh","created_at":"2023-02-03T20:19:06.000-06:00","title":"The optimal amount of fraud is non-zero","url":"https://www.bitsaboutmoney.com/archive/optimal-amount-of-fraud/","score":3,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/w5egrh/optimal_amount_fraud_is_non_zero","submitter_user":{"username":"ebababi","created_at":"2018-10-14T11:47:38.000-05:00","is_admin":false,"about":"I am a programmer who likes playing music...","is_moderator":false,"karma":297,"avatar_url":"/avatars/ebababi-100.png","invited_by_user":"alynpost","github_username":"ebababi"},"tags":["finance","security"]},{"short_id":"qxr7bf","short_id_url":"https://lobste.rs/s/qxr7bf","created_at":"2023-02-03T15:56:35.000-06:00","title":"The Future (and the Past) of the Web is Server Side Rendering","url":"https://deno.com/blog/the-future-and-past-is-server-side-rendering","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qxr7bf/future_past_web_is_server_side_rendering","submitter_user":{"username":"tbonesteaks","created_at":"2019-09-24T11:30:46.000-05:00","is_admin":false,"about":"Feel free to email at: tbonesteaks at protonmail.com","is_moderator":false,"karma":1425,"avatar_url":"/avatars/tbonesteaks-100.png","invited_by_user":"wink"},"tags":["javascript","web"]},{"short_id":"slow6n","short_id_url":"https://lobste.rs/s/slow6n","created_at":"2023-02-03T14:29:10.000-06:00","title":"An Attack on The Speculative Vectorization: Leakage from Higher Dimensional Speculation","url":"https://arxiv.org/pdf/2302.01131","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eThis paper argues and shows that speculative vectorization, where a loop with rare or unknown memory dependencies are still vectorized, is fundamentally vulnerable and cannot be mitigated by existing defenses. We implement a simple proof of concept and show the leakage in Apple M2 SoC. We describe the source of leakage using Microarchitectural Leakage Descriptors MLD and we additionally describe principles to extend MLD for other optimization. Also as part of implementation we reverse engineer the M2 cache size and use threaded timer to differentiate between cache hit and miss.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2302.01131\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"This paper argues and shows that speculative vectorization, where a loop with rare or unknown memory dependencies are still vectorized, is fundamentally vulnerable and cannot be mitigated by existing defenses. We implement a simple proof of concept and show the leakage in Apple M2 SoC. We describe the source of leakage using Microarchitectural Leakage Descriptors MLD and we additionally describe principles to extend MLD for other optimization. Also as part of implementation we reverse engineer the M2 cache size and use threaded timer to differentiate between cache hit and miss. \r\n\r\n[arXiv](https://arxiv.org/abs/2302.01131)","comments_url":"https://lobste.rs/s/slow6n/attack_on_speculative_vectorization","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95286,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["hardware","pdf","security"]},{"short_id":"nmmjr3","short_id_url":"https://lobste.rs/s/nmmjr3","created_at":"2023-02-03T14:28:09.000-06:00","title":"SPECWANDS: An Efficient Priority-based Scheduler Against Speculation Contention Attacks","url":"https://arxiv.org/pdf/2302.00947.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eTransient Execution Attacks (TEAs) have gradually become a major security threat to modern high-performance processors. They exploit the vulnerability of speculative execution to illegally access private data, and transmit them through timing-based covert channels. While new vulnerabilities are discovered continuously, the covert channels can be categorised to two types: 1) Persistent Type, in which covert channels are based on the layout changes of buffering, e.g. through caches or TLBs; 2) Volatile Type, in which covert channels are based on the contention of sharing resources, e.g. through execution units or issuing ports. The defenses against the persistent-type covert channels have been well addressed, while those for the volatile-type are still rather inadequate. Existing mitigation schemes for the volatile type such as Speculative Compression and Time-Division-Multiplexing will introduce significant overhead due to the need to stall the pipeline or to disallow resource sharing. In this paper, we look into such attacks and defenses with a new perspective, and propose a scheduling-based mitigation scheme, called SPECWANDS. It consists of three priority-based scheduling policies to prevent an attacker from transmitting the secret in different contention situations. SPECWANDS not only can defend against both inter-thread and intra-thread based attacks, but also can keep most of the performance benefit from speculative execution and resource-sharing. We evaluate its runtime overhead on SPEC 2006/2017 benchmarks. The experimental results show that SPECWANDS has a significant performance advantage (3%-5%) over the other two representative schemes.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2302.00947\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Transient Execution Attacks (TEAs) have gradually become a major security threat to modern high-performance processors. They exploit the vulnerability of speculative execution to illegally access private data, and transmit them through timing-based covert channels. While new vulnerabilities are discovered continuously, the covert channels can be categorised to two types: 1) Persistent Type, in which covert channels are based on the layout changes of buffering, e.g. through caches or TLBs; 2) Volatile Type, in which covert channels are based on the contention of sharing resources, e.g. through execution units or issuing ports. The defenses against the persistent-type covert channels have been well addressed, while those for the volatile-type are still rather inadequate. Existing mitigation schemes for the volatile type such as Speculative Compression and Time-Division-Multiplexing will introduce significant overhead due to the need to stall the pipeline or to disallow resource sharing. In this paper, we look into such attacks and defenses with a new perspective, and propose a scheduling-based mitigation scheme, called SPECWANDS. It consists of three priority-based scheduling policies to prevent an attacker from transmitting the secret in different contention situations. SPECWANDS not only can defend against both inter-thread and intra-thread based attacks, but also can keep most of the performance benefit from speculative execution and resource-sharing. We evaluate its runtime overhead on SPEC 2006/2017 benchmarks. The experimental results show that SPECWANDS has a significant performance advantage (3%-5%) over the other two representative schemes. \r\n\r\n[arXiv](https://arxiv.org/abs/2302.00947)","comments_url":"https://lobste.rs/s/nmmjr3/specwands_efficient_priority_based","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95286,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["hardware","pdf","security"]},{"short_id":"ymj9z8","short_id_url":"https://lobste.rs/s/ymj9z8","created_at":"2023-02-03T14:27:06.000-06:00","title":"SSO-MONITOR: Fully-Automatic Large-Scale Landscape, Security, \u0026 Privacy Analyses of SSO in the Wild","url":"https://arxiv.org/pdf/2302.01024.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eSingle Sign-On (SSO) shifts the crucial authentication process on a website to to the underlying SSO protocols and their correct implementation. To strengthen SSO security, organizations, such as IETF and W3C, maintain advisories to address known threats. One could assume that these security best practices are widely deployed on websites. We show that this assumption is a fallacy. We present SSO-MONITOR, an open-source fully-automatic large-scale SSO landscape, security, and privacy analysis tool. In contrast to all previous work, SSO-MONITOR uses a highly extensible, fully automated workflow with novel visual-based SSO detection techniques, enhanced security and privacy analyses, and continuously updated monitoring results. It receives a list of domains as input to discover the login pages, recognize the supported Identity Providers (IdPs), and execute the SSO. It further reveals the current security level of SSO in the wild compared to the security best practices on paper. With SSO-MONITOR, we automatically identified 1,632 websites with 3,020 Apple, Facebook, or Google logins within the Tranco 10k. Our continuous monitoring also revealed how quickly these numbers change over time. SSO-MONITOR can automatically login to each SSO website. It records the logins by tracing HTTP and in-browser communication to detect widespread security and privacy issues automatically. We introduce a novel deep-level inspection of HTTP parameters that we call SMARTPARMS. Using SMARTPARMS for security analyses, we uncovered URL parameters in 5 Client Application (Client) secret leakages and 337 cases with weak CSRF protection. We additionally identified 447 cases with no CSRF protection, 342 insecure SSO flows and 9 cases with nested URL parameters, leading to an open redirect in one case. SSO-MONITOR reveals privacy leakages that deanonymize users in 200 cases.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2302.01024\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Single Sign-On (SSO) shifts the crucial authentication process on a website to to the underlying SSO protocols and their correct implementation. To strengthen SSO security, organizations, such as IETF and W3C, maintain advisories to address known threats. One could assume that these security best practices are widely deployed on websites. We show that this assumption is a fallacy. We present SSO-MONITOR, an open-source fully-automatic large-scale SSO landscape, security, and privacy analysis tool. In contrast to all previous work, SSO-MONITOR uses a highly extensible, fully automated workflow with novel visual-based SSO detection techniques, enhanced security and privacy analyses, and continuously updated monitoring results. It receives a list of domains as input to discover the login pages, recognize the supported Identity Providers (IdPs), and execute the SSO. It further reveals the current security level of SSO in the wild compared to the security best practices on paper. With SSO-MONITOR, we automatically identified 1,632 websites with 3,020 Apple, Facebook, or Google logins within the Tranco 10k. Our continuous monitoring also revealed how quickly these numbers change over time. SSO-MONITOR can automatically login to each SSO website. It records the logins by tracing HTTP and in-browser communication to detect widespread security and privacy issues automatically. We introduce a novel deep-level inspection of HTTP parameters that we call SMARTPARMS. Using SMARTPARMS for security analyses, we uncovered URL parameters in 5 Client Application (Client) secret leakages and 337 cases with weak CSRF protection. We additionally identified 447 cases with no CSRF protection, 342 insecure SSO flows and 9 cases with nested URL parameters, leading to an open redirect in one case. SSO-MONITOR reveals privacy leakages that deanonymize users in 200 cases. \r\n\r\n[arXiv](https://arxiv.org/abs/2302.01024)","comments_url":"https://lobste.rs/s/ymj9z8/sso_monitor_fully_automatic_large_scale","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95286,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["pdf","privacy","web"]},{"short_id":"7zhs2e","short_id_url":"https://lobste.rs/s/7zhs2e","created_at":"2023-02-03T14:26:06.000-06:00","title":"Protecting Cache States Against Both Speculative Execution Attacks and Side-channel Attacks","url":"https://arxiv.org/pdf/2302.00732","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eCache side-channel attacks and speculative execution attacks that leak information through cache states are stealthy and dangerous attacks on hardware that must be mitigated. Unfortunately, defenses proposed for cache side-channel attacks do not mitigate all cache-based speculative execution attacks and vice versa. Since both classes of attacks must be addressed, we propose comprehensive cache architectures to do this.\u003c/p\u003e\n\u003cp\u003eWe show a framework to analyze the security of a secure cache. We identify same-domain speculative execution attacks, and show they evade cache side-channel defenses. We present new hardware security mechanisms that address target attacks and reduce performance overhead. We design two Speculative and Timing Attack Resilient (STAR) caches that defeat both cache side-channel attacks and cache-based speculative execution attacks. These comprehensive defenses have low performance overhead of 6.6% and 8.8%.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2302.00732\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Cache side-channel attacks and speculative execution attacks that leak information through cache states are stealthy and dangerous attacks on hardware that must be mitigated. Unfortunately, defenses proposed for cache side-channel attacks do not mitigate all cache-based speculative execution attacks and vice versa. Since both classes of attacks must be addressed, we propose comprehensive cache architectures to do this.\r\n\r\nWe show a framework to analyze the security of a secure cache. We identify same-domain speculative execution attacks, and show they evade cache side-channel defenses. We present new hardware security mechanisms that address target attacks and reduce performance overhead. We design two Speculative and Timing Attack Resilient (STAR) caches that defeat both cache side-channel attacks and cache-based speculative execution attacks. These comprehensive defenses have low performance overhead of 6.6% and 8.8%. \r\n\r\n[arXiv](https://arxiv.org/abs/2302.00732)","comments_url":"https://lobste.rs/s/7zhs2e/protecting_cache_states_against_both","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95286,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["pdf","security"]},{"short_id":"nartfk","short_id_url":"https://lobste.rs/s/nartfk","created_at":"2023-02-03T13:51:50.000-06:00","title":"Happy Groundhog Day, The AI Edition","url":"https://garymarcus.substack.com/p/happy-groundhog-day-the-ai-edition","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nartfk/happy_groundhog_day_ai_edition","submitter_user":{"username":"quobit","created_at":"2016-06-18T01:45:38.000-05:00","is_admin":false,"about":"CS teacher (Secondary and Vocational Training)\r\nValencia (Spain)","is_moderator":false,"karma":1778,"avatar_url":"/avatars/quobit-100.png","invited_by_user":"JordiGH","github_username":"quobit","twitter_username":"quobit","keybase_signatures":[{"kb_username":"quobit","sig_hash":"679493a0112171c64db0aadffa1d4c904710b2dbd1b2d351dedaed4907d8c7340f"}]},"tags":["ai"]},{"short_id":"xtzrwc","short_id_url":"https://lobste.rs/s/xtzrwc","created_at":"2023-02-03T13:39:52.000-06:00","title":"How I added C-style for-loops to Python","url":"https://sadh.life/post/cursed-for/","score":11,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xtzrwc/how_i_added_c_style_for_loops_python","submitter_user":{"username":"fs111","created_at":"2017-01-04T07:51:28.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":4850,"avatar_url":"/avatars/fs111-100.png","invited_by_user":"drdoom","github_username":"fs111","twitter_username":"fs111"},"tags":["python"]},{"short_id":"sa4es7","short_id_url":"https://lobste.rs/s/sa4es7","created_at":"2023-02-03T11:43:06.000-06:00","title":"Nostr: A social network for the decentralized era","url":"https://nostr-how.vercel.app/","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sa4es7/nostr_social_network_for_decentralized","submitter_user":{"username":"srid","created_at":"2019-12-15T08:34:41.000-06:00","is_admin":false,"about":"My latest project: https://github.com/EmaApps/emanote","is_moderator":false,"karma":2643,"avatar_url":"/avatars/srid-100.png","invited_by_user":"Bowero","github_username":"srid","keybase_signatures":[{"kb_username":"srid","sig_hash":"e6701544d15d41cd50cf0b336aa711802c34f53d1df4356ae74f47b9aec5c6700f"}]},"tags":["web"]},{"short_id":"zehawm","short_id_url":"https://lobste.rs/s/zehawm","created_at":"2023-02-03T11:18:20.000-06:00","title":"Configuring Emacs for MDX files","url":"https://tailscale.dev/blog/configuring-emacs-mdx","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zehawm/configuring_emacs_for_mdx_files","submitter_user":{"username":"gmem","created_at":"2021-02-05T16:55:24.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":473,"avatar_url":"/avatars/gmem-100.png","invited_by_user":"Slackwise","github_username":"gmemstr","twitter_username":"gmem_"},"tags":["emacs"]},{"short_id":"fmxp81","short_id_url":"https://lobste.rs/s/fmxp81","created_at":"2023-02-03T11:12:35.000-06:00","title":"Spritely Institute launches Guile Scheme -\u003e WASM direct compilation project","url":"https://spritely.institute/news/guile-on-web-assembly-project-underway.html","score":14,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fmxp81/spritely_institute_launches_guile","submitter_user":{"username":"dustyweb","created_at":"2016-04-14T14:27:23.000-05:00","is_admin":false,"about":"Free software activist, (co-)founder MediaGoblin, 8sync, etc.","is_moderator":false,"karma":976,"avatar_url":"/avatars/dustyweb-100.png","invited_by_user":"antifuchs"},"tags":["compilers","lisp","wasm"]},{"short_id":"nwnczc","short_id_url":"https://lobste.rs/s/nwnczc","created_at":"2023-02-03T11:04:26.000-06:00","title":"Serious Security Hole Plugged in Infosec Tool \"binwalk\"","url":"https://portswigger.net/daily-swig/serious-security-hole-plugged-in-infosec-tool-binwalk","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nwnczc/serious_security_hole_plugged_infosec","submitter_user":{"username":"eBPF","created_at":"2023-01-25T09:58:16.000-06:00","is_admin":false,"about":"[ersei.net](https://ersei.net)","is_moderator":false,"karma":37,"avatar_url":"/avatars/eBPF-100.png","invited_by_user":"oats"},"tags":["security"]},{"short_id":"mfszwo","short_id_url":"https://lobste.rs/s/mfszwo","created_at":"2023-02-03T10:36:50.000-06:00","title":"The Decree Design Pattern","url":"https://calebhearth.com/l/decree","score":5,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mfszwo/decree_design_pattern","submitter_user":{"username":"calebhearth","created_at":"2014-12-03T10:10:07.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":223,"avatar_url":"/avatars/calebhearth-100.png","invited_by_user":"derekprior","github_username":"calebhearth","twitter_username":"caleb_hearth"},"tags":["ruby"]},{"short_id":"2wv1e3","short_id_url":"https://lobste.rs/s/2wv1e3","created_at":"2023-02-03T09:23:05.000-06:00","title":"Polymorphic, Recursive Interfaces Using Go Generics","url":"https://multithreaded.stitchfix.com/blog/2023/02/01/go-polymorphic-interfaces/","score":4,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2wv1e3/polymorphic_recursive_interfaces_using","submitter_user":{"username":"soulcutter","created_at":"2014-02-18T10:29:29.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":3383,"avatar_url":"/avatars/soulcutter-100.png","invited_by_user":"gabriel","twitter_username":"soulcutter"},"tags":["go"]},{"short_id":"nsnzb5","short_id_url":"https://lobste.rs/s/nsnzb5","created_at":"2023-02-03T08:33:51.000-06:00","title":"Hypermedia Clients","url":"https://htmx.org/essays/hypermedia-clients/","score":15,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nsnzb5/hypermedia_clients","submitter_user":{"username":"1cg","created_at":"2022-07-19T14:41:27.000-05:00","is_admin":false,"about":"intercoolerjs.org\r\nhtmx.org\r\nhyperscript.org\r\n","is_moderator":false,"karma":215,"avatar_url":"/avatars/1cg-100.png","invited_by_user":"ocharles"},"tags":["web"]},{"short_id":"wk4i9r","short_id_url":"https://lobste.rs/s/wk4i9r","created_at":"2023-02-03T06:55:09.000-06:00","title":"Scryer Prolog","url":"https://www.scryer.pl","score":13,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wk4i9r/scryer_prolog","submitter_user":{"username":"aarroyoc","created_at":"2020-01-25T16:27:21.000-06:00","is_admin":false,"about":"Illuminati developer. I talk mostly about Prolog, Mercury, Logtalk and logic programming in general","is_moderator":false,"karma":613,"avatar_url":"/avatars/aarroyoc-100.png","invited_by_user":"zxtx","github_username":"aarroyoc","twitter_username":"aarroyoca"},"tags":["programming"]},{"short_id":"zttreu","short_id_url":"https://lobste.rs/s/zttreu","created_at":"2023-02-03T06:28:57.000-06:00","title":"What are you doing this weekend?","url":"","score":9,"flags":0,"comment_count":22,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it‚Äôs more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it‚Äôs more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/zttreu/what_are_you_doing_this_weekend","submitter_user":{"username":"caius","created_at":"2014-05-13T06:58:30.000-05:00","is_admin":false,"about":"Compulsive Geek, Ale Connoisseur, Occasionally Responsible Adult.","is_moderator":false,"karma":8558,"avatar_url":"/avatars/caius-100.png","invited_by_user":"lauris","github_username":"caius","twitter_username":"Caius"},"tags":["ask","programming"]},{"short_id":"fyhpyn","short_id_url":"https://lobste.rs/s/fyhpyn","created_at":"2023-02-03T06:08:48.000-06:00","title":"Reversing UK mobile rail tickets","url":"https://eta.st/2023/01/31/rail-tickets.html","score":40,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fyhpyn/reversing_uk_mobile_rail_tickets","submitter_user":{"username":"eta","created_at":"2018-06-23T10:10:27.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":557,"avatar_url":"/avatars/eta-100.png","invited_by_user":"river","github_username":"eeeeeta","twitter_username":"eeeeeta9"},"tags":["reversing"]},{"short_id":"a7kyr8","short_id_url":"https://lobste.rs/s/a7kyr8","created_at":"2023-02-03T04:00:01.000-06:00","title":"How to almost build an E2EE local-first app","url":"https://www.zaynetro.com/post/how-to-build-e2ee-local-first-app/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/a7kyr8/how_almost_build_e2ee_local_first_app","submitter_user":{"username":"zaynetro","created_at":"2020-10-05T07:39:23.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":203,"avatar_url":"/avatars/zaynetro-100.png","invited_by_user":"arcatan"},"tags":["distributed","rust","security"]},{"short_id":"bx1ogg","short_id_url":"https://lobste.rs/s/bx1ogg","created_at":"2023-02-03T03:18:55.000-06:00","title":"Improving Rust compile times to enable adoption of memory safety","url":"https://www.memorysafety.org/blog/remy-rakic-compile-times/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bx1ogg/improving_rust_compile_times_enable","submitter_user":{"username":"msfjarvis","created_at":"2020-04-24T11:41:56.000-05:00","is_admin":false,"about":"Android and Kotlin developer\r\n","is_moderator":false,"karma":795,"avatar_url":"/avatars/msfjarvis-100.png","invited_by_user":"Amolith","github_username":"msfjarvis","twitter_username":"msfjarvis"},"tags":["rust"]}]