[{"short_id":"v8edeu","short_id_url":"https://lobste.rs/s/v8edeu","created_at":"2023-01-26T22:56:43.000-06:00","title":"Cyber is a new language for fast, efficient, and concurrent scripting","url":"https://cyberscript.dev/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/v8edeu/cyber_is_new_language_for_fast_efficient","submitter_user":{"username":"jado","created_at":"2019-08-06T03:14:15.000-05:00","is_admin":false,"about":"Software Engineer, CompSci Grad Student (researching ML)\r\n\r\nloves plt, compilers, ml, rust\r\n\r\n[Website](https://jadon.io) | [GitHub](https://github.com/phase) | [LinkedIn](https://www.linkedin.com/in/jado/)","is_moderator":false,"karma":903,"avatar_url":"/avatars/jado-100.png","invited_by_user":"BruceM","github_username":"phase"},"tags":["plt"]},{"short_id":"xavaff","short_id_url":"https://lobste.rs/s/xavaff","created_at":"2023-01-26T22:05:54.000-06:00","title":"Designing a 6809 SBC","url":"https://jbevren.wordpress.com/2018/09/22/designing-a-6809-sbc/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xavaff/designing_6809_sbc","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95239,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["hardware"]},{"short_id":"jomka2","short_id_url":"https://lobste.rs/s/jomka2","created_at":"2023-01-26T21:31:05.000-06:00","title":"Announcing Rust 1.67.0","url":"https://blog.rust-lang.org/2023/01/26/Rust-1.67.0.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jomka2/announcing_rust_1_67_0","submitter_user":{"username":"jmillikin","created_at":"2021-07-22T09:39:26.000-05:00","is_admin":false,"about":"Currently semi-retired; formerly at Google (2011-2017) and Stripe (2017-2022)","is_moderator":false,"karma":803,"avatar_url":"/avatars/jmillikin-100.png","invited_by_user":"pushcx"},"tags":["release","rust"]},{"short_id":"ptsbvp","short_id_url":"https://lobste.rs/s/ptsbvp","created_at":"2023-01-26T21:16:29.000-06:00","title":"The Galaga no-fire-cheat mystery (2012)","url":"https://jasoneckert.github.io/myblog/the-galaga-no-fire-cheat-mystery/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ptsbvp/galaga_no_fire_cheat_mystery_2012","submitter_user":{"username":"classichasclass","created_at":"2018-11-05T18:45:47.000-06:00","is_admin":false,"about":"no you're off topic","is_moderator":false,"karma":2793,"avatar_url":"/avatars/classichasclass-100.png","invited_by_user":"sevan"},"tags":["games","historical"]},{"short_id":"acuz31","short_id_url":"https://lobste.rs/s/acuz31","created_at":"2023-01-26T21:00:57.000-06:00","title":"CVE-2023-23504: XNU Heap Underwrite in dlil.c","url":"https://adamdoupe.com/blog/2023/01/23/cve-2023-23504-xnu-heap-underwrite-in-dlil-dot-c/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/acuz31/cve_2023_23504_xnu_heap_underwrite_dlil_c","submitter_user":{"username":"fro","created_at":"2016-04-13T15:27:31.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1663,"avatar_url":"/avatars/fro-100.png","invited_by_user":"xero"},"tags":["ios","mac","security"]},{"short_id":"k9knr3","short_id_url":"https://lobste.rs/s/k9knr3","created_at":"2023-01-26T19:23:29.000-06:00","title":"All you need is higher kinded types","url":"https://las.rs/blog/all-you-need-is-hkt-s.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/k9knr3/all_you_need_is_higher_kinded_types","submitter_user":{"username":"srid","created_at":"2019-12-15T08:34:41.000-06:00","is_admin":false,"about":"My latest project: https://github.com/EmaApps/emanote","is_moderator":false,"karma":2632,"avatar_url":"/avatars/srid-100.png","invited_by_user":"Bowero","github_username":"srid","keybase_signatures":[{"kb_username":"srid","sig_hash":"e6701544d15d41cd50cf0b336aa711802c34f53d1df4356ae74f47b9aec5c6700f"}]},"tags":["haskell"]},{"short_id":"y5cqa4","short_id_url":"https://lobste.rs/s/y5cqa4","created_at":"2023-01-26T19:23:16.000-06:00","title":"Announcing TypeScript 5.0 Beta","url":"https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/y5cqa4/announcing_typescript_5_0_beta","submitter_user":{"username":"adamshaylor","created_at":"2020-10-26T20:04:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1951,"avatar_url":"/avatars/adamshaylor-100.png","invited_by_user":"peterc","github_username":"adamshaylor","keybase_signatures":[{"kb_username":"adamshaylor","sig_hash":"0ebd1a3d88d97f20922147a75889dfcae02b632d94156b9315a6d93384ae2e4f0f"}]},"tags":["javascript"]},{"short_id":"24cb5e","short_id_url":"https://lobste.rs/s/24cb5e","created_at":"2023-01-26T18:09:06.000-06:00","title":"SQLAlchemy 2.0 released","url":"https://www.sqlalchemy.org/blog/2023/01/26/sqlalchemy-2.0.0-released/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/24cb5e/sqlalchemy_2_0_released","submitter_user":{"username":"jmillikin","created_at":"2021-07-22T09:39:26.000-05:00","is_admin":false,"about":"Currently semi-retired; formerly at Google (2011-2017) and Stripe (2017-2022)","is_moderator":false,"karma":803,"avatar_url":"/avatars/jmillikin-100.png","invited_by_user":"pushcx"},"tags":["databases","python","release"]},{"short_id":"mhnhtm","short_id_url":"https://lobste.rs/s/mhnhtm","created_at":"2023-01-26T18:04:57.000-06:00","title":"How a CPU works: Bare metal C on a RISC-V toy CPU","url":"https://florian.noeding.com/posts/risc-v-toy-cpu/cpu-from-scratch/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mhnhtm/how_cpu_works_bare_metal_c_on_risc_v_toy_cpu","submitter_user":{"username":"jmillikin","created_at":"2021-07-22T09:39:26.000-05:00","is_admin":false,"about":"Currently semi-retired; formerly at Google (2011-2017) and Stripe (2017-2022)","is_moderator":false,"karma":803,"avatar_url":"/avatars/jmillikin-100.png","invited_by_user":"pushcx"},"tags":["c","hardware"]},{"short_id":"jftqeg","short_id_url":"https://lobste.rs/s/jftqeg","created_at":"2023-01-26T17:40:39.000-06:00","title":"A user's guide to the zairja of the world","url":"https://samkriss.substack.com/p/a-users-guide-to-the-zairja-of-the","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jftqeg/user_s_guide_zairja_world","submitter_user":{"username":"hwayne","created_at":"2016-12-01T13:09:45.000-06:00","is_admin":false,"about":"I'm a programmer in the Chicago area. I like writing about weird programming techniques. Outside of programming I'm an avid juggler and chocolatier.","is_moderator":false,"karma":25321,"avatar_url":"/avatars/hwayne-100.png","invited_by_user":"flyingfisch","github_username":"hwayne","twitter_username":"Hillelogram"},"tags":["ai","philosophy"]},{"short_id":"xwgdnc","short_id_url":"https://lobste.rs/s/xwgdnc","created_at":"2023-01-26T17:01:06.000-06:00","title":"Trellix patches 61,000 vulnerable open-source projects","url":"https://www.trellix.com/en-us/about/newsroom/stories/research/trellix-advanced-research-center-patches-vulnerable-open-source-projects.html","score":3,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xwgdnc/trellix_patches_61_000_vulnerable_open","submitter_user":{"username":"JulianWgs","created_at":"2020-09-24T14:54:13.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1025,"avatar_url":"/avatars/JulianWgs-100.png","invited_by_user":"355E3B","github_username":"JulianWgs"},"tags":["python","security"]},{"short_id":"msupzv","short_id_url":"https://lobste.rs/s/msupzv","created_at":"2023-01-26T17:00:03.000-06:00","title":"VE Text Editor for DOS, Linux, Mac OS X/ppc","url":"http://www.inverary.net/ve/ve.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/msupzv/ve_text_editor_for_dos_linux_mac_os_x_ppc","submitter_user":{"username":"classichasclass","created_at":"2018-11-05T18:45:47.000-06:00","is_admin":false,"about":"no you're off topic","is_moderator":false,"karma":2793,"avatar_url":"/avatars/classichasclass-100.png","invited_by_user":"sevan"},"tags":["historical"]},{"short_id":"aapimf","short_id_url":"https://lobste.rs/s/aapimf","created_at":"2023-01-26T16:19:01.000-06:00","title":"Test setup and teardown in Rust without a framework","url":"https://scribe.rip/@ericdreichert/test-setup-and-teardown-in-rust-without-a-framework-ba32d97aa5ab","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/aapimf/test_setup_teardown_rust_without","submitter_user":{"username":"jalcine","created_at":"2018-03-26T23:38:48.000-05:00","is_admin":false,"about":"A Black man in Oakland from Haiti by way of New York.\r\n\r\nLearn about me at https://jacky.wtf/.","is_moderator":false,"karma":426,"avatar_url":"/avatars/jalcine-100.png","invited_by_user":"0x2ba22e11","github_username":"jalcine","twitter_username":"jackyalcine","keybase_signatures":[{"kb_username":"jackyalcine","sig_hash":"3023073092d150ea69da78a3283b448240c88c90df69af857980591d239fc72d0f"}]},"tags":["rust","testing"]},{"short_id":"f4ihkz","short_id_url":"https://lobste.rs/s/f4ihkz","created_at":"2023-01-26T15:43:22.000-06:00","title":"Breaking Bad: Quantifying the Addiction of Web Elements to JavaScript","url":"https://arxiv.org/pdf/2301.10597","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eWhile JavaScript established itself as a cornerstone of the modern web, it also constitutes a major tracking and security vector, thus raising critical privacy and security concerns. In this context, some browser extensions propose to systematically block scripts reported by crowdsourced trackers lists. However, this solution heavily depends on the quality of these built-in lists, which may be deprecated or incomplete, thus exposing the visitor to unknown trackers. In this paper, we explore a different strategy, by investigating the benefits of disabling JavaScript in the browser. More specifically, by adopting such a strict policy, we aim to quantify the JavaScript addiction of web elements composing a web page, through the observation of web breakages. As there is no standard mechanism for detecting such breakages, we introduce a framework to inspect several page features when blocking JavaScript, that we deploy to analyze 6,384 pages, including landing and internal web pages. We discover that 43% of web pages are not strictly dependent on JavaScript and that more than 67% of pages are likely to be usable as long as the visitor only requires the content from the main section of the page, for which the user most likely reached the page, while reducing the number of tracking requests by 85% on average. Finally, we discuss the viability of currently browsing the web without JavaScript and detail multiple incentives for websites to be kept usable without JavaScript.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2301.10597\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"While JavaScript established itself as a cornerstone of the modern web, it also constitutes a major tracking and security vector, thus raising critical privacy and security concerns. In this context, some browser extensions propose to systematically block scripts reported by crowdsourced trackers lists. However, this solution heavily depends on the quality of these built-in lists, which may be deprecated or incomplete, thus exposing the visitor to unknown trackers. In this paper, we explore a different strategy, by investigating the benefits of disabling JavaScript in the browser. More specifically, by adopting such a strict policy, we aim to quantify the JavaScript addiction of web elements composing a web page, through the observation of web breakages. As there is no standard mechanism for detecting such breakages, we introduce a framework to inspect several page features when blocking JavaScript, that we deploy to analyze 6,384 pages, including landing and internal web pages. We discover that 43% of web pages are not strictly dependent on JavaScript and that more than 67% of pages are likely to be usable as long as the visitor only requires the content from the main section of the page, for which the user most likely reached the page, while reducing the number of tracking requests by 85% on average. Finally, we discuss the viability of currently browsing the web without JavaScript and detail multiple incentives for websites to be kept usable without JavaScript. \r\n\r\n[arXiv](https://arxiv.org/abs/2301.10597)","comments_url":"https://lobste.rs/s/f4ihkz/breaking_bad_quantifying_addiction_web","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95239,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["javascript","pdf","web"]},{"short_id":"jsoics","short_id_url":"https://lobste.rs/s/jsoics","created_at":"2023-01-26T15:42:19.000-06:00","title":"A survey of Digital Manufacturing Hardware and Software Trojans","url":"https://arxiv.org/pdf/2301.10336.pdf","score":2,"flags":0,"comment_count":0,"description":"\u003cp\u003eDigital Manufacturing (DM) refers to the on-going adoption of smarter, more agile manufacturing processes and cyber-physical systems. This includes modern techniques and technologies such as Additive Manufacturing (AM)/3D printing, as well as the Industrial Internet of Things (IIoT) and the broader trend toward Industry 4.0. However, this adoption is not without risks: with a growing complexity and connectivity, so too grows the cyber-physical attack surface. Here, malicious actors might seek to steal sensitive information or sabotage products or production lines, causing financial and reputational loss. Of particular concern are where such malicious attacks may enter the complex supply chains of DM systems as Trojans – malicious modifications that may trigger their payloads at later times or stages of the product lifecycle.\u003c/p\u003e\n\u003cp\u003eIn this work, we thus present a comprehensive overview of the threats posed by Trojans in Digital Manufacturing. We cover both hardware and software Trojans which may exist in products or their production and supply lines. From this, we produce a novel taxonomy for classifying and analyzing these threats, and elaborate on how different side channels (e.g. visual, thermal, acoustic, power, and magnetic) may be used to either enhance the impact of a given Trojan or utilized as part of a defensive strategy. Other defenses are also presented – including hardware, web-, and software-related. To conclude, we discuss seven different case studies and elaborate how they fit into our taxonomy. Overall, this paper presents a detailed survey of the Trojan landscape for Digital Manufacturing: threats, defenses, and the importance of implementing secure practices.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2301.10336\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Digital Manufacturing (DM) refers to the on-going adoption of smarter, more agile manufacturing processes and cyber-physical systems. This includes modern techniques and technologies such as Additive Manufacturing (AM)/3D printing, as well as the Industrial Internet of Things (IIoT) and the broader trend toward Industry 4.0. However, this adoption is not without risks: with a growing complexity and connectivity, so too grows the cyber-physical attack surface. Here, malicious actors might seek to steal sensitive information or sabotage products or production lines, causing financial and reputational loss. Of particular concern are where such malicious attacks may enter the complex supply chains of DM systems as Trojans -- malicious modifications that may trigger their payloads at later times or stages of the product lifecycle.\r\n\r\nIn this work, we thus present a comprehensive overview of the threats posed by Trojans in Digital Manufacturing. We cover both hardware and software Trojans which may exist in products or their production and supply lines. From this, we produce a novel taxonomy for classifying and analyzing these threats, and elaborate on how different side channels (e.g. visual, thermal, acoustic, power, and magnetic) may be used to either enhance the impact of a given Trojan or utilized as part of a defensive strategy. Other defenses are also presented -- including hardware, web-, and software-related. To conclude, we discuss seven different case studies and elaborate how they fit into our taxonomy. Overall, this paper presents a detailed survey of the Trojan landscape for Digital Manufacturing: threats, defenses, and the importance of implementing secure practices. \r\n\r\n[arXiv](https://arxiv.org/abs/2301.10336)","comments_url":"https://lobste.rs/s/jsoics/survey_digital_manufacturing_hardware","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95239,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["pdf","security"]},{"short_id":"mbchar","short_id_url":"https://lobste.rs/s/mbchar","created_at":"2023-01-26T15:11:39.000-06:00","title":"Post to email: supporting contact forms for static websites","url":"https://github.com/matthiasmullie/post-to-email","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mbchar/post_email_supporting_contact_forms_for","submitter_user":{"username":"matthiasmullie","created_at":"2014-11-21T12:51:09.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":7,"avatar_url":"/avatars/matthiasmullie-100.png","invited_by_user":"JeremyMorgan"},"tags":["email","php","release","web"]},{"short_id":"8mnx1e","short_id_url":"https://lobste.rs/s/8mnx1e","created_at":"2023-01-26T14:27:35.000-06:00","title":"Fallible - The Lost Sibling of Result and Option","url":"https://datavirke.dk/posts/fallible-missing-rust-error-handling/","score":8,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8mnx1e/fallible_lost_sibling_result_option","submitter_user":{"username":"robey","created_at":"2013-12-19T22:12:04.000-06:00","is_admin":false,"about":"Hi, I'm Robey. Generally interested in crypto, programming languages, and distributed systems.\r\n\r\n- fediverse: @robey@messydesk.social\r\n- gitea: https://code.lag.net/robey/\r\n","is_moderator":false,"karma":1705,"avatar_url":"/avatars/robey-100.png","invited_by_user":"seldo","github_username":"robey"},"tags":["rust"]},{"short_id":"tkplxs","short_id_url":"https://lobste.rs/s/tkplxs","created_at":"2023-01-26T13:58:01.000-06:00","title":"Too many words about Rust's function syntax","url":"https://steveklabnik.com/writing/too-many-words-about-rusts-function-syntax","score":18,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tkplxs/too_many_words_about_rust_s_function","submitter_user":{"username":"jado","created_at":"2019-08-06T03:14:15.000-05:00","is_admin":false,"about":"Software Engineer, CompSci Grad Student (researching ML)\r\n\r\nloves plt, compilers, ml, rust\r\n\r\n[Website](https://jadon.io) | [GitHub](https://github.com/phase) | [LinkedIn](https://www.linkedin.com/in/jado/)","is_moderator":false,"karma":903,"avatar_url":"/avatars/jado-100.png","invited_by_user":"BruceM","github_username":"phase"},"tags":["plt","rust"]},{"short_id":"pvwcvo","short_id_url":"https://lobste.rs/s/pvwcvo","created_at":"2023-01-26T13:02:12.000-06:00","title":"Some Rust breaking changes don't require a major version","url":"https://predr.ag/blog/some-rust-breaking-changes-do-not-require-major-version/","score":15,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pvwcvo/some_rust_breaking_changes_don_t_require","submitter_user":{"username":"predrag","created_at":"2022-08-30T12:00:46.000-05:00","is_admin":false,"about":"Principal Eng @ Kensho\r\n\r\nTwitter: https://twitter.com/PredragGruevski\r\n\r\nBlog: https://predr.ag/blog/\r\n\r\nTalks: https://predr.ag/talks/\r\n\r\nCurrent most exciting projects:\r\n- https://github.com/obi1kenobi/trustfall\r\n- https://github.com/obi1kenobi/cargo-semver-check","is_moderator":false,"karma":86,"avatar_url":"/avatars/predrag-100.png","invited_by_user":"hwayne","github_username":"obi1kenobi"},"tags":["rust"]},{"short_id":"ejm3wl","short_id_url":"https://lobste.rs/s/ejm3wl","created_at":"2023-01-26T12:20:34.000-06:00","title":"librandombytes: API for applications generating fresh randomness","url":"https://randombytes.cr.yp.to/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ejm3wl/librandombytes_api_for_applications","submitter_user":{"username":"atoponce","created_at":"2018-05-27T14:17:15.000-05:00","is_admin":false,"about":"Security researcher, amateur cryptographer, password enthusiast, Linux system administrator. I'm the one who what3words threatened with legal action for sharing the WhatFreeWords JavaScript source code.","is_moderator":false,"karma":983,"avatar_url":"/avatars/atoponce-100.png","invited_by_user":"355E3B","github_username":"atoponce","keybase_signatures":[{"kb_username":"atoponce","sig_hash":"c88adc48e09b4c5b8763ff77cf8c207dda6dde0419561cc7f6253efc061ba9c40f"}]},"tags":["cryptography"]},{"short_id":"uusbha","short_id_url":"https://lobste.rs/s/uusbha","created_at":"2023-01-26T11:57:28.000-06:00","title":"Reverse-engineering the Intel 8086 processor's HALT circuits","url":"https://www.righto.com/2023/01/reverse-engineering-intel-8086.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uusbha/reverse_engineering_intel_8086","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95239,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["hardware","historical","reversing"]},{"short_id":"vudqaw","short_id_url":"https://lobste.rs/s/vudqaw","created_at":"2023-01-26T11:00:15.000-06:00","title":"GitHub - propensive/fury: A build tool for Scala","url":"https://github.com/propensive/fury","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vudqaw/github_propensive_fury_build_tool_for","submitter_user":{"username":"razetime","created_at":"2023-01-21T20:19:34.000-06:00","is_admin":false,"about":"I like Factor, and I like array languages. I work on compilers by day, and I sleep really well at night.","is_moderator":false,"karma":11,"avatar_url":"/avatars/razetime-100.png","invited_by_user":"erg","github_username":"razetime","twitter_username":"razetime"},"tags":["scala"]},{"short_id":"hy3j43","short_id_url":"https://lobste.rs/s/hy3j43","created_at":"2023-01-26T10:28:24.000-06:00","title":"Fun with Gentoo: Why don't we just shuffle those ROP gadgets away?","url":"https://quitesimple.org/page/fun-gentoo-shuffle-rop-gadgets","score":12,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hy3j43/fun_with_gentoo_why_don_t_we_just_shuffle","submitter_user":{"username":"Flow","created_at":"2019-02-25T03:11:56.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":525,"avatar_url":"/avatars/Flow-100.png","invited_by_user":"river","github_username":"Flowdalic"},"tags":["security"]},{"short_id":"0oxcel","short_id_url":"https://lobste.rs/s/0oxcel","created_at":"2023-01-26T10:27:53.000-06:00","title":"Janus' Simulators","url":"https://astralcodexten.substack.com/p/janus-simulators","score":3,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/0oxcel/janus_simulators","submitter_user":{"username":"snej","created_at":"2020-01-26T19:05:30.000-06:00","is_admin":false,"about":"Mobile Architect at Couchbase. Apple veteran, 1991-2007 (iChat, Safari, Java, OpenDoc, AppleScript.)\r\nBragging rights: I came up with the speech bubbles that most chat GUIs use nowadays.\r\nIn my spare time I play guitar and buy synthesizers.","is_moderator":false,"karma":7597,"avatar_url":"/avatars/snej-100.png","invited_by_user":"bbrks","github_username":"snej"},"tags":["ai","philosophy"]},{"short_id":"pyrmyn","short_id_url":"https://lobste.rs/s/pyrmyn","created_at":"2023-01-26T09:51:02.000-06:00","title":"I made a multi-language programmable linter","url":"https://github.com/sylver-dev/sylver-cli","score":23,"flags":0,"comment_count":12,"description":"\u003cp\u003eSylver is an open-source multi-language linter that allows the user to define custom rules by using a small built-in query language (\u003ca href=\"https://docs.sylver.dev/docs/dsl/sylq\" rel=\"ugc\"\u003ehttps://docs.sylver.dev/docs/dsl/sylq\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eBesides custom linting rules, the user can add support for an entire programming language by using a custom grammar description language. (more info at \u003ca href=\"https://docs.sylver.dev/docs/dsl/meta-lang\" rel=\"ugc\"\u003ehttps://docs.sylver.dev/docs/dsl/meta-lang\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eI’m in the process of building a registry of rulesets for different languages so that the tool can also be approached as a traditional linter. The first rulesets for Python are available at \u003ca href=\"https://github.com/sylver-dev/rulesets\" rel=\"ugc\"\u003ehttps://github.com/sylver-dev/rulesets\u003c/a\u003e.\u003c/p\u003e\n","description_plain":"Sylver is an open-source multi-language linter that allows the user to define custom rules by using a small built-in query language (https://docs.sylver.dev/docs/dsl/sylq).\r\n\r\nBesides custom linting rules, the user can add support for an entire programming language by using a custom grammar description language. (more info at https://docs.sylver.dev/docs/dsl/meta-lang).\r\n\r\nI'm in the process of building a registry of rulesets for different languages so that the tool can also be approached as a traditional linter. The first rulesets for Python are available at https://github.com/sylver-dev/rulesets.","comments_url":"https://lobste.rs/s/pyrmyn/i_made_multi_language_programmable","submitter_user":{"username":"sevender","created_at":"2022-10-27T03:28:03.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":23,"avatar_url":"/avatars/sevender-100.png","invited_by_user":"spookylukey"},"tags":["python"]}]