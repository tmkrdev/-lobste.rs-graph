[{"short_id":"sw2194","short_id_url":"https://lobste.rs/s/sw2194","created_at":"2023-02-01T22:49:13.000-06:00","title":"Writing a Custom SQLite Function (in C) - Part 1","url":"https://www.openmymind.net/Writing-A-Custom-Sqlite-Function-Part-1/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sw2194/writing_custom_sqlite_function_c_part_1","submitter_user":{"username":"carlmjohnson","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carl M. Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":7689,"avatar_url":"/avatars/carlmjohnson-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson","twitter_username":"carlmjohnson"},"tags":["c","databases"]},{"short_id":"zvrtsw","short_id_url":"https://lobste.rs/s/zvrtsw","created_at":"2023-02-01T22:21:49.000-06:00","title":"How Hype Will Turn Your Security Key Into Junk","url":"https://fy.blackhats.net.au/blog/html/2023/02/02/how_hype_will_turn_your_security_key_into_junk.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zvrtsw/how_hype_will_turn_your_security_key_into","submitter_user":{"username":"pbsds","created_at":"2019-07-10T16:28:57.000-05:00","is_admin":false,"about":"All you need to read is the headline.","is_moderator":false,"karma":308,"avatar_url":"/avatars/pbsds-100.png","invited_by_user":"jornane"},"tags":["security"]},{"short_id":"mtmwpr","short_id_url":"https://lobste.rs/s/mtmwpr","created_at":"2023-02-01T21:40:23.000-06:00","title":"Up to 29,000 unpatched QNAP storage devices are sitting ducks to ransomware","url":"https://arstechnica.com/information-technology/2023/02/thousands-of-qnap-devices-remain-unpatched-against-9-8-severity-vulnerability/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mtmwpr/up_29_000_unpatched_qnap_storage_devices","submitter_user":{"username":"eBPF","created_at":"2023-01-25T09:58:16.000-06:00","is_admin":false,"about":"[ersei.net](https://ersei.net)","is_moderator":false,"karma":21,"avatar_url":"/avatars/eBPF-100.png","invited_by_user":"oats"},"tags":["security"]},{"short_id":"ppj5t8","short_id_url":"https://lobste.rs/s/ppj5t8","created_at":"2023-02-01T21:30:07.000-06:00","title":"Structuring a VLSI System Architecture (1980)","url":"https://ai.eecs.umich.edu/people/conway/VLSI/ClassicDesigns/GeomEng/GeomEng.L2Q80.pdf","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ppj5t8/structuring_vlsi_system_architecture","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["hardware","pdf"]},{"short_id":"yjqdit","short_id_url":"https://lobste.rs/s/yjqdit","created_at":"2023-02-01T18:56:52.000-06:00","title":"JVM Field Guide: Memory","url":"https://serce.me/posts/01-02-2023-jvm-field-guide-memory","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yjqdit/jvm_field_guide_memory","submitter_user":{"username":"serce","created_at":"2021-05-29T09:36:34.000-05:00","is_admin":false,"about":"https://twitter.com/SerCeMan","is_moderator":false,"karma":211,"avatar_url":"/avatars/serce-100.png","invited_by_user":"breandan","github_username":"SerCeMan","twitter_username":"SerCeMan"},"tags":["java"]},{"short_id":"bn3rpf","short_id_url":"https://lobste.rs/s/bn3rpf","created_at":"2023-02-01T17:06:53.000-06:00","title":"Ronin 2.0.0 has finally been released","url":"https://ronin-rb.dev/blog/2023/02/01/ronin-2-0-0-finally-released.html","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bn3rpf/ronin_2_0_0_has_finally_been_released","submitter_user":{"username":"postmodern","created_at":"2014-06-23T16:54:15.000-05:00","is_admin":false,"about":"https://github.com/postmodern/","is_moderator":false,"karma":5,"avatar_url":"/avatars/postmodern-100.png","invited_by_user":"artem"},"tags":["ruby","security"]},{"short_id":"rdtmpn","short_id_url":"https://lobste.rs/s/rdtmpn","created_at":"2023-02-01T16:37:50.000-06:00","title":"Comparing the Top Eight Managed Kubernetes Providers","url":"https://medium.com/@elliotgraebert/comparing-the-top-eight-managed-kubernetes-providers-2ae39662391b","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rdtmpn/comparing_top_eight_managed_kubernetes","submitter_user":{"username":"ammarb","created_at":"2020-06-01T13:23:59.000-05:00","is_admin":false,"about":"Co-founder of Coder.com","is_moderator":false,"karma":0,"avatar_url":"/avatars/ammarb-100.png","invited_by_user":"nhooyr"},"tags":["devops","distributed"]},{"short_id":"lzakrh","short_id_url":"https://lobste.rs/s/lzakrh","created_at":"2023-02-01T16:32:50.000-06:00","title":"RemedyBG is a Windows debugger written using a minimal set of dependencies","url":"https://remedybg.handmade.network","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lzakrh/remedybg_is_windows_debugger_written","submitter_user":{"username":"idrougge","created_at":"2020-03-20T09:40:53.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1966,"avatar_url":"/avatars/idrougge-100.png","invited_by_user":"gerikson"},"tags":["debugging","windows"]},{"short_id":"jsgflc","short_id_url":"https://lobste.rs/s/jsgflc","created_at":"2023-02-01T15:31:50.000-06:00","title":"Void Suck: Lightweight Desktop installer for Void Linux based on the suckless philosophy","url":"https://vs.bt.ht/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jsgflc/void_suck_lightweight_desktop_installer","submitter_user":{"username":"tdarb","created_at":"2022-09-23T07:06:36.000-05:00","is_admin":false,"about":"UX designer / developer passionate about usability and software freedom.","is_moderator":false,"karma":69,"avatar_url":"/avatars/tdarb-100.png","invited_by_user":"galaiko"},"tags":["linux"]},{"short_id":"yq6dgp","short_id_url":"https://lobste.rs/s/yq6dgp","created_at":"2023-02-01T14:58:19.000-06:00","title":"Icicle: A Re-Designed Emulator for Grey-Box Firmware Fuzzing","url":"https://arxiv.org/pdf/2301.13346","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eEmulation-based fuzzers enable testing binaries without source code, and facilitate testing embedded applications where automated execution on the target hardware architecture is difficult and slow. The instrumentation techniques added to extract feedback and guide input mutations towards generating effective test cases is at the core of modern fuzzers. But, modern emulation-based fuzzers have evolved by re-purposing general-purpose emulators; consequently, developing and integrating fuzzing techniques, such as instrumentation methods, are difficult and often added in an ad-hoc manner, specific to an instruction set architecture (ISA). This limits state-of-the-art fuzzing techniques to few ISAs such as x86/x86-64 or ARM/AArch64; a significant problem for firmware fuzzing of diverse ISAs.\u003c/p\u003e\n\u003cp\u003eThis study presents our efforts to re-think emulation for fuzzing. We design and implement a fuzzing-specific, multi-architecture emulation framework – Icicle. We demonstrate the capability to add instrumentation once, in an architecture agnostic manner, with low execution overhead. We employ Icicle as the emulator for a state-of-the-art ARM firmware fuzzer – Fuzzware – and replicate results. Significantly, we demonstrate the availability of new instrumentation in Icicle enabled the discovery of new bugs. We demonstrate the fidelity of Icicle and efficacy of architecture agnostic instrumentation by discovering LAVA-M benchmark bugs, requiring a known and specific operational capability of instrumentation techniques, across a diverse set of instruction set architectures (x86-64, ARM/AArch64, RISC-V, MIPS). Further, to demonstrate the effectiveness of Icicle to discover bugs in a currently unsupported architecture in emulation-based fuzzers, we perform a fuzzing campaign with real-world MSP430 firmware binaries and discovered 7 new bugs.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2301.13346\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Emulation-based fuzzers enable testing binaries without source code, and facilitate testing embedded applications where automated execution on the target hardware architecture is difficult and slow. The instrumentation techniques added to extract feedback and guide input mutations towards generating effective test cases is at the core of modern fuzzers. But, modern emulation-based fuzzers have evolved by re-purposing general-purpose emulators; consequently, developing and integrating fuzzing techniques, such as instrumentation methods, are difficult and often added in an ad-hoc manner, specific to an instruction set architecture (ISA). This limits state-of-the-art fuzzing techniques to few ISAs such as x86/x86-64 or ARM/AArch64; a significant problem for firmware fuzzing of diverse ISAs.\r\n\r\nThis study presents our efforts to re-think emulation for fuzzing. We design and implement a fuzzing-specific, multi-architecture emulation framework -- Icicle. We demonstrate the capability to add instrumentation once, in an architecture agnostic manner, with low execution overhead. We employ Icicle as the emulator for a state-of-the-art ARM firmware fuzzer -- Fuzzware -- and replicate results. Significantly, we demonstrate the availability of new instrumentation in Icicle enabled the discovery of new bugs. We demonstrate the fidelity of Icicle and efficacy of architecture agnostic instrumentation by discovering LAVA-M benchmark bugs, requiring a known and specific operational capability of instrumentation techniques, across a diverse set of instruction set architectures (x86-64, ARM/AArch64, RISC-V, MIPS). Further, to demonstrate the effectiveness of Icicle to discover bugs in a currently unsupported architecture in emulation-based fuzzers, we perform a fuzzing campaign with real-world MSP430 firmware binaries and discovered 7 new bugs. \r\n\r\n[arXiv](https://arxiv.org/abs/2301.13346)","comments_url":"https://lobste.rs/s/yq6dgp/icicle_re_designed_emulator_for_grey_box","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["pdf","reversing"]},{"short_id":"g8vdsd","short_id_url":"https://lobste.rs/s/g8vdsd","created_at":"2023-02-01T14:57:12.000-06:00","title":"Mitigating Silent Data Corruptions in HPC Applications across Multiple Program Inputs","url":"https://hyfshishen.github.io/publications/SC'22-Paper.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eWith the ever-shrinking size of transistors, silent data corruptions (SDCs) are becoming a common yet serious issue in HPC. Selective instruction duplication (SID) is a widely used fault-tolerance technique that can obtain high SDC coverage with low performance overhead. However, existing SID methods are confined to single program input in its assessment, assuming that error resilience of a program remains similar across inputs. Nevertheless, we observe that the assumption cannot always hold, leading to a drastic loss in SDC coverage across different inputs, compromising HPC reliability. We notice that the SDC coverage loss correlates with a small set of instructions - we call them incubative instructions, which reveal elusive error propagation characteristics across multiple inputs. We propose MinpSID, an automated SID framework that automatically identifies and re-prioritizes incubative instructions in a given program to enhance SDC coverage. Evaluation shows MinpSID can effectively mitigate the loss of SDC coverage across multiple inputs.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://hyfshishen.github.io/publications/SC'22-Slides.pdf\" rel=\"ugc\"\u003eSlides\u003c/a\u003e\u003c/p\u003e\n","description_plain":"With the ever-shrinking size of transistors, silent data corruptions (SDCs) are becoming a common yet serious issue in HPC. Selective instruction duplication (SID) is a widely used fault-tolerance technique that can obtain high SDC coverage with low performance overhead. However, existing SID methods are confined to single program input in its assessment, assuming that error resilience of a program remains similar across inputs. Nevertheless, we observe that the assumption cannot always hold, leading to a drastic loss in SDC coverage across different inputs, compromising HPC reliability. We notice that the SDC coverage loss correlates with a small set of instructions - we call them incubative instructions, which reveal elusive error propagation characteristics across multiple inputs. We propose MinpSID, an automated SID framework that automatically identifies and re-prioritizes incubative instructions in a given program to enhance SDC coverage. Evaluation shows MinpSID can effectively mitigate the loss of SDC coverage across multiple inputs.\r\n\r\n[Slides](https://hyfshishen.github.io/publications/SC'22-Slides.pdf)","comments_url":"https://lobste.rs/s/g8vdsd/mitigating_silent_data_corruptions_hpc","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["compsci","pdf"]},{"short_id":"lrpfho","short_id_url":"https://lobste.rs/s/lrpfho","created_at":"2023-02-01T14:55:24.000-06:00","title":"Stack-Aware Hyperproperties","url":"https://arxiv.org/pdf/2301.11521.pdf","score":2,"flags":0,"comment_count":0,"description":"\u003cp\u003eA hyperproperty relates executions of a program and is used to formalize security objectives such as confidentiality, non-interference, privacy, and anonymity. Formally, a hyperproperty is a collection of allowable sets of executions. A program violates a hyperproperty if the set of its executions is not in the collection specified by the hyperproperty. The logic HyperCTL^* has been proposed in the literature to formally specify and verify hyperproperties. The problem of checking whether a finite-state program satisfies a HyperCTL formula is known to be decidable. However, the problem turns out to be undecidable for procedural (recursive) programs. Surprisingly, we show that decidability can be restored if we consider restricted classes of hyperproperties, namely those that relate only those executions of a program which have the same call-stack access pattern. We call such hyperproperties, \u003cem\u003estack-aware hyperproperties.\u003c/em\u003e Our decision procedure can be used as a proof method for establishing security objectives such as noninference for recursive programs, and also for refuting security objectives such as observational determinism. Further, if the call stack size is observable to the attacker, the decision procedure provides exact verification.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2301.11521\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"A hyperproperty relates executions of a program and is used to formalize security objectives such as confidentiality, non-interference, privacy, and anonymity. Formally, a hyperproperty is a collection of allowable sets of executions. A program violates a hyperproperty if the set of its executions is not in the collection specified by the hyperproperty. The logic HyperCTL^* has been proposed in the literature to formally specify and verify hyperproperties. The problem of checking whether a finite-state program satisfies a HyperCTL formula is known to be decidable. However, the problem turns out to be undecidable for procedural (recursive) programs. Surprisingly, we show that decidability can be restored if we consider restricted classes of hyperproperties, namely those that relate only those executions of a program which have the same call-stack access pattern. We call such hyperproperties, *stack-aware hyperproperties.* Our decision procedure can be used as a proof method for establishing security objectives such as noninference for recursive programs, and also for refuting security objectives such as observational determinism. Further, if the call stack size is observable to the attacker, the decision procedure provides exact verification. \r\n\r\n[arXiv](https://arxiv.org/abs/2301.11521)","comments_url":"https://lobste.rs/s/lrpfho/stack_aware_hyperproperties","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["formalmethods","pdf"]},{"short_id":"xxbroi","short_id_url":"https://lobste.rs/s/xxbroi","created_at":"2023-02-01T14:53:45.000-06:00","title":"Khaos: The Impact of Inter-procedural Code Obfuscation on Binary Diffing Techniques","url":"https://arxiv.org/pdf/2301.11586.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eSoftware obfuscation techniques can prevent binary diffing techniques from locating vulnerable code by obfuscating the third-party code, to achieve the purpose of protecting embedded device software. With the rapid development of binary diffing techniques, they can achieve more and more accurate function matching and identification by extracting the features within the function. This makes existing software obfuscation techniques, which mainly focus on the intra-procedural code obfuscation, no longer effective.\u003c/p\u003e\n\u003cp\u003eIn this paper, we propose a new inter-procedural code obfuscation mechanism Khaos, which moves the code across functions to obfuscate the function by using compilation optimizations. Two obfuscation primitives are proposed to separate and aggregate the function, which are called fission and fusion respectively. A prototype of Khaos is implemented based on the LLVM compiler and evaluated on a large number of real-world programs including SPEC CPU 2006 \u0026amp; 2017, CoreUtils, JavaScript engines, etc. Experimental results show that Khaos outperforms existing code obfuscations and can significantly reduce the accuracy rates of five state-of-the-art binary diffing techniques (less than 19%) with lower runtime overhead (less than 7%).\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2301.11586\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Software obfuscation techniques can prevent binary diffing techniques from locating vulnerable code by obfuscating the third-party code, to achieve the purpose of protecting embedded device software. With the rapid development of binary diffing techniques, they can achieve more and more accurate function matching and identification by extracting the features within the function. This makes existing software obfuscation techniques, which mainly focus on the intra-procedural code obfuscation, no longer effective.\r\n\r\nIn this paper, we propose a new inter-procedural code obfuscation mechanism Khaos, which moves the code across functions to obfuscate the function by using compilation optimizations. Two obfuscation primitives are proposed to separate and aggregate the function, which are called fission and fusion respectively. A prototype of Khaos is implemented based on the LLVM compiler and evaluated on a large number of real-world programs including SPEC CPU 2006 \u0026 2017, CoreUtils, JavaScript engines, etc. Experimental results show that Khaos outperforms existing code obfuscations and can significantly reduce the accuracy rates of five state-of-the-art binary diffing techniques (less than 19%) with lower runtime overhead (less than 7%). \r\n\r\n[arXiv](https://arxiv.org/abs/2301.11586)","comments_url":"https://lobste.rs/s/xxbroi/khaos_impact_inter_procedural_code","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["pdf","reversing"]},{"short_id":"woic6e","short_id_url":"https://lobste.rs/s/woic6e","created_at":"2023-02-01T14:52:40.000-06:00","title":"Estimation of Shor's Circuit for 2048-bit Integers based on Quantum Simulator","url":"https://eprint.iacr.org/2023/092.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003e\u003ca href=\"https://eprint.iacr.org/2023/092\" rel=\"ugc\"\u003eArchive\u003c/a\u003e\u003c/p\u003e\n","description_plain":"[Archive](https://eprint.iacr.org/2023/092)","comments_url":"https://lobste.rs/s/woic6e/estimation_shor_s_circuit_for_2048_bit","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["cryptography","pdf"]},{"short_id":"qtreq5","short_id_url":"https://lobste.rs/s/qtreq5","created_at":"2023-02-01T14:52:01.000-06:00","title":"Unlimited Results: Breaking Firmware Encryption of ESP32-V3","url":"https://eprint.iacr.org/2023/090.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003e\u003ca href=\"https://eprint.iacr.org/2023/090\" rel=\"ugc\"\u003eArchive\u003c/a\u003e\u003c/p\u003e\n","description_plain":"[Archive](https://eprint.iacr.org/2023/090)","comments_url":"https://lobste.rs/s/qtreq5/unlimited_results_breaking_firmware","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["hardware","pdf","reversing"]},{"short_id":"lfoldm","short_id_url":"https://lobste.rs/s/lfoldm","created_at":"2023-02-01T14:51:26.000-06:00","title":"MacORAMa: Optimal Oblivious RAM with Integrity","url":"https://eprint.iacr.org/2023/083.pdf","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003e\u003ca href=\"https://eprint.iacr.org/2023/083\" rel=\"ugc\"\u003eArchive\u003c/a\u003e\u003c/p\u003e\n","description_plain":"[Archive](https://eprint.iacr.org/2023/083)","comments_url":"https://lobste.rs/s/lfoldm/macorama_optimal_oblivious_ram_with","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":95280,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["cryptography","pdf"]},{"short_id":"kmct90","short_id_url":"https://lobste.rs/s/kmct90","created_at":"2023-02-01T14:46:17.000-06:00","title":"I've had bad luck with transparent hugepages on my Linux machines","url":"https://utcc.utoronto.ca/~cks/space/blog/linux/TransparentHugepagesBadLuck","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kmct90/i_ve_had_bad_luck_with_transparent","submitter_user":{"username":"gerikson","created_at":"2017-01-13T03:16:10.000-06:00","is_admin":false,"about":"https://gerikson.com/hnlo/\r\n\r\n@gerikson@mastodon.social\r\n","is_moderator":false,"karma":14204,"avatar_url":"/avatars/gerikson-100.png","invited_by_user":"varjag","github_username":"gustafe"},"tags":["linux"]},{"short_id":"ep9gah","short_id_url":"https://lobste.rs/s/ep9gah","created_at":"2023-02-01T14:17:21.000-06:00","title":"Go 1.20 Release Notes","url":"https://go.dev/doc/go1.20","score":20,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ep9gah/go_1_20_release_notes","submitter_user":{"username":"eatonphil","created_at":"2019-09-01T20:23:02.000-05:00","is_admin":false,"about":"eatonphil.com","is_moderator":false,"karma":4651,"avatar_url":"/avatars/eatonphil-100.png","invited_by_user":"calvin","github_username":"eatonphil","twitter_username":"eatonphil"},"tags":["go","release"]},{"short_id":"rkbhkf","short_id_url":"https://lobste.rs/s/rkbhkf","created_at":"2023-02-01T13:54:33.000-06:00","title":"Don’t bother trying to estimate Pandas memory usage","url":"https://pythonspeed.com/articles/estimating-pandas-memory/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rkbhkf/don_t_bother_trying_estimate_pandas","submitter_user":{"username":"itamarst","created_at":"2016-04-28T10:05:47.000-05:00","is_admin":false,"about":"Writing about Python performance and faster development at https://pythonspeed.com, as well as offering consulting services. Writing about work/life balance and other software engineering skills at https://codewithoutrules.com.\r\n","is_moderator":false,"karma":5174,"avatar_url":"/avatars/itamarst-100.png","invited_by_user":"0x2ba22e11"},"tags":["performance","python"]},{"short_id":"phumm1","short_id_url":"https://lobste.rs/s/phumm1","created_at":"2023-02-01T13:06:03.000-06:00","title":"Release Engineering Is Exhausting So Here's cargo-dist","url":"https://blog.axo.dev/2023/02/cargo-dist","score":27,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/phumm1/release_engineering_is_exhausting_so","submitter_user":{"username":"jado","created_at":"2019-08-06T03:14:15.000-05:00","is_admin":false,"about":"Software Engineer, CompSci Grad Student (researching ML)\r\n\r\nloves plt, compilers, ml, rust\r\n\r\n[Website](https://jadon.io) | [GitHub](https://github.com/phase) | [LinkedIn](https://www.linkedin.com/in/jado/)","is_moderator":false,"karma":1089,"avatar_url":"/avatars/jado-100.png","invited_by_user":"BruceM","github_username":"phase"},"tags":["release","rust"]},{"short_id":"c9fx3p","short_id_url":"https://lobste.rs/s/c9fx3p","created_at":"2023-02-01T13:05:30.000-06:00","title":"Previewing China’s Loongson 3A5000 with Performance Counters","url":"https://chipsandcheese.com/2023/01/29/previewing-chinas-loongson-3a5000-with-performance-counters/","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/c9fx3p/previewing_china_s_loongson_3a5000_with","submitter_user":{"username":"technetium","created_at":"2020-02-06T19:52:39.000-06:00","is_admin":false,"about":"A sentient lump of a certain high-density material.\r\n\r\nI'm working on a traditional roguelike: [GitHub](https://github.com/kiedtl/roguelike)","is_moderator":false,"karma":5041,"avatar_url":"/avatars/technetium-100.png","invited_by_user":"ngoldbaum","github_username":"kiedtl"},"tags":["hardware"]},{"short_id":"ilpbug","short_id_url":"https://lobste.rs/s/ilpbug","created_at":"2023-02-01T12:13:57.000-06:00","title":"RegCPython: A Register-based Python Interpreter for Better Performance","url":"https://dl.acm.org/doi/10.1145/3568973","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ilpbug/regcpython_register_based_python","submitter_user":{"username":"asb","created_at":"2014-04-01T04:39:53.000-05:00","is_admin":false,"about":"Compiler engineer at Igalia (https://igalia.com). Previously co-founded lowRISC CIC (https://www.lowrisc.org) and served as its CTO for many years.\r\n\r\nWrites LLVM Weekly (https://llvmweekly.org).","is_moderator":false,"karma":273,"avatar_url":"/avatars/asb-100.png","invited_by_user":"kev009","github_username":"asb"},"tags":["performance","python"]},{"short_id":"jsso8q","short_id_url":"https://lobste.rs/s/jsso8q","created_at":"2023-02-01T12:09:59.000-06:00","title":"aocla: A small stack based programming language interpreter in ~1KloC","url":"https://github.com/antirez/aocla/","score":7,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jsso8q/aocla_small_stack_based_programming","submitter_user":{"username":"asb","created_at":"2014-04-01T04:39:53.000-05:00","is_admin":false,"about":"Compiler engineer at Igalia (https://igalia.com). Previously co-founded lowRISC CIC (https://www.lowrisc.org) and served as its CTO for many years.\r\n\r\nWrites LLVM Weekly (https://llvmweekly.org).","is_moderator":false,"karma":273,"avatar_url":"/avatars/asb-100.png","invited_by_user":"kev009","github_username":"asb"},"tags":["c","release"]},{"short_id":"a9tp8n","short_id_url":"https://lobste.rs/s/a9tp8n","created_at":"2023-02-01T12:09:23.000-06:00","title":"Budgie 10.7 Released","url":"https://blog.buddiesofbudgie.org/budgie-10-7-released/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/a9tp8n/budgie_10_7_released","submitter_user":{"username":"akselmo","created_at":"2022-04-22T05:47:06.000-05:00","is_admin":false,"about":"Design engineer by day, hobbyist gamedev by night.\r\n\r\nFediverse: https://tilde.zone/@aks (I do not have twitter)\r\n\r\nGit: https://codeberg.org/akselmo (I use this more than Github)\r\n\r\nGames: https://akselmo.itch.io\r\n\r\n----\r\n\r\nThis is an OpenPGP proof that connects my OpenPGP key to this Lobste.rs account. For details check out https://docs.keyoxide.org/advanced/openpgp-proofs/\r\n\r\n[Verifying my OpenPGP key: openpgp4fpr:6CF8BBBD93FD0A4A748495A12D8ADFDD01E76FAC]","is_moderator":false,"karma":498,"avatar_url":"/avatars/akselmo-100.png","invited_by_user":"kline","github_username":"Akselmo"},"tags":["linux","release"]},{"short_id":"sg1aey","short_id_url":"https://lobste.rs/s/sg1aey","created_at":"2023-02-01T12:04:37.000-06:00","title":"Async trait send bounds","url":"https://smallcultfollowing.com/babysteps/blog/2023/02/01/async-trait-send-bounds-part-1-intro/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sg1aey/async_trait_send_bounds","submitter_user":{"username":"jado","created_at":"2019-08-06T03:14:15.000-05:00","is_admin":false,"about":"Software Engineer, CompSci Grad Student (researching ML)\r\n\r\nloves plt, compilers, ml, rust\r\n\r\n[Website](https://jadon.io) | [GitHub](https://github.com/phase) | [LinkedIn](https://www.linkedin.com/in/jado/)","is_moderator":false,"karma":1089,"avatar_url":"/avatars/jado-100.png","invited_by_user":"BruceM","github_username":"phase"},"tags":["rust"]}]