[{"short_id":"h6fmdw","short_id_url":"https://lobste.rs/s/h6fmdw","created_at":"2024-12-21T15:06:42.000-06:00","title":"sortcheck: Tool for detecting violations of ordering axioms in qsort/bsearch callbacks","url":"https://github.com/yugr/sortcheck","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/h6fmdw/sortcheck_tool_for_detecting_violations","submitter_user":"matthew2","user_is_author":false,"tags":["c","security"]},{"short_id":"onzxyh","short_id_url":"https://lobste.rs/s/onzxyh","created_at":"2024-12-21T14:25:15.000-06:00","title":"Introducing S2: The Log â€“ made serverless","url":"https://s2.dev/blog/intro","score":5,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/onzxyh/introducing_s2_log_made_serverless","submitter_user":"infiniteregrets","user_is_author":false,"tags":["databases","distributed"]},{"short_id":"pt1p9w","short_id_url":"https://lobste.rs/s/pt1p9w","created_at":"2024-12-21T13:35:18.000-06:00","title":"Nix is a build system","url":"http://www.chriswarbo.net/blog/2024-05-24-nix_build_system.html","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pt1p9w/nix_is_build_system","submitter_user":"janus","user_is_author":false,"tags":["nix"]},{"short_id":"ab2rnz","short_id_url":"https://lobste.rs/s/ab2rnz","created_at":"2024-12-21T13:31:11.000-06:00","title":"Implementing Raft: Part 5 - Exactly-once delivery","url":"https://eli.thegreenplace.net/2024/implementing-raft-part-5-exactly-once-delivery/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ab2rnz/implementing_raft_part_5_exactly_once","submitter_user":"eduard","user_is_author":false,"tags":["distributed"]},{"short_id":"lojpwf","short_id_url":"https://lobste.rs/s/lojpwf","created_at":"2024-12-21T12:58:53.000-06:00","title":"State of JavaScript 2024","url":"https://2024.stateofjs.com/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lojpwf/state_javascript_2024","submitter_user":"deejayy","user_is_author":false,"tags":["javascript"]},{"short_id":"aa5wdo","short_id_url":"https://lobste.rs/s/aa5wdo","created_at":"2024-12-21T12:56:24.000-06:00","title":"Pride Versioning","url":"https://mastodon.online/@nikitonsky/113691789641950263","score":9,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/aa5wdo/pride_versioning","submitter_user":"JulianWgs","user_is_author":false,"tags":["practices","satire"]},{"short_id":"wrvciq","short_id_url":"https://lobste.rs/s/wrvciq","created_at":"2024-12-21T12:53:59.000-06:00","title":"OpenAI o3 Breakthrough High Score on ARC-AGI-Pub","url":"https://arcprize.org/blog/oai-o3-pub-breakthrough","score":2,"flags":1,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wrvciq/openai_o3_breakthrough_high_score_on_arc","submitter_user":"alper","user_is_author":false,"tags":["ai"]},{"short_id":"6tkpil","short_id_url":"https://lobste.rs/s/6tkpil","created_at":"2024-12-21T11:21:41.000-06:00","title":"Ascending Mount FujiNet","url":"https://www.leadedsolder.com/2024/12/17/coco-fujinet.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6tkpil/ascending_mount_fujinet","submitter_user":"aleph","user_is_author":false,"tags":["retrocomputing"]},{"short_id":"layveu","short_id_url":"https://lobste.rs/s/layveu","created_at":"2024-12-21T10:26:39.000-06:00","title":"Plan 9 is a bicycle","url":"https://liam-on-linux.dreamwidth.org/93196.html","score":6,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/layveu/plan_9_is_bicycle","submitter_user":"raymii","user_is_author":false,"tags":["unix"]},{"short_id":"t5b9u8","short_id_url":"https://lobste.rs/s/t5b9u8","created_at":"2024-12-21T10:26:04.000-06:00","title":"Understanding Objective-C by transpiling it to C++","url":"https://www.jviotti.com/2023/12/01/understanding-objective-c-by-transpiling-it-to-cpp.html","score":5,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/t5b9u8/understanding_objective_c_by","submitter_user":"calvin","user_is_author":false,"tags":["c++","compilers","objectivec"]},{"short_id":"llc5t7","short_id_url":"https://lobste.rs/s/llc5t7","created_at":"2024-12-21T10:23:31.000-06:00","title":"Cramming scrapscript into msgpack","url":"https://taylor.town/flat-scraps-000","score":5,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/llc5t7/cramming_scrapscript_into_msgpack","submitter_user":"surprisetalk","user_is_author":true,"tags":["distributed","networking","plt","web"]},{"short_id":"ayiyce","short_id_url":"https://lobste.rs/s/ayiyce","created_at":"2024-12-21T07:21:43.000-06:00","title":"Spreadsheets 1/3 - Rye Language","url":"https://ryelang.org/cookbook/working-with/spreadsheets/","score":13,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ayiyce/spreadsheets_1_3_rye_language","submitter_user":"refaktor","user_is_author":true,"tags":["programming"]},{"short_id":"4czo0b","short_id_url":"https://lobste.rs/s/4czo0b","created_at":"2024-12-21T05:02:04.000-06:00","title":"dropping hyper","url":"https://daniel.haxx.se/blog/2024/12/21/dropping-hyper/","score":62,"flags":0,"comment_count":50,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4czo0b/dropping_hyper","submitter_user":"lthms","user_is_author":false,"tags":["c","rust"]},{"short_id":"addwag","short_id_url":"https://lobste.rs/s/addwag","created_at":"2024-12-21T03:53:24.000-06:00","title":"Three web views for Common Lisp: build cross platform GUIs with Electron, WebUI or CLOG Frame","url":"https://lisp-journey.gitlab.io/blog/three-web-views-for-common-lisp--cross-platform-guis/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/addwag/three_web_views_for_common_lisp_build","submitter_user":"vindarel","user_is_author":true,"tags":["lisp"]},{"short_id":"dol0n4","short_id_url":"https://lobste.rs/s/dol0n4","created_at":"2024-12-20T19:18:48.000-06:00","title":"Rules to avoid common extended inline assembly mistakes","url":"https://nullprogram.com/blog/2024/12/20/","score":14,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dol0n4/rules_avoid_common_extended_inline","submitter_user":"fanf","user_is_author":false,"tags":["assembly","c","c++"]},{"short_id":"1xised","short_id_url":"https://lobste.rs/s/1xised","created_at":"2024-12-20T18:12:43.000-06:00","title":"Compiling C to Safe Rust, Formalized","url":"https://arxiv.org/abs/2412.15042","score":17,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/1xised/compiling_c_safe_rust_formalized","submitter_user":"emschwartz","user_is_author":false,"tags":["c","compilers","rust"]},{"short_id":"dcs7mk","short_id_url":"https://lobste.rs/s/dcs7mk","created_at":"2024-12-20T17:39:32.000-06:00","title":"DOS APPEND command","url":"https://www.os2museum.com/wp/dos-append/","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dcs7mk/dos_append_command","submitter_user":"luke8086","user_is_author":false,"tags":["historical","osdev"]},{"short_id":"in3iic","short_id_url":"https://lobste.rs/s/in3iic","created_at":"2024-12-20T17:26:47.000-06:00","title":"a raycaster in bash","url":"https://github.com/izabera/pseudo3d","score":26,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/in3iic/raycaster_bash","submitter_user":"izabera","user_is_author":true,"tags":["graphics","unix"]},{"short_id":"klf87z","short_id_url":"https://lobste.rs/s/klf87z","created_at":"2024-12-20T16:42:25.000-06:00","title":"Turing Machines","url":"https://samwho.dev/turing-machines/","score":21,"flags":0,"comment_count":19,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/klf87z/turing_machines","submitter_user":"jakelazaroff","user_is_author":false,"tags":["compsci","historical","retrocomputing"]},{"short_id":"bjunyg","short_id_url":"https://lobste.rs/s/bjunyg","created_at":"2024-12-20T14:58:08.000-06:00","title":"Hexagon page animations","url":"https://www.redblobgames.com/blog/2024-12-16-hexagon-page-animations/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bjunyg/hexagon_page_animations","submitter_user":"hwayne","user_is_author":false,"tags":["css","visualization"]},{"short_id":"5gnorf","short_id_url":"https://lobste.rs/s/5gnorf","created_at":"2024-12-20T14:21:14.000-06:00","title":"The jank programming language","url":"https://compiler-research.org/blogs/jank_intro/","score":33,"flags":0,"comment_count":17,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5gnorf/jank_programming_language","submitter_user":"jeaye","user_is_author":true,"tags":["clojure","compilers","plt"]},{"short_id":"ysf899","short_id_url":"https://lobste.rs/s/ysf899","created_at":"2024-12-20T13:53:40.000-06:00","title":"Phantom Menace: memory leak that wasn't there","url":"https://flakm.com/posts/phantom_leak/","score":11,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ysf899/phantom_menace_memory_leak_wasn_t_there","submitter_user":"emschwartz","user_is_author":false,"tags":["debugging","devops","rust"]},{"short_id":"ti2lli","short_id_url":"https://lobste.rs/s/ti2lli","created_at":"2024-12-20T13:20:41.000-06:00","title":"CandyFab: A DIY 3D Sugar Printer","url":"https://candyfab.org/","score":13,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ti2lli/candyfab_diy_3d_sugar_printer","submitter_user":"fanf","user_is_author":false,"tags":["art","hardware"]},{"short_id":"twzn9n","short_id_url":"https://lobste.rs/s/twzn9n","created_at":"2024-12-20T12:16:15.000-06:00","title":"Rivet Actors, Cloudflare Durable Objects-like infrastructure built with Rust, FoundationDB, V8 Isolates","url":"https://github.com/rivet-gg/rivet","score":15,"flags":1,"comment_count":7,"description":"\u003cp\u003eHello! Iâ€™ve been a lurker here for a good while, I think itâ€™s due time I share what my team and I have been working on in hopes that other crustaceans find it interesting.\u003c/p\u003e\n\u003cp\u003eRivet is open-source actor infrastructure similar to Cloudflareâ€™s Durable Objects. Rivet itself already serves millions of MAU in production using our current container runtime â€“ primarily for multiplayer games â€“ and Rivet Actors are a new extension to support actor-like workloads. Rivet Actorâ€™s core primitives are RPC, state, and events.\u003c/p\u003e\n\u003cp\u003eActors are powered by Rust, V8 isolates (supports Deno), and FoundationDB. An architecture diagram is available \u003ca href=\"https://github.com/rivet-gg/rivet?tab=readme-ov-file#diagram\" rel=\"ugc\"\u003ehere\u003c/a\u003e. If youâ€™re not familiar with FoundationDB, youâ€™re overdue to watch \u003ca href=\"https://www.youtube.com/watch?v=9g84y_60VGM\" rel=\"ugc\"\u003eDave Rosenthalâ€™s talk\u003c/a\u003e. (I firmly believe itâ€™s by far the best permissively licensed database; if only it had a well maintained SQL layer.)\u003c/p\u003e\n\u003cp\u003eHereâ€™s where Rivetâ€™s architecture gets fun â€“ we donâ€™t rely on a traditional orchestrator like Kubernetes or Nomad for our runtime. Instead, our orchestrator is powered by an in-house actor-like workflow engine â€“ similar to how FoundationDB is powered by their own actor library (\u003ca href=\"https://apple.github.io/foundationdb/flow.html\" rel=\"ugc\"\u003eFlow\u003c/a\u003e) internally. It lets us reliably \u0026amp; efficiently build complex logic â€“ like our orchestrator â€“ that would normally be incredibly difficult to build correctly. For example, \u003ca href=\"https://github.com/rivet-gg/rivet/blob/a3db31f3b5c351061d665003a6a8dfbf3372690b/packages/services/ds/src/workflows/server/pegboard/mod.rs#L49\" rel=\"ugc\"\u003ehereâ€™s the logic that powers Rivet Actors themselves\u003c/a\u003e with complex mechanisms like retry upgrades, retry backoffs, and draining.\u003c/p\u003e\n\u003cp\u003eOne of the reasons we built Rivet Actors is because we tried to replace most of our Redis-based realtime infrastructure with Durable Objects. The architecture allowed us to build realtime features much faster \u0026amp; efficiently, but the platform \u0026amp; APIs were needlessly rigid and difficult to use. Our goal is to build an actor-like platform that includes the bells and whistles required for developers to benefit from the actor model without the learning curve of tools like Erlang/OTP, Akka, or Orleans.\u003c/p\u003e\n\u003cp\u003eRivet Actors provides a few key benefits in flexibility over Durable Objects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eOpen-source (Apache 2.0) â€“ built to be self-hosted and deployed on-prem\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProvides observability out of the box, no Logpush required\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRivet Actors support the Deno runtime, so NPM \u0026amp; JSR just works\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://jsr.io/@rivet-gg/actor/doc\" rel=\"ugc\"\u003e@rivet-gg/actor\u003c/a\u003e framework provides RPC, state, and events out of the box for faster bootstrapping; you can modify and deploy it yourself\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSupports both V8 isolates \u0026amp; Docker-compatible containers so you can run any software youâ€™d like, like Godot/Unity servers or video transcoding\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAlso supports TCP \u0026amp; UDP (we run games!)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProvides vanilla HTTP API for easy use with existing apps\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFull control over regions\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThereâ€™s plenty more that I donâ€™t have space to talk about. Give \u003ca href=\"https://rivet.gg/docs\" rel=\"ugc\"\u003eour docs\u003c/a\u003e a read if youâ€™d like to learn more or read about \u003ca href=\"https://rivet.gg/docs/internals/design-decisions\" rel=\"ugc\"\u003einternal design decisions\u003c/a\u003e. Iâ€™ll be in the comments answering questions!\u003c/p\u003e\n\u003cp\u003eCheers, Nathan\u003c/p\u003e\n","description_plain":"Hello! I've been a lurker here for a good while, I think it's due time I share what my team and I have been working on in hopes that other crustaceans find it interesting.\r\n\r\nRivet is open-source actor infrastructure similar to Cloudflare's Durable Objects. Rivet itself already serves millions of MAU in production using our current container runtime â€“ primarily for multiplayer games â€“ and Rivet Actors are a new extension to support actor-like workloads. Rivet Actor's core primitives are RPC, state, and events.\r\n\r\nActors are powered by Rust, V8 isolates (supports Deno), and FoundationDB. An architecture diagram is available [here](https://github.com/rivet-gg/rivet?tab=readme-ov-file#diagram). If you're not familiar with FoundationDB, you're overdue to watch [Dave Rosenthal's talk](https://www.youtube.com/watch?v=9g84y_60VGM). (I firmly believe it's by far the best permissively licensed database; if only it had a well maintained SQL layer.)\r\n\r\nHere's where Rivet's architecture gets fun â€“ we don't rely on a traditional orchestrator like Kubernetes or Nomad for our runtime. Instead, our orchestrator is powered by an in-house actor-like workflow engine â€“ similar to how FoundationDB is powered by their own actor library ([Flow](https://apple.github.io/foundationdb/flow.html)) internally. It lets us reliably \u0026 efficiently build complex logic â€“ like our orchestrator â€“ that would normally be incredibly difficult to build correctly. For example, [here's the logic that powers Rivet Actors themselves](https://github.com/rivet-gg/rivet/blob/a3db31f3b5c351061d665003a6a8dfbf3372690b/packages/services/ds/src/workflows/server/pegboard/mod.rs#L49) with complex mechanisms like retry upgrades, retry backoffs, and draining.\r\n\r\nOne of the reasons we built Rivet Actors is because we tried to replace most of our Redis-based realtime infrastructure with Durable Objects. The architecture allowed us to build realtime features much faster \u0026 efficiently, but the platform \u0026 APIs were needlessly rigid and difficult to use. Our goal is to build an actor-like platform that includes the bells and whistles required for developers to benefit from the actor model without the learning curve of tools like Erlang/OTP, Akka, or Orleans.\r\n\r\nRivet Actors provides a few key benefits in flexibility over Durable Objects:\r\n\r\n- Open-source (Apache 2.0) â€“ built to be self-hosted and deployed on-prem\r\n\r\n- Provides observability out of the box, no Logpush required\r\n\r\n- Rivet Actors support the Deno runtime, so NPM \u0026 JSR just works\r\n\r\n- [@rivet-gg/actor](https://jsr.io/@rivet-gg/actor/doc) framework provides RPC, state, and events out of the box for faster bootstrapping; you can modify and deploy it yourself\r\n\r\n- Supports both V8 isolates \u0026 Docker-compatible containers so you can run any software you'd like, like Godot/Unity servers or video transcoding\r\n\r\n- Also supports TCP \u0026 UDP (we run games!)\r\n\r\n- Provides vanilla HTTP API for easy use with existing apps\r\n\r\n- Full control over regions\r\n\r\nThere's plenty more that I don't have space to talk about. Give [our docs](https://rivet.gg/docs) a read if you'd like to learn more or read about [internal design decisions](https://rivet.gg/docs/internals/design-decisions). I'll be in the comments answering questions!\r\n\r\nCheers, Nathan","comments_url":"https://lobste.rs/s/twzn9n/rivet_actors_cloudflare_durable_objects","submitter_user":"nathanflurry","user_is_author":true,"tags":["javascript","rust"]},{"short_id":"l05xsl","short_id_url":"https://lobste.rs/s/l05xsl","created_at":"2024-12-20T11:23:03.000-06:00","title":"The long and winding road to safe browser-based cryptography","url":"https://securedrop.org/news/browser-based-cryptography/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/l05xsl/long_winding_road_safe_browser_based","submitter_user":"legoktm","user_is_author":false,"tags":["browsers","security"]}]