[{"short_id":"fq7ge1","short_id_url":"https://lobste.rs/s/fq7ge1","created_at":"2022-08-07T19:50:02.000-05:00","title":"Best practices for inclusive textual websites","url":"https://seirdy.one/posts/2020/11/23/website-best-practices/","score":2,"flags":0,"comment_count":1,"description":"\u003cp\u003ePage says 2020 but it’s constantly updated\u003c/p\u003e\n","description_plain":"Page says 2020 but it's constantly updated","comments_url":"https://lobste.rs/s/fq7ge1/best_practices_for_inclusive_textual","submitter_user":{"username":"Seirdy","created_at":"2020-01-28T20:13:49.000-06:00","is_admin":false,"about":"He/Him, It/Its. Full bio, contact info, etc. on my site's [about page](https://seirdy.one/about/).\r\n\r\nI also have a Gemini capsule at gemini://seirdy.one\r\n\r\nTech interests: accessibility, the IndieWeb, software freedom.","is_moderator":false,"karma":777,"avatar_url":"/avatars/Seirdy-100.png","invited_by_user":"Hail_Spacecake","github_username":"Seirdy"},"tags":["a11y","performance","practices","web"]},{"short_id":"tujkgh","short_id_url":"https://lobste.rs/s/tujkgh","created_at":"2022-08-07T18:21:12.000-05:00","title":"Validating PostgreSQL results \u0026 inferring query static types by Gajus Kuizinas","url":"https://contra.com/p/gkOQlbLq-validating-postgre-sql-results-and-inferring-query-static-types","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eMost of the bugs come from misaligned expectations. When working with databases, the first line of defense is to type the expected query results statically.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003etype SubscriptionPayment = {\n  id: number,\n  subscriber: string,\n  amount: number\n};\n\nawait connection.many(\n  sql\u0026lt;Person\u0026gt;`\n    SELECT id, subscriber, amount\n    FROM subscription_payment\n  `\n);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDoing this already improves the developer experience greatly because now we can make assumptions about the query results without even looking at the query.\u003c/p\u003e\n\u003cp\u003eWe might even have integration tests that further validate that the query is returning the expected results (at least at the build time).\u003c/p\u003e\n\u003cp\u003eHowever, the problem is that once you deploy the application, the database schema might change independently of the codebase. This drift may result in your application behaving in unpredictable and potentially dangerous ways, e.g., imagine if the amount column type changed from numeric to text.\u003c/p\u003e\n\u003cp\u003eWithout the runtime validation, this would cause a cascade of problems and potential database corruption. Even worse, without runtime checks, this could go unnoticed for a long time.\u003c/p\u003e\n\u003cp\u003eIn contrast, by using runtime checks, you can ensure that the contract between your codebase and the database is always respected. If there is a breaking change, the application fails with a loud error that is easy to debug and fix.\nUp to now, there was not a simple way to add runtime validation to database queries.\u003c/p\u003e\n\u003cp\u003eHowever, thanks to \u003ca href=\"https://www.npmjs.com/package/zod\" rel=\"ugc\"\u003ezod\u003c/a\u003e, a schema validation and static type interference library, and \u003ca href=\"https://github.com/gajus/slonik\" rel=\"ugc\"\u003eSlonik\u003c/a\u003e, we can now have the best of both worlds by writing just a single schema per query and getting static types and runtime result validation.\u003c/p\u003e\n\u003cp\u003eIf you are familiar with JavaScript ecosystem, what Relay is to React.js/GraphQL, Slonik is to Node.js/PostgreSQL.\nHere is how it works.\u003c/p\u003e\n\u003cp\u003eLet’s assume that you have a PostgreSQL table person:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sql\"\u003eCREATE TABLE \"public\".\"person\"(\n  \"id\" integer GENERATED ALWAYS AS IDENTITY,\n  \"name\" text NOT NULL,\n  PRIMARY KEY (\"id\")\n);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand you want to retrieve all persons in the database, along with their id and name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003econnection.any(sql`\n  SELECT id, name\n  FROM person\n`);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith your knowledge of the database schema, define a zod object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003econst personObject = z.object({\n  id: z.number(),\n  name: z.string(),\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUpdate your query to use sql.type tag and pass personObject:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003econst personQuery = sql.type(personObject)`\n  SELECT id, name\n  FROM person\n`;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, query the database using typed sql tagged template:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003econst persons = await connection.any(personQuery);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this information, \u003ca href=\"https://github.com/gajus/slonik\" rel=\"ugc\"\u003eSlonik\u003c/a\u003e guarantees that every member of persons is an object that has properties id and name, which are a non-null number and a non-null string respectively.\u003c/p\u003e\n\u003cstrong\u003eHandling schema validation errors\u003c/strong\u003e\n\u003cp\u003eIf query produces a row that does not satisfy zod object, then \u003ccode\u003eSchemaValidationError\u003c/code\u003e error is thrown.\n\u003ccode\u003eSchemaValidationError\u003c/code\u003e includes properties that describe the query and validation errors:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003esql\u003c/code\u003e – SQL of the query that produced unexpected row.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003erow\u003c/code\u003e – row data that did not satisfy the schema.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eissues\u003c/code\u003e – array of unmet expectations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhenever this error occurs, the same information is also included in the logs.\u003c/p\u003e\n\u003cp\u003eIn most cases, you shouldn’t attempt to handle these errors at individual query level – allow to propagate to the top of the application and fix the issue when you become aware of it.\u003c/p\u003e\n\u003cp\u003eHowever, in cases such as dealing with unstructured data, it might be useful to handle these errors at a query level, e.g.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003eimport { SchemaValidationError } from 'slonik';\n\ntry {} catch(error) {\n  if (errorextendsSchemaValidationError) {\n    // Handle scheme validation error\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003ePerformance penalty\u003c/strong\u003e\n\u003cp\u003eIn the context of the network overhead, validation accounts for a tiny amount of the total execution time.Just to give an idea, in our sample of data, it takes sub 0.1ms to validate 1 row, ~3ms to validate 1,000 and ~25ms to validate 100,000 rows.\u003c/p\u003e\n\u003cstrong\u003eUnknown keys\u003c/strong\u003e\n\u003cp\u003eSlonik disallows unknown keys, i.e. query that returns \u003ccode\u003e{foo: 'bar', baz: 'qux'}\u003c/code\u003e with \u003ccode\u003ez.object({foo: z.string()})\u003c/code\u003e schema will produce \u003ccode\u003eSchemaValidationError\u003c/code\u003e error.\u003c/p\u003e\n\u003cstrong\u003eInferring types\u003c/strong\u003e\n\u003cp\u003eYou can infer TypeScript type of the query result. There are couple of ways of doing it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003e// Infer using z.infer\u0026lt;typeof yourSchema\u0026gt;\n// https://github.com/colinhacks/zod#type-inference\ntype Person = z.infer\u0026lt;typeof personObject\u0026gt;;\n\n// from sql tagged template `zodObject` property \ntype Person = z.infer\u0026lt;personQuery.zodObject\u0026gt;;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eTransforming results\u003c/strong\u003e\n\u003cp\u003eUsing zod transform you can refine the result shape and its type, e.g.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-ts\"\u003econst coordinatesType = z.string().transform((subject) =\u0026gt; {  \n  const [x,y] = subject.split(',');\n  return{x:Number(x),y:Number(y)};\n});\n\nconst zodObject = z.object({foo:coordinatesType});\nconst query = sql.type(zodObject)`SELECT '1,2' as foo`;\nconst result = await pool.one(query);\nexpectTypeOf(result).toMatchTypeOf\u0026lt;{foo:{x:number,y:number}}\u0026gt;();\n\nt.deepEqual(result,{foo:{x:1,y:2}});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eWhat’s next?\u003c/strong\u003e\n\u003cp\u003eNow that we have a framework for instrumenting queries, the next step is automate schema and type generation as much as possible. For that, check out the work that mmkal has been doing in \u003ca href=\"https://www.npmjs.com/package/@slonik/typegen\" rel=\"ugc\"\u003ehttps://www.npmjs.com/package/@slonik/typegen\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Most of the bugs come from misaligned expectations. When working with databases, the first line of defense is to type the expected query results statically.\r\n\r\n```ts\r\ntype SubscriptionPayment = {\r\n  id: number,\r\n  subscriber: string,\r\n  amount: number\r\n};\r\n\r\nawait connection.many(\r\n  sql\u003cPerson\u003e`\r\n    SELECT id, subscriber, amount\r\n    FROM subscription_payment\r\n  `\r\n);\r\n```\r\n\r\nDoing this already improves the developer experience greatly because now we can make assumptions about the query results without even looking at the query.\r\n\r\nWe might even have integration tests that further validate that the query is returning the expected results (at least at the build time).\r\n\r\nHowever, the problem is that once you deploy the application, the database schema might change independently of the codebase. This drift may result in your application behaving in unpredictable and potentially dangerous ways, e.g., imagine if the amount column type changed from numeric to text. \r\n\r\nWithout the runtime validation, this would cause a cascade of problems and potential database corruption. Even worse, without runtime checks, this could go unnoticed for a long time.\r\n\r\nIn contrast, by using runtime checks, you can ensure that the contract between your codebase and the database is always respected. If there is a breaking change, the application fails with a loud error that is easy to debug and fix.\r\nUp to now, there was not a simple way to add runtime validation to database queries.\r\n\r\nHowever, thanks to [zod](https://www.npmjs.com/package/zod), a schema validation and static type interference library, and [Slonik](https://github.com/gajus/slonik), we can now have the best of both worlds by writing just a single schema per query and getting static types and runtime result validation.\r\n\r\nIf you are familiar with JavaScript ecosystem, what Relay is to React.js/GraphQL, Slonik is to Node.js/PostgreSQL.\r\nHere is how it works.\r\n\r\nLet's assume that you have a PostgreSQL table person:\r\n\r\n```sql\r\nCREATE TABLE \"public\".\"person\"(\r\n  \"id\" integer GENERATED ALWAYS AS IDENTITY,\r\n  \"name\" text NOT NULL,\r\n  PRIMARY KEY (\"id\")\r\n);\r\n```\r\n\r\nand you want to retrieve all persons in the database, along with their id and name:\r\n\r\n```ts\r\nconnection.any(sql`\r\n  SELECT id, name\r\n  FROM person\r\n`);\r\n```\r\n\r\nWith your knowledge of the database schema, define a zod object:\r\n\r\n```ts\r\nconst personObject = z.object({\r\n  id: z.number(),\r\n  name: z.string(),\r\n});\r\n```\r\n\r\nUpdate your query to use sql.type tag and pass personObject:\r\n\r\n```ts\r\nconst personQuery = sql.type(personObject)`\r\n  SELECT id, name\r\n  FROM person\r\n`;\r\n```\r\n\r\nFinally, query the database using typed sql tagged template:\r\n\r\n```ts\r\nconst persons = await connection.any(personQuery);\r\n```\r\n\r\nWith this information, [Slonik](https://github.com/gajus/slonik) guarantees that every member of persons is an object that has properties id and name, which are a non-null number and a non-null string respectively.\r\n\r\n### Handling schema validation errors\r\n\r\nIf query produces a row that does not satisfy zod object, then `SchemaValidationError` error is thrown.\r\n`SchemaValidationError` includes properties that describe the query and validation errors:\r\n\r\n* `sql` – SQL of the query that produced unexpected row.\r\n* `row` – row data that did not satisfy the schema.\r\n* `issues` – array of unmet expectations.\r\n\r\nWhenever this error occurs, the same information is also included in the logs.\r\n\r\nIn most cases, you shouldn't attempt to handle these errors at individual query level – allow to propagate to the top of the application and fix the issue when you become aware of it.\r\n\r\n\r\nHowever, in cases such as dealing with unstructured data, it might be useful to handle these errors at a query level, e.g.\r\n\r\n```ts\r\nimport { SchemaValidationError } from 'slonik';\r\n\r\ntry {} catch(error) {\r\n  if (errorextendsSchemaValidationError) {\r\n    // Handle scheme validation error\r\n  }\r\n}\r\n```\r\n\r\n### Performance penalty\r\n\r\nIn the context of the network overhead, validation accounts for a tiny amount of the total execution time.Just to give an idea, in our sample of data, it takes sub 0.1ms to validate 1 row, ~3ms to validate 1,000 and ~25ms to validate 100,000 rows.\r\n\r\n### Unknown keys\r\n\r\nSlonik disallows unknown keys, i.e. query that returns `{foo: 'bar', baz: 'qux'}` with `z.object({foo: z.string()})` schema will produce `SchemaValidationError` error.\r\n\r\n### Inferring types\r\n\r\nYou can infer TypeScript type of the query result. There are couple of ways of doing it:\r\n\r\n```ts\r\n// Infer using z.infer\u003ctypeof yourSchema\u003e\r\n// https://github.com/colinhacks/zod#type-inference\r\ntype Person = z.infer\u003ctypeof personObject\u003e;\r\n\r\n// from sql tagged template `zodObject` property \r\ntype Person = z.infer\u003cpersonQuery.zodObject\u003e;\r\n```\r\n\r\n### Transforming results\r\n\r\nUsing zod transform you can refine the result shape and its type, e.g.\r\n\r\n```ts\r\nconst coordinatesType = z.string().transform((subject) =\u003e {  \r\n  const [x,y] = subject.split(',');\r\n  return{x:Number(x),y:Number(y)};\r\n});\r\n\r\nconst zodObject = z.object({foo:coordinatesType});\r\nconst query = sql.type(zodObject)`SELECT '1,2' as foo`;\r\nconst result = await pool.one(query);\r\nexpectTypeOf(result).toMatchTypeOf\u003c{foo:{x:number,y:number}}\u003e();\r\n\r\nt.deepEqual(result,{foo:{x:1,y:2}});\r\n```\r\n\r\n### What's next?\r\n\r\nNow that we have a framework for instrumenting queries, the next step is automate schema and type generation as much as possible. For that, check out the work that mmkal has been doing in https://www.npmjs.com/package/@slonik/typegen","comments_url":"https://lobste.rs/s/tujkgh/validating_postgresql_results","submitter_user":{"username":"gajus","created_at":"2019-04-09T12:10:10.000-05:00","is_admin":false,"about":"Co-Founder of Contra","is_moderator":false,"karma":14,"avatar_url":"/avatars/gajus-100.png","invited_by_user":"benharri","github_username":"gajus","twitter_username":"kuizinas"},"tags":["databases","nodejs"]},{"short_id":"ugscl4","short_id_url":"https://lobste.rs/s/ugscl4","created_at":"2022-08-07T16:59:21.000-05:00","title":"From roots to polynomials","url":"http://blog.pkh.me/p/31-from-roots-to-polynomials.html","score":2,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ugscl4/from_roots_polynomials","submitter_user":{"username":"ubitux","created_at":"2021-06-10T06:08:35.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":97,"avatar_url":"/avatars/ubitux-100.png","invited_by_user":"gerikson"},"tags":["math"]},{"short_id":"osg9sc","short_id_url":"https://lobste.rs/s/osg9sc","created_at":"2022-08-07T15:57:42.000-05:00","title":"./concord.sh :: UEFI Secure Boot the Right Way","url":"https://concord.sh/posts/2022/08/uefi-secure-boot-the-right-way/","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/osg9sc/concord_sh_uefi_secure_boot_right_way","submitter_user":{"username":"Seirdy","created_at":"2020-01-28T20:13:49.000-06:00","is_admin":false,"about":"He/Him, It/Its. Full bio, contact info, etc. on my site's [about page](https://seirdy.one/about/).\r\n\r\nI also have a Gemini capsule at gemini://seirdy.one\r\n\r\nTech interests: accessibility, the IndieWeb, software freedom.","is_moderator":false,"karma":777,"avatar_url":"/avatars/Seirdy-100.png","invited_by_user":"Hail_Spacecake","github_username":"Seirdy"},"tags":["linux","osdev","security","systemd"]},{"short_id":"o1gge9","short_id_url":"https://lobste.rs/s/o1gge9","created_at":"2022-08-07T15:27:36.000-05:00","title":"SSVG: Scalable Scalable Vector Graphics","url":"https://ssvg.io/","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o1gge9/ssvg_scalable_scalable_vector_graphics","submitter_user":{"username":"jeffhuang","created_at":"2014-04-14T11:23:50.000-05:00","is_admin":false,"about":"I'm a computer scientist in Providence, Rhode Island","is_moderator":false,"karma":218,"avatar_url":"/avatars/jeffhuang-100.png","invited_by_user":"ericsampson"},"tags":["art","javascript","performance","web"]},{"short_id":"cekies","short_id_url":"https://lobste.rs/s/cekies","created_at":"2022-08-07T15:11:48.000-05:00","title":"Approaches for interleaving several stderr logging streams","url":"","score":4,"flags":0,"comment_count":3,"description":"\u003cp\u003eI am writing a test for a toy distributed system. In the test, I spin two components locally and make them talk to each other. I use printf for debugging, so I want a simple and unambiguous way to \u003cem\u003eget\u003c/em\u003e the node’s stderr.\u003c/p\u003e\n\u003cp\u003eThe problem is that there are two stderr streams, but my driver program only have one. I need to come of with some way to multiplex several streams into one, and so I am wondering what’s the prior art here. I am looking for simplicity and convenience, rather than robustness and production readiness. The options I can think about, none of which are particularly appealing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estream logs to files, split my terminal and \u003ccode\u003etail -f\u003c/code\u003e – probably what I want in terms of final result, but requires a lot of manual steps after I run the binary. Also makes it annoying to \u003ccode\u003e^C\u003c/code\u003e the whole thing.\u003c/li\u003e\n\u003cli\u003ejust inherit stderr – simple, but it’s hard to say which output comes from which node\u003c/li\u003e\n\u003cli\u003epipe stderrs and append node ids to each line/record, or layout output as n columns – my current favorite, but needs a fair amount of programming and I am unsure about details\u003c/li\u003e\n\u003cli\u003ebuffer stderr and print continous chunks at the end of the test – I want live output\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIs there perhaps some secret ANSI \u003cdel\u003echeat\u003c/del\u003e escape code to unlock bonus file descriptors for stderr2 and such? Or perhaps there’s some existing library which implements something like mini-tmux? Really, interested in any prior art here, as I feel like I’ve seen this problem several times, but I can’t recall any nifty real-world solutions.\u003c/p\u003e\n","description_plain":"I am writing a test for a toy distributed system. In the test, I spin two components locally and make them talk to each other. I use printf for debugging, so I want a simple and unambiguous way to *get* the node's stderr. \r\n\r\nThe problem is that there are two stderr streams, but my driver program only have one. I need to come of with some way to multiplex several streams into one, and so I am wondering what's the prior art here. I am looking for simplicity and convenience, rather than robustness and production readiness. The options I can think about, none of which are particularly appealing: \r\n\r\n* stream logs to files, split my terminal and `tail -f` -- probably what I want in terms of final result, but requires a lot of manual steps after I run the binary. Also makes it annoying to `^C` the whole thing. \r\n* just inherit stderr -- simple, but it's hard to say which output comes from which node\r\n* pipe stderrs and append node ids to each line/record, or layout output as n columns -- my current favorite, but needs a fair amount of programming and I am unsure about details\r\n* buffer stderr and print continous chunks at the end of the test -- I want live output\r\n\r\nIs there perhaps some secret ANSI ~cheat~ escape code to unlock bonus file descriptors for stderr2 and such? Or perhaps there's some existing library which implements something like mini-tmux? Really, interested in any prior art here, as I feel like I've seen this problem several times, but I can't recall any nifty real-world solutions.","comments_url":"https://lobste.rs/s/cekies/approaches_for_interleaving_several","submitter_user":{"username":"matklad","created_at":"2019-07-02T07:23:10.000-05:00","is_admin":false,"about":"Working on IDE support for the Rust language.\r\n\r\nhttps://github.com/matklad","is_moderator":false,"karma":3294,"avatar_url":"/avatars/matklad-100.png","invited_by_user":"skade","github_username":"matklad"},"tags":["ask","debugging"]},{"short_id":"vjkcnh","short_id_url":"https://lobste.rs/s/vjkcnh","created_at":"2022-08-07T12:51:30.000-05:00","title":"Shaving 40% off Google's B-Tree Implementation with Go Generics","url":"https://thenewstack.io/shaving-40-off-googles-b-tree-implementation-with-go-generics/","score":5,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vjkcnh/shaving_40_off_google_s_b_tree","submitter_user":{"username":"sanxiyn","created_at":"2015-01-21T09:51:34.000-06:00","is_admin":false,"about":"I made the initial port of Rust to ARM and Android.","is_moderator":false,"karma":9874,"avatar_url":"/avatars/sanxiyn-100.png","invited_by_user":"steveklabnik","github_username":"sanxiyn","twitter_username":"sanxiyn"},"tags":["go","performance"]},{"short_id":"lvcskk","short_id_url":"https://lobste.rs/s/lvcskk","created_at":"2022-08-07T11:32:44.000-05:00","title":"wisp: Whitespace to Lisp [alternate Lisp syntax]","url":"https://www.draketo.de/software/wisp","score":10,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lvcskk/wisp_whitespace_lisp_alternate_lisp","submitter_user":{"username":"snej","created_at":"2020-01-26T19:05:30.000-06:00","is_admin":false,"about":"Mobile Architect at Couchbase. Apple veteran, 1991-2007 (iChat, Safari, Java, OpenDoc, AppleScript.)\r\nBragging rights: I came up with the speech bubbles that most chat GUIs use nowadays.\r\nIn my spare time I play guitar and buy synthesizers.","is_moderator":false,"karma":6300,"avatar_url":"/avatars/snej-100.png","invited_by_user":"bbrks","github_username":"snej"},"tags":["lisp"]},{"short_id":"tzdyjw","short_id_url":"https://lobste.rs/s/tzdyjw","created_at":"2022-08-07T11:20:05.000-05:00","title":"How Google played with bad cryptography","url":"https://cendyne.dev/posts/2022-08-07-how-google-played-with-bad-cryptography.html","score":10,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tzdyjw/how_google_played_with_bad_cryptography","submitter_user":{"username":"soatok","created_at":"2020-10-09T21:36:56.000-05:00","is_admin":false,"about":"I'm a furry and I blog about cryptography stuff.","is_moderator":false,"karma":1690,"avatar_url":"/avatars/soatok-100.png","invited_by_user":"sarciszewski","github_username":"soatok","twitter_username":"SoatokDhole"},"tags":["cryptography","security"]},{"short_id":"mok2qq","short_id_url":"https://lobste.rs/s/mok2qq","created_at":"2022-08-07T10:52:32.000-05:00","title":"GNUStep - History and future","url":"https://www.livinginthefuture.rocks/e/episode-7-gnustep/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mok2qq/gnustep_history_future","submitter_user":{"username":"drs","created_at":"2015-11-24T15:34:32.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":680,"avatar_url":"/avatars/drs-100.png","invited_by_user":"brynet"},"tags":["audio","objectivec","unix"]},{"short_id":"50lfj0","short_id_url":"https://lobste.rs/s/50lfj0","created_at":"2022-08-07T10:44:12.000-05:00","title":"How Carbon transpiles to C++","url":"https://itnext.io/c-syntax-sucks-and-carbon-fixes-it-744efe5cae71","score":5,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/50lfj0/how_carbon_transpiles_c","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"🐋\r\nhttps://raymii.org","is_moderator":false,"karma":17190,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["c++","compilers"]},{"short_id":"85jhse","short_id_url":"https://lobste.rs/s/85jhse","created_at":"2022-08-07T08:59:24.000-05:00","title":"Using Landlock to Sandbox GNU Make","url":"https://justine.lol/make/","score":24,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/85jhse/using_landlock_sandbox_gnu_make","submitter_user":{"username":"wizardishungry","created_at":"2018-08-13T10:39:55.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1000,"avatar_url":"/avatars/wizardishungry-100.png","invited_by_user":"kusuriya","github_username":"WIZARDISHUNGRY","twitter_username":"WIZARDISHUNGRY","keybase_signatures":[{"kb_username":"wizardishungry","sig_hash":"c5e8c0f01d3e047b18f748ada5a8201b2cce3bf5bb2477ec7d404b1c99a5d94b0f"}]},"tags":["linux","programming","security"]},{"short_id":"ea9y7y","short_id_url":"https://lobste.rs/s/ea9y7y","created_at":"2022-08-07T08:58:42.000-05:00","title":"The pervasive effects of C's malloc() and free() on C APIs","url":"https://utcc.utoronto.ca/~cks/space/blog/programming/CAPIsEffectsOfMalloc","score":11,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ea9y7y/pervasive_effects_c_s_malloc_free_on_c_apis","submitter_user":{"username":"technetium","created_at":"2020-02-06T19:52:39.000-06:00","is_admin":false,"about":"A sentient lump of a certain high-density material.","is_moderator":false,"karma":4458,"avatar_url":"/avatars/technetium-100.png","invited_by_user":"ngoldbaum"},"tags":["c"]},{"short_id":"bdem9v","short_id_url":"https://lobste.rs/s/bdem9v","created_at":"2022-08-07T08:47:36.000-05:00","title":"Compilation by Program Transformation (1989)","url":"https://mumble.net/~kelsey/kelsey-diss-2012.pdf","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bdem9v/compilation_by_program_transformation","submitter_user":{"username":"Corbin","created_at":"2018-10-13T21:40:32.000-05:00","is_admin":false,"about":"Secure distributed computation should not be hard.\r\n\r\nmi pu'i tavla fo lo jbobau .i mi'e la korvo","is_moderator":false,"karma":3960,"avatar_url":"/avatars/Corbin-100.png","invited_by_user":"infinisil"},"tags":["compilers","lisp","pdf","plt"]},{"short_id":"zasri6","short_id_url":"https://lobste.rs/s/zasri6","created_at":"2022-08-07T06:57:04.000-05:00","title":"GitHub: Commit comments no longer appear in the pull request timeline","url":"https://github.blog/changelog/2022-08-04-commit-comments-no-longer-appear-in-the-pull-request-timeline/","score":3,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zasri6/github_commit_comments_no_longer_appear","submitter_user":{"username":"cherryblossom","created_at":"2022-01-19T05:53:28.000-06:00","is_admin":false,"about":"This is an OpenPGP proof that connects my OpenPGP key to this Lobste.rs account. For details check out https://docs.keyoxide.org/advanced/openpgp-proofs/\r\n\r\n[Verifying my OpenPGP key: openpgp4fpr:D5A75F4998534FB47C839A9D03B34648D6DEB639]","is_moderator":false,"karma":310,"avatar_url":"/avatars/cherryblossom-100.png","invited_by_user":"pja","github_username":"cherryblossom000","keybase_signatures":[{"kb_username":"cherryblossom000","sig_hash":"9a8f9a17ec89a4f7f31983e07c24631e62326ec31e943ccad85aad13a21d213f0f"}]},"tags":["programming"]},{"short_id":"821km3","short_id_url":"https://lobste.rs/s/821km3","created_at":"2022-08-07T06:38:30.000-05:00","title":"Writing a bootstrapping compiler and the progressive translation of Derw - July 2022","url":"https://derw.substack.com/p/writing-a-bootstrapping-compiler?sd=pf","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/821km3/writing_bootstrapping_compiler","submitter_user":{"username":"eeue56","created_at":"2016-10-30T11:07:08.000-05:00","is_admin":false,"about":"Work at Schibsted. Working on [Derw](https://twitter.com/derwlang)","is_moderator":false,"karma":524,"avatar_url":"/avatars/eeue56-100.png","invited_by_user":"355E3B","github_username":"eeue56","twitter_username":"derwlang"},"tags":["elm","plt"]},{"short_id":"tkxju0","short_id_url":"https://lobste.rs/s/tkxju0","created_at":"2022-08-07T05:12:20.000-05:00","title":"Technical reasons to choose FreeBSD over GNU/Linux (2020)","url":"https://unixsheikh.com/articles/technical-reasons-to-choose-freebsd-over-linux.html","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tkxju0/technical_reasons_choose_freebsd_over","submitter_user":{"username":"gmem","created_at":"2021-02-05T16:55:24.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":276,"avatar_url":"/avatars/gmem-100.png","invited_by_user":"Slackwise","github_username":"gmemstr","twitter_username":"gmem_"},"tags":["freebsd","linux"]},{"short_id":"fbadro","short_id_url":"https://lobste.rs/s/fbadro","created_at":"2022-08-07T02:32:21.000-05:00","title":"Rob Pike's APL like language written in go","url":"https://pkg.go.dev/robpike.io/ivy","score":18,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fbadro/rob_pike_s_apl_like_language_written_go","submitter_user":{"username":"nomemory","created_at":"2022-04-06T10:18:25.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":547,"avatar_url":"/avatars/nomemory-100.png","invited_by_user":"epilys","github_username":"nomemory"},"tags":["apl","go"]},{"short_id":"mfdofb","short_id_url":"https://lobste.rs/s/mfdofb","created_at":"2022-08-07T02:28:55.000-05:00","title":"sexpc (C as S-expressions)","url":"https://idiomdrottning.org/sexpc","score":13,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mfdofb/sexpc_c_as_s_expressions","submitter_user":{"username":"teiresias","created_at":"2018-04-13T15:43:44.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1139,"avatar_url":"/avatars/teiresias-100.png","invited_by_user":"alynpost"},"tags":["lisp"]},{"short_id":"9pc2sk","short_id_url":"https://lobste.rs/s/9pc2sk","created_at":"2022-08-06T21:11:24.000-05:00","title":"A Guile Steel smelting pot","url":"https://dustycloud.org/blog/guile-steel-smelting-pot/","score":21,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9pc2sk/guile_steel_smelting_pot","submitter_user":{"username":"Drakonis","created_at":"2016-09-05T12:37:08.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":115,"avatar_url":"/avatars/Drakonis-100.png","invited_by_user":"albino"},"tags":["lisp"]},{"short_id":"gl7lah","short_id_url":"https://lobste.rs/s/gl7lah","created_at":"2022-08-06T19:15:54.000-05:00","title":"Genesis: God's actual programming language","url":"https://github.com/elonlit/Genesis","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gl7lah/genesis_god_s_actual_programming","submitter_user":{"username":"technetium","created_at":"2020-02-06T19:52:39.000-06:00","is_admin":false,"about":"A sentient lump of a certain high-density material.","is_moderator":false,"karma":4458,"avatar_url":"/avatars/technetium-100.png","invited_by_user":"ngoldbaum"},"tags":["plt","satire"]},{"short_id":"37wrvf","short_id_url":"https://lobste.rs/s/37wrvf","created_at":"2022-08-06T17:56:14.000-05:00","title":"Rust and WebAssembly without a Bundler","url":"https://tung.github.io/posts/rust-and-webassembly-without-a-bundler/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/37wrvf/rust_webassembly_without_bundler","submitter_user":{"username":"itamarst","created_at":"2016-04-28T10:05:47.000-05:00","is_admin":false,"about":"Writing about Python performance and faster development at https://pythonspeed.com, as well as offering consulting services. Writing about work/life balance and other software engineering skills at https://codewithoutrules.com.\r\n","is_moderator":false,"karma":4548,"avatar_url":"/avatars/itamarst-100.png","invited_by_user":"0x2ba22e11"},"tags":["rust","wasm"]},{"short_id":"k32mrb","short_id_url":"https://lobste.rs/s/k32mrb","created_at":"2022-08-06T16:15:47.000-05:00","title":"how floating point works","url":"https://www.youtube.com/watch?v=dQhj5RGtag0","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/k32mrb/how_floating_point_works","submitter_user":{"username":"Hail_Spacecake","created_at":"2016-06-07T16:07:14.000-05:00","is_admin":false,"about":"Programmer by trade and avocation in the SF Bay Area. ","is_moderator":false,"karma":4601,"avatar_url":"/avatars/Hail_Spacecake-100.png","invited_by_user":"awal"},"tags":["math","programming","video"]},{"short_id":"uj9szd","short_id_url":"https://lobste.rs/s/uj9szd","created_at":"2022-08-06T16:08:44.000-05:00","title":"Cramming 'Papers, Please' Onto Phones","url":"https://dukope.com/devlogs/papers-please/mobile/","score":82,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uj9szd/cramming_papers_please_onto_phones","submitter_user":{"username":"werat","created_at":"2021-03-29T12:59:48.000-05:00","is_admin":false,"about":"Software engineer at Google (Stadia, devtools). Making your favorite games run in the cloud.","is_moderator":false,"karma":346,"avatar_url":"/avatars/werat-100.png","invited_by_user":"hoistbypetard"},"tags":["games","mobile"]},{"short_id":"hkr75z","short_id_url":"https://lobste.rs/s/hkr75z","created_at":"2022-08-06T15:53:09.000-05:00","title":"Stack frame layout on x86-64","url":"https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hkr75z/stack_frame_layout_on_x86_64","submitter_user":{"username":"LenFalken","created_at":"2016-03-07T10:51:31.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":2070,"avatar_url":"/avatars/LenFalken-100.png","invited_by_user":"ngoldbaum"},"tags":["assembly","programming"]}]