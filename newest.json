[{"short_id":"y2wxll","short_id_url":"https://lobste.rs/s/y2wxll","created_at":"2023-03-24T00:07:11.000-05:00","title":"How to speed up the Rust compiler in March 2023","url":"https://nnethercote.github.io/2023/03/24/how-to-speed-up-the-rust-compiler-in-march-2023.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/y2wxll/how_speed_up_rust_compiler_march_2023","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":96255,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["rust"]},{"short_id":"mtkplt","short_id_url":"https://lobste.rs/s/mtkplt","created_at":"2023-03-23T23:15:27.000-05:00","title":"$30 Lenovo N42 Chromebook converted into a full fledged Nix/OS machine","url":"https://twitter.com/mikecodemonkey/status/1638635840355311616","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mtkplt/30_lenovo_n42_chromebook_converted_into","submitter_user":{"username":"nixinator","created_at":"2023-03-11T01:00:45.000-06:00","is_admin":false,"about":"2038","is_moderator":false,"karma":15,"avatar_url":"/avatars/nixinator-100.png","invited_by_user":"kylerisse"},"tags":["hardware","nix"]},{"short_id":"ptbkjj","short_id_url":"https://lobste.rs/s/ptbkjj","created_at":"2023-03-23T16:15:14.000-05:00","title":"Planning Go 1.21 Cryptography Work","url":"https://words.filippo.io/dispatches/go-1-21-plan/","score":3,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ptbkjj/planning_go_1_21_cryptography_work","submitter_user":{"username":"carlmjohnson","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carl M. Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":9003,"avatar_url":"/avatars/carlmjohnson-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson","twitter_username":"carlmjohnson"},"tags":["cryptography","go"]},{"short_id":"khsmgw","short_id_url":"https://lobste.rs/s/khsmgw","created_at":"2023-03-23T16:00:34.000-05:00","title":"How to use Alpaca-LoRA to fine-tune a model like ChatGPT","url":"https://replicate.com/blog/fine-tune-alpaca-with-lora","score":2,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/khsmgw/how_use_alpaca_lora_fine_tune_model_like","submitter_user":{"username":"river","created_at":"2016-04-03T11:33:05.000-05:00","is_admin":false,"about":"(Deleted account)","is_moderator":false,"karma":5364,"avatar_url":"/avatars/river-100.png","invited_by_user":"355E3B"},"tags":["ai"]},{"short_id":"bcw9zx","short_id_url":"https://lobste.rs/s/bcw9zx","created_at":"2023-03-23T15:05:04.000-05:00","title":"The Last Question (1956)","url":"http://users.ece.cmu.edu/~gamvrosi/thelastq.html","score":0,"flags":2,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bcw9zx/last_question_1956","submitter_user":{"username":"river","created_at":"2016-04-03T11:33:05.000-05:00","is_admin":false,"about":"(Deleted account)","is_moderator":false,"karma":5364,"avatar_url":"/avatars/river-100.png","invited_by_user":"355E3B"},"tags":["ai","culture"]},{"short_id":"lkwafd","short_id_url":"https://lobste.rs/s/lkwafd","created_at":"2023-03-23T15:03:08.000-05:00","title":"bisect","url":"https://gitlab.com/engmark/bisect","score":7,"flags":0,"comment_count":0,"description":"\u003cp\u003eFind the first line in the input file which causes the given command to fail.\nThis assumes that there is a single \u003cem\u003einsertion point,\u003c/em\u003e where running the command\nwith any line before the insertion point will \u003cem\u003esucceed,\u003c/em\u003e and running with the\ninsertion point line or any subsequent line causes it to \u003cem\u003efail.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is a general tool similar to \u003ccode\u003egit bisect\u003c/code\u003e, a Git built-in which can be used\nto determine which commit introduced a bug.\u003c/p\u003e\n\u003cp\u003eSince \u003ccode\u003ebisect.bash\u003c/code\u003e runs a binary search it should finish looking for the\noffending line in at most log_2(N)+2 tries (see tests).\u003c/p\u003e\n\u003cstrong\u003eSynopsis\u003c/strong\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e./bisect.bash COMMAND FILE\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eCOMMAND\u003c/code\u003e should reference a variable called \u003ccode\u003eENTRY\u003c/code\u003e, referring to the piece of\nthe input currently being processed.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eFILE\u003c/code\u003e should be the path to a normal file with entries, each terminated by a\nnewline character.\u003c/p\u003e\n\u003cstrong\u003eExamples\u003c/strong\u003e\n\u003cp\u003ePrints the insertion point, if there is one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ printf '%s\\n' 0 1 2 \u0026gt; input.txt\n$ ./bisect.bash '(( \"$ENTRY\" == 0 ))' input.txt\n1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFails if there is no insertion point:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ printf '%s\\n' 0 1 2 \u0026gt; input.txt\n$ ./bisect.bash '(( \"$ENTRY\" \u0026lt; 5 ))' input.txt\nNo insertion point found.\n$ echo $?\n3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnable debug mode with \u003ccode\u003eDEBUG=1\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ printf '%s\\n' 0 1 2 \u0026gt; input.txt\n$ DEBUG=1 ./bisect.bash '(( \"$ENTRY\" == 0 ))' input.txt \u0026gt;/dev/null\nRemaining entry count: 3.\nRemaining entry count: 2.\nRemaining entry count: 1.\nNumber of entries checked: 3.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnable trace mode with \u003ccode\u003eDEBUG=2\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ printf '%s\\n' 0 1 2 \u0026gt; input.txt\n$ DEBUG=2 ./bisect.bash '(( \"$ENTRY\" == 0 ))' input.txt \u0026gt;/dev/null\nRemaining entry count: 3.\nFirst split file entry count: 2.\nSecond split file entry count: 1.\nChecking entry: “1”.\nCommand failed.\nRemaining entry count: 2.\nFirst split file entry count: 1.\nSecond split file entry count: 1.\nChecking entry: “0”.\nCommand successful.\nRemaining entry count: 1.\nFirst split file entry count: 1.\nChecking entry: “1”.\nCommand failed.\nNumber of entries checked: 3.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eAdvanced use\u003c/strong\u003e\n\u003cp\u003eConsider a situation where you have a reference to a commit in another\nrepository, and you want to bump that commit to the latest version of the\nupstream repository. But \u003ccode\u003eHEAD\u003c/code\u003e of the upstream repository breaks your build, so\nyou have to figure out which commit in \u003cem\u003ethe other repository\u003c/em\u003e broke things for\n\u003cem\u003eyour\u003c/em\u003e repository.\u003c/p\u003e\n\u003cp\u003eFirst, get a list of the commits from the current working one to a known bad one\n(typically \u003ccode\u003eHEAD\u003c/code\u003e of the default branch). For example, if the bad commit was ID\n\u003ccode\u003eabc123\u003c/code\u003e according to the Git log, you could run\n\u003ccode\u003egit log --format=%H --reverse abc123.. \u0026gt; commits.txt\u003c/code\u003e in the upstream repo to\nget a file with the relevant commit IDs.\u003c/p\u003e\n\u003cp\u003eThen you need to figure out a test command, like\n\u003ccode\u003enix-build --attr foo tests/default.nix\u003c/code\u003e, \u003ccode\u003enpm test\u003c/code\u003e,\n\u003ccode\u003epytest test_foo.py::test_name\u003c/code\u003e, or something else entirely. If this command is\nfast, all the better, since it’ll run up to log_2(N)+2 times to check through\n$N$ commits.\u003c/p\u003e\n\u003cp\u003eAt this point you can run \u003ccode\u003e/path/to/bisect.bash COMMAND /path/to/commits.txt\u003c/code\u003e to\nfind the first offending commit.\u003c/p\u003e\n\u003cp\u003eAs a concrete example of this, I wrote \u003ccode\u003ebisect.bash\u003c/code\u003e to bump nixpkgs in\npoetry2nix, since \u003ccode\u003eHEAD\u003c/code\u003e of nixpkgs \u003ccode\u003emaster\u003c/code\u003e was breaking the \u003ccode\u003enixops\u003c/code\u003e package\nbuild. To figure out which commit broke things, starting from the \u003ccode\u003eHEAD\u003c/code\u003e of the\ndefault branch in all the repos:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-console\"\u003e$ cd /path/to/poetry2nix\n$ good=\"$(jq --raw-output .nixpkgs.rev nix/sources.json)\"\n$ cd /path/to/nixpkgs\n$ git log --format=%H --reverse \"$good\".. \u0026gt; commits.txt\n$ cd -\n$ /path/to/bisect/bisect.bash 'niv update --rev=\"$ENTRY\" nixpkgs \u0026amp;\u0026amp; nix-build --attr nixops tests/default.nix' /path/to/nixpkgs/commits.txt\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter building 15 out of the 32,683 commits in that range, the command finished\nsuccessfully, determining that commit ceab3fb5f4ae430845e93c457b5353dc8b019e2b\nof nixpkgs broke the nixops build in poetry2nix.\u003c/p\u003e\n","description_plain":"Find the first line in the input file which causes the given command to fail.\r\nThis assumes that there is a single _insertion point,_ where running the command\r\nwith any line before the insertion point will _succeed,_ and running with the\r\ninsertion point line or any subsequent line causes it to _fail._\r\n\r\nThis is a general tool similar to `git bisect`, a Git built-in which can be used\r\nto determine which commit introduced a bug.\r\n\r\nSince `bisect.bash` runs a binary search it should finish looking for the\r\noffending line in at most log_2(N)+2 tries (see tests).\r\n\r\n## Synopsis\r\n\r\n```bash\r\n./bisect.bash COMMAND FILE\r\n```\r\n\r\n`COMMAND` should reference a variable called `ENTRY`, referring to the piece of\r\nthe input currently being processed.\r\n\r\n`FILE` should be the path to a normal file with entries, each terminated by a\r\nnewline character.\r\n\r\n## Examples\r\n\r\nPrints the insertion point, if there is one:\r\n\r\n```bash\r\n$ printf '%s\\n' 0 1 2 \u003e input.txt\r\n$ ./bisect.bash '(( \"$ENTRY\" == 0 ))' input.txt\r\n1\r\n```\r\n\r\nFails if there is no insertion point:\r\n\r\n```bash\r\n$ printf '%s\\n' 0 1 2 \u003e input.txt\r\n$ ./bisect.bash '(( \"$ENTRY\" \u003c 5 ))' input.txt\r\nNo insertion point found.\r\n$ echo $?\r\n3\r\n```\r\n\r\nEnable debug mode with `DEBUG=1`:\r\n\r\n```bash\r\n$ printf '%s\\n' 0 1 2 \u003e input.txt\r\n$ DEBUG=1 ./bisect.bash '(( \"$ENTRY\" == 0 ))' input.txt \u003e/dev/null\r\nRemaining entry count: 3.\r\nRemaining entry count: 2.\r\nRemaining entry count: 1.\r\nNumber of entries checked: 3.\r\n```\r\n\r\nEnable trace mode with `DEBUG=2`:\r\n\r\n```bash\r\n$ printf '%s\\n' 0 1 2 \u003e input.txt\r\n$ DEBUG=2 ./bisect.bash '(( \"$ENTRY\" == 0 ))' input.txt \u003e/dev/null\r\nRemaining entry count: 3.\r\nFirst split file entry count: 2.\r\nSecond split file entry count: 1.\r\nChecking entry: “1”.\r\nCommand failed.\r\nRemaining entry count: 2.\r\nFirst split file entry count: 1.\r\nSecond split file entry count: 1.\r\nChecking entry: “0”.\r\nCommand successful.\r\nRemaining entry count: 1.\r\nFirst split file entry count: 1.\r\nChecking entry: “1”.\r\nCommand failed.\r\nNumber of entries checked: 3.\r\n```\r\n\r\n## Advanced use\r\n\r\nConsider a situation where you have a reference to a commit in another\r\nrepository, and you want to bump that commit to the latest version of the\r\nupstream repository. But `HEAD` of the upstream repository breaks your build, so\r\nyou have to figure out which commit in _the other repository_ broke things for\r\n_your_ repository.\r\n\r\nFirst, get a list of the commits from the current working one to a known bad one\r\n(typically `HEAD` of the default branch). For example, if the bad commit was ID\r\n`abc123` according to the Git log, you could run\r\n`git log --format=%H --reverse abc123.. \u003e commits.txt` in the upstream repo to\r\nget a file with the relevant commit IDs.\r\n\r\nThen you need to figure out a test command, like\r\n`nix-build --attr foo tests/default.nix`, `npm test`,\r\n`pytest test_foo.py::test_name`, or something else entirely. If this command is\r\nfast, all the better, since it'll run up to log_2(N)+2 times to check through\r\n$N$ commits.\r\n\r\nAt this point you can run `/path/to/bisect.bash COMMAND /path/to/commits.txt` to\r\nfind the first offending commit.\r\n\r\nAs a concrete example of this, I wrote `bisect.bash` to bump nixpkgs in\r\npoetry2nix, since `HEAD` of nixpkgs `master` was breaking the `nixops` package\r\nbuild. To figure out which commit broke things, starting from the `HEAD` of the\r\ndefault branch in all the repos:\r\n\r\n```console\r\n$ cd /path/to/poetry2nix\r\n$ good=\"$(jq --raw-output .nixpkgs.rev nix/sources.json)\"\r\n$ cd /path/to/nixpkgs\r\n$ git log --format=%H --reverse \"$good\".. \u003e commits.txt\r\n$ cd -\r\n$ /path/to/bisect/bisect.bash 'niv update --rev=\"$ENTRY\" nixpkgs \u0026\u0026 nix-build --attr nixops tests/default.nix' /path/to/nixpkgs/commits.txt\r\n```\r\n\r\nAfter building 15 out of the 32,683 commits in that range, the command finished\r\nsuccessfully, determining that commit ceab3fb5f4ae430845e93c457b5353dc8b019e2b\r\nof nixpkgs broke the nixops build in poetry2nix.","comments_url":"https://lobste.rs/s/lkwafd/bisect","submitter_user":{"username":"l0b0","created_at":"2022-02-14T02:54:31.000-06:00","is_admin":false,"about":"Open source developer.","is_moderator":false,"karma":755,"avatar_url":"/avatars/l0b0-100.png","invited_by_user":"gerikson","github_username":"l0b0"},"tags":["linux","programming","show"]},{"short_id":"w7zmi0","short_id_url":"https://lobste.rs/s/w7zmi0","created_at":"2023-03-23T14:59:09.000-05:00","title":"Sparks of Artificial General Intelligence: Early experiments with GPT-4","url":"https://arxiv.org/pdf/2303.12712.pdf","score":2,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/w7zmi0/sparks_artificial_general_intelligence","submitter_user":{"username":"river","created_at":"2016-04-03T11:33:05.000-05:00","is_admin":false,"about":"(Deleted account)","is_moderator":false,"karma":5364,"avatar_url":"/avatars/river-100.png","invited_by_user":"355E3B"},"tags":["ai","pdf"]},{"short_id":"931961","short_id_url":"https://lobste.rs/s/931961","created_at":"2023-03-23T14:49:34.000-05:00","title":"Notes on FFTs: for implementers","url":"https://fgiesen.wordpress.com/2023/03/19/notes-on-ffts-for-implementers/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/931961/notes_on_ffts_for_implementers","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":96255,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["programming"]},{"short_id":"fbflkx","short_id_url":"https://lobste.rs/s/fbflkx","created_at":"2023-03-23T14:21:04.000-05:00","title":"Implementing VisiCalc","url":"https://www.landley.net/history/mirror/apple2/implementingvisicalc.html","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fbflkx/implementing_visicalc","submitter_user":{"username":"technetium","created_at":"2020-02-06T19:52:39.000-06:00","is_admin":false,"about":"A sentient lump of a certain high-density material.\r\n\r\nI'm working on a traditional roguelike: [GitHub](https://github.com/kiedtl/roguelike)","is_moderator":false,"karma":5192,"avatar_url":"/avatars/technetium-100.png","invited_by_user":"ngoldbaum","github_username":"kiedtl"},"tags":["historical"]},{"short_id":"ymucj0","short_id_url":"https://lobste.rs/s/ymucj0","created_at":"2023-03-23T13:32:06.000-05:00","title":"Automatically download missing dynamic lib debug symbols in gdb and debian","url":"https://pitsidianak.is/blog/posts/2023-03-20_debian_gdb_auto_dl_dbg.html","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ymucj0/automatically_download_missing_dynamic","submitter_user":{"username":"epilys","created_at":"2017-05-09T09:29:51.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1475,"avatar_url":"/avatars/epilys-100.png","invited_by_user":"river","github_username":"epilys"},"tags":["debugging"]},{"short_id":"8kng64","short_id_url":"https://lobste.rs/s/8kng64","created_at":"2023-03-23T13:10:20.000-05:00","title":"Speeding up text processing in Python (is hard)","url":"https://pythonspeed.com/articles/faster-text-processing/","score":9,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8kng64/speeding_up_text_processing_python_is","submitter_user":{"username":"itamarst","created_at":"2016-04-28T10:05:47.000-05:00","is_admin":false,"about":"Writing about Python performance and faster development at https://pythonspeed.com, as well as offering consulting services. Writing about work/life balance and other software engineering skills at https://codewithoutrules.com.\r\n","is_moderator":false,"karma":5216,"avatar_url":"/avatars/itamarst-100.png","invited_by_user":"0x2ba22e11"},"tags":["performance","python"]},{"short_id":"jwljsv","short_id_url":"https://lobste.rs/s/jwljsv","created_at":"2023-03-23T12:41:00.000-05:00","title":"Introducing the Framework Laptop 16 and both Intel and AMD-powered Framework Laptop 13","url":"https://frame.work/blog/introducing-the-framework-laptop-16-and-both-intel-and-amd-powered-framework-laptop-13","score":23,"flags":2,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jwljsv/introducing_framework_laptop_16_both","submitter_user":{"username":"winter","created_at":"2021-02-09T16:40:55.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":1014,"avatar_url":"/avatars/winter-100.png","invited_by_user":"ave","github_username":"winterqt"},"tags":["hardware"]},{"short_id":"edznnr","short_id_url":"https://lobste.rs/s/edznnr","created_at":"2023-03-23T11:38:19.000-05:00","title":"Finding and fixing eventual consistency with Stripe events","url":"https://blog.sequin.io/finding-and-fixing-eventual-consistency-with-stripe-events/","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/edznnr/finding_fixing_eventual_consistency","submitter_user":{"username":"acco","created_at":"2015-10-29T16:32:48.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":260,"avatar_url":"/avatars/acco-100.png","invited_by_user":"mattty","twitter_username":"accomazzo"},"tags":["api"]},{"short_id":"cvkobc","short_id_url":"https://lobste.rs/s/cvkobc","created_at":"2023-03-23T11:25:32.000-05:00","title":"Framework Next Level Event | 2023 Launch Event","url":"https://www.youtube.com/watch?v=ccpsyRipHlk","score":17,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cvkobc/framework_next_level_event_2023_launch","submitter_user":{"username":"JulianWgs","created_at":"2020-09-24T14:54:13.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1083,"avatar_url":"/avatars/JulianWgs-100.png","invited_by_user":"355E3B","github_username":"JulianWgs"},"tags":["hardware","video"]},{"short_id":"fv5sjt","short_id_url":"https://lobste.rs/s/fv5sjt","created_at":"2023-03-23T10:41:05.000-05:00","title":"Why C++ Sails When the Vasa Sank (2014)","url":"https://m.youtube.com/watch?v=ltCgzYcpFUI","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fv5sjt/why_c_sails_when_vasa_sank_2014","submitter_user":{"username":"matklad","created_at":"2019-07-02T07:23:10.000-05:00","is_admin":false,"about":"https://github.com/matklad","is_moderator":false,"karma":5090,"avatar_url":"/avatars/matklad-100.png","invited_by_user":"skade","github_username":"matklad"},"tags":["c++","plt","video"]},{"short_id":"nl4p5k","short_id_url":"https://lobste.rs/s/nl4p5k","created_at":"2023-03-23T10:14:21.000-05:00","title":"lld 16 ELF changes","url":"https://maskray.me/blog/2023-03-19-lld-16-elf-changes","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nl4p5k/lld_16_elf_changes","submitter_user":{"username":"fcambus","created_at":"2012-09-10T08:43:10.000-05:00","is_admin":false,"about":"System and Network engineer.\r\n\r\nInterests: ANSI Art, DNS, NetBSD, OpenBSD, Security, and Text Mode.\r\n\r\nSite: https://www.cambus.net","is_moderator":false,"karma":3898,"avatar_url":"/avatars/fcambus-100.png","invited_by_user":"gmcabrita","github_username":"fcambus","twitter_username":"fcambus"},"tags":["compilers"]},{"short_id":"qbprbl","short_id_url":"https://lobste.rs/s/qbprbl","created_at":"2023-03-23T10:09:46.000-05:00","title":"How Big Should a Programming Language Be?","url":"https://tratt.net/laurie/blog/2023/how_big_should_a_programming_language_be.html","score":23,"flags":0,"comment_count":17,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qbprbl/how_big_should_programming_language_be","submitter_user":{"username":"ltratt","created_at":"2019-08-15T07:35:48.000-05:00","is_admin":false,"about":"https://tratt.net/laurie/","is_moderator":false,"karma":565,"avatar_url":"/avatars/ltratt-100.png","invited_by_user":"edd"},"tags":["programming"]},{"short_id":"pdqmcq","short_id_url":"https://lobste.rs/s/pdqmcq","created_at":"2023-03-23T08:30:53.000-05:00","title":"Cheating is All You Need","url":"https://about.sourcegraph.com/blog/cheating-is-all-you-need","score":18,"flags":1,"comment_count":30,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pdqmcq/cheating_is_all_you_need","submitter_user":{"username":"mrfabbri","created_at":"2014-05-05T02:58:17.000-05:00","is_admin":false,"about":"rather tough, rather nerd. festina lente.","is_moderator":false,"karma":275,"avatar_url":"/avatars/mrfabbri-100.png","invited_by_user":"kev009"},"tags":["ai"]},{"short_id":"y4yvrg","short_id_url":"https://lobste.rs/s/y4yvrg","created_at":"2023-03-23T07:46:09.000-05:00","title":"Practical libc-free threading on Linux","url":"https://nullprogram.com/blog/2023/03/23/","score":18,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/y4yvrg/practical_libc_free_threading_on_linux","submitter_user":{"username":"jmillikin","created_at":"2021-07-22T09:39:26.000-05:00","is_admin":false,"about":"Currently semi-retired; formerly at Google (2011-2017) and Stripe (2017-2022)","is_moderator":false,"karma":1186,"avatar_url":"/avatars/jmillikin-100.png","invited_by_user":"pushcx"},"tags":["c","linux"]},{"short_id":"j6mb64","short_id_url":"https://lobste.rs/s/j6mb64","created_at":"2023-03-23T06:51:59.000-05:00","title":"Laptop vs Desktop for RonDB development","url":"https://mikaelronstrom.blogspot.com/2023/03/laptop-vs-desktop-for-rondb-development.html?m=1","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/j6mb64/laptop_vs_desktop_for_rondb_development","submitter_user":{"username":"eatonphil","created_at":"2019-09-01T20:23:02.000-05:00","is_admin":false,"about":"eatonphil.com","is_moderator":false,"karma":4701,"avatar_url":"/avatars/eatonphil-100.png","invited_by_user":"calvin","github_username":"eatonphil","twitter_username":"eatonphil"},"tags":["databases","hardware"]},{"short_id":"ijpr36","short_id_url":"https://lobste.rs/s/ijpr36","created_at":"2023-03-23T06:43:02.000-05:00","title":"Fascination of AWK","url":"https://maximullaris.com/awk.html","score":39,"flags":0,"comment_count":15,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ijpr36/fascination_awk","submitter_user":{"username":"xonix","created_at":"2021-09-21T05:23:26.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":144,"avatar_url":"/avatars/xonix-100.png","invited_by_user":"benhoyt","github_username":"xonixx"},"tags":["programming"]},{"short_id":"yzbhzx","short_id_url":"https://lobste.rs/s/yzbhzx","created_at":"2023-03-23T04:33:31.000-05:00","title":"OpenAI’s policies hinder reproducible research on language models","url":"https://aisnakeoil.substack.com/p/openais-policies-hinder-reproducible","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yzbhzx/openai_s_policies_hinder_reproducible","submitter_user":{"username":"msfjarvis","created_at":"2020-04-24T11:41:56.000-05:00","is_admin":false,"about":"Android and Kotlin developer\r\n","is_moderator":false,"karma":960,"avatar_url":"/avatars/msfjarvis-100.png","invited_by_user":"Amolith","github_username":"msfjarvis","twitter_username":"msfjarvis"},"tags":["ai"]},{"short_id":"x5avwc","short_id_url":"https://lobste.rs/s/x5avwc","created_at":"2023-03-23T03:59:22.000-05:00","title":"Verse Language Reference","url":"https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference","score":28,"flags":0,"comment_count":17,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/x5avwc/verse_language_reference","submitter_user":{"username":"knl","created_at":"2017-07-21T07:12:24.000-05:00","is_admin":false,"about":"Senior software engineer specialized in distributed systems and low latency, high frequency trading infrastructure.","is_moderator":false,"karma":6346,"avatar_url":"/avatars/knl-100.png","invited_by_user":"james","github_username":"knl","keybase_signatures":[{"kb_username":"knl","sig_hash":"cb1fe17fead6d360f9abca902132b2407ee736f1a243f615ad9757dfe8d17e3b0f"}]},"tags":["programming"]},{"short_id":"4xwjdl","short_id_url":"https://lobste.rs/s/4xwjdl","created_at":"2023-03-22T19:15:03.000-05:00","title":"Windows 11 also vulnerable to “aCropalypse” image data leakage","url":"https://nakedsecurity.sophos.com/2023/03/22/windows-11-also-vulnerable-to-acropalypse-image-data-leakage/","score":13,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4xwjdl/windows_11_also_vulnerable_acropalypse","submitter_user":{"username":"kel","created_at":"2014-04-22T05:31:13.000-05:00","is_admin":false,"about":"I'm a nonbinary frontend dev from Las Vegas.\r\n\r\n[unclear.info](http://unclear.info/)\r\n\r\n[If only I could, I'd make this world a better place](https://www.youtube.com/watch?v=82NUfPBHxYs)","is_moderator":false,"karma":1904,"avatar_url":"/avatars/kel-100.png","invited_by_user":"lauris","github_username":"distransient","keybase_signatures":[{"kb_username":"distransient","sig_hash":"bde5d3acdb84eb6ff4d6c9e3e661fb6ca595d374f21bf030e9727cd50bfc62f70f"}]},"tags":["security"]},{"short_id":"ojyfcz","short_id_url":"https://lobste.rs/s/ojyfcz","created_at":"2023-03-22T17:56:02.000-05:00","title":"The Consequences of Scalable Blockchains (2022)","url":"https://medium.com/chainargos/the-consequences-of-scalable-blockchains-8c4d23c6af4d","score":4,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ojyfcz/consequences_scalable_blockchains_2022","submitter_user":{"username":"Corbin","created_at":"2018-10-13T21:40:32.000-05:00","is_admin":false,"about":"Secure distributed computation should not be hard.\r\n\r\nmi pu'i tavla fo lo jbobau .i mi'e la korvo","is_moderator":false,"karma":4993,"avatar_url":"/avatars/Corbin-100.png","invited_by_user":"infinisil"},"tags":["compsci","distributed","merkle-trees"]}]