[{"short_id":"onyjte","short_id_url":"https://lobste.rs/s/onyjte","created_at":"2022-10-07T01:14:08.000-05:00","title":"Faster hash table probing","url":"https://outerproduct.net/trivial/2022-10-06_hash.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/onyjte/faster_hash_table_probing","submitter_user":{"username":"Moonchild","created_at":"2018-04-01T12:28:59.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":2264,"avatar_url":"/avatars/Moonchild-100.png","invited_by_user":"pushcx"},"tags":["compsci","performance"]},{"short_id":"ekdju2","short_id_url":"https://lobste.rs/s/ekdju2","created_at":"2022-10-06T23:05:43.000-05:00","title":"Bulk inserting nested data into the database (part II)","url":"https://contra.com/p/P7kB2RPO-bulk-inserting-nested-data-into-the-database-part-ii","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ekdju2/bulk_inserting_nested_data_into_database","submitter_user":{"username":"gajus","created_at":"2019-04-09T12:10:10.000-05:00","is_admin":false,"about":"Co-Founder of Contra","is_moderator":false,"karma":37,"avatar_url":"/avatars/gajus-100.png","invited_by_user":"benharri","github_username":"gajus","twitter_username":"kuizinas"},"tags":["databases","nodejs"]},{"short_id":"i5wkp8","short_id_url":"https://lobste.rs/s/i5wkp8","created_at":"2022-10-06T21:18:47.000-05:00","title":"coost - A fantastic C++ library","url":"https://github.com/idealvin/coost","score":1,"flags":0,"comment_count":1,"description":"\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/idealvin/coost\" rel=\"ugc\"\u003ecoost\u003c/a\u003e\u003c/strong\u003e is an elegant and efficient cross-platform C++ base library. Its goal is to create a sword of C++ to make C++ programming easy and enjoyable.\u003c/p\u003e\n\u003cp\u003ecoost is like boost, but more lightweight, \u003cstrong\u003ethe static library built on linux or mac is only about 1MB in size\u003c/strong\u003e. However, it still provides enough powerful features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCommand line and config file parser (flag)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHigh performance log library (log)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eUnit testing framework\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ego-style coroutine\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eCoroutine-based network library\u003c/li\u003e\n\u003cli\u003eEfficient JSON library\u003c/li\u003e\n\u003cli\u003eJSON RPC framework\u003c/li\u003e\n\u003cli\u003eAtomic operation (atomic)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEfficient stream (fastream)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eEfficient string (fastring)\u003c/li\u003e\n\u003cli\u003eString utility (str)\u003c/li\u003e\n\u003cli\u003eTime library (time)\u003c/li\u003e\n\u003cli\u003eThread library (thread)\u003c/li\u003e\n\u003cli\u003eTimed Task Scheduler\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGod-oriented programming\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eLruMap\u003c/li\u003e\n\u003cli\u003ehash library\u003c/li\u003e\n\u003cli\u003epath library\u003c/li\u003e\n\u003cli\u003eFile utilities (fs)\u003c/li\u003e\n\u003cli\u003eSystem operations (os)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFast memory allocator\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstrong\u003eDocuments\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://coostdocs.github.io/en/about/co/\" rel=\"ugc\"\u003eDocuments\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/idealvin/coost\" rel=\"ugc\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstrong\u003eCore features\u003c/strong\u003e\n\u003chr\u003e\n\u003cstrong\u003eGod-oriented programming\u003c/strong\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/idealvin/coost/blob/master/include/co/god.h\" rel=\"ugc\"\u003eco/god.h\u003c/a\u003e provides some features based on templates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/god.h\"\n\nvoid f() {\n    god::bless_no_bugs();\n    god::align_up\u0026lt;8\u0026gt;(31); // -\u0026gt; 32\n    god::is_same\u0026lt;T, int, bool\u0026gt;(); // T is int or bool?\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eflag\u003c/strong\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/flag/\" rel=\"ugc\"\u003eflag\u003c/a\u003e\u003c/strong\u003e is a command line and config file parser. It is similar to gflags, but more powerful:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSupport parameters from both command-line and config file.\u003c/li\u003e\n\u003cli\u003eSupport automatic generation of the config file.\u003c/li\u003e\n\u003cli\u003eSupport flag aliases.\u003c/li\u003e\n\u003cli\u003eFlag of integer type, the value can take a unit \u003ccode\u003ek,m,g,t,p\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/flag.h\"\n#include \"co/cout.h\"\n\nDEF_bool(x, false, \"x\");\nDEF_bool(debug, false, \"dbg\", d);\nDEF_uint32(u, 0, \"xxx\");\nDEF_string(s, \"\", \"xx\");\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n    COUT \u0026lt;\u0026lt; \"x: \" \u0026lt;\u0026lt; FLG_x;\n    COUT \u0026lt;\u0026lt; \"y: \" \u0026lt;\u0026lt; FLG_y;\n    COUT \u0026lt;\u0026lt; \"debug: \" \u0026lt;\u0026lt; FLG_debug;\n    COUT \u0026lt;\u0026lt; \"u: \" \u0026lt;\u0026lt; FLG_u;\n    COUT \u0026lt;\u0026lt; FLG_s \u0026lt;\u0026lt; \"|\" \u0026lt;\u0026lt; FLG_s.size();\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above example, the macros start with \u003ccode\u003eDEF_\u003c/code\u003e define 4 flags. Each flag corresponds to a global variable, whose name is \u003ccode\u003eFLG_\u003c/code\u003e plus the flag name. The flag \u003ccode\u003edebug\u003c/code\u003e has an alias \u003ccode\u003ed\u003c/code\u003e. After building, the above code can run as follow:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e./xx                  # Run with default configs\n./xx -x -s good       # x -\u0026gt; true, s -\u0026gt; \"good\"\n./xx -debug           # debug -\u0026gt; true\n./xx -xd              # x -\u0026gt; true, debug -\u0026gt; true\n./xx -u 8k            # u -\u0026gt; 8192\n\n./xx -mkconf          # Automatically generate a config file: xx.conf\n./xx xx.conf          # run with a config file\n./xx -conf xx.conf    # Same as above\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003elog\u003c/strong\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/log/\" rel=\"ugc\"\u003elog\u003c/a\u003e\u003c/strong\u003e is a high-performance log library, some components in coost use it to print logs.\u003c/p\u003e\n\u003cp\u003elog supports two types of logs: one is level log, which is divided into 5 levels: debug, info, warning, error and fatal, \u003cstrong\u003eprinting a fatal log will terminate the program\u003c/strong\u003e; the other is topic log, logs are grouped by topic, and logs of different topics are written to different files.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/log.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n\n    TLOG(\"xx\") \u0026lt;\u0026lt; \"s\" \u0026lt;\u0026lt; 23; // topic log\n    DLOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // debug\n    LOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;   // info\n    WLOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // warning\n    ELOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // error\n    FLOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // fatal\n\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eco/log also provides a series of \u003ccode\u003eCHECK\u003c/code\u003e macros, which is an enhanced version of \u003ccode\u003eassert\u003c/code\u003e, and they will not be cleared in debug mode.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003evoid* p = malloc(32);\nCHECK(p != NULL) \u0026lt;\u0026lt; \"malloc failed..\";\nCHECK_NE(p, NULL) \u0026lt;\u0026lt; \"malloc failed..\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eunitest\u003c/strong\u003e\n\u003cp\u003e\u003ca href=\"https://coostdocs.github.io/en/co/unitest/\" rel=\"ugc\"\u003eunitest\u003c/a\u003e is a simple and easy-to-use unit test framework. Many components in coost use it to write unit test code, which guarantees the stability of coost.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/unitest.h\"\n#include \"co/os.h\"\n\nnamespace test {\n    \nDEF_test(os) {\n    DEF_case(homedir) {\n        EXPECT_NE(os::homedir(), \"\");\n    }\n\n    DEF_case(cpunum) {\n        EXPECT_GT(os::cpunum(), 0);\n    }\n}\n    \n} // namespace test\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above is a simple example. The \u003ccode\u003eDEF_test\u003c/code\u003e macro defines a test unit, which is actually a function (a method in a class). The \u003ccode\u003eDEF_case\u003c/code\u003e macro defines test cases, and each test case is actually a code block. The main function is simple as below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/unitest.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n    unitest::run_all_tests();\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe directory \u003ca href=\"https://github.com/idealvin/coost/tree/master/unitest\" rel=\"ugc\"\u003eunitest\u003c/a\u003e contains the unit test code in coost. Users can run unitest with the following commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sh\"\u003exmake r unitest      # Run all test cases\nxmake r unitest -os  # Run test cases in the os unit\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eJSON\u003c/strong\u003e\n\u003cp\u003eIn coost v3.0, \u003cstrong\u003e\u003ca href=\"https://github.com/idealvin/coost/blob/master/include/co/json.h\" rel=\"ugc\"\u003eJson\u003c/a\u003e\u003c/strong\u003e provides \u003cstrong\u003efluent APIs\u003c/strong\u003e, which is more convenient to use.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e// {\"a\":23,\"b\":false,\"s\":\"123\",\"v\":[1,2,3],\"o\":{\"xx\":0}}\nJson x = {\n    { \"a\", 23 },\n    { \"b\", false },\n    { \"s\", \"123\" },\n    { \"v\", {1,2,3} },\n    { \"o\", {\n        {\"xx\", 0}\n    }},\n};\n\n// equal to x\nJson y = Json()\n    .add_member(\"a\", 23)\n    .add_member(\"b\", false)\n    .add_member(\"s\", \"123\")\n    .add_member(\"v\", Json().push_back(1).push_back(2).push_back(3))\n    .add_member(\"o\", Json().add_member(\"xx\", 0));\n\nx.get(\"a\").as_int();       // 23\nx.get(\"s\").as_string();    // \"123\"\nx.get(\"s\").as_int();       // 123, string -\u0026gt; int\nx.get(\"v\", 0).as_int();    // 1\nx.get(\"v\", 2).as_int();    // 3\nx.get(\"o\", \"xx\").as_int(); // 0\n\nx[\"a\"] == 23;          // true\nx[\"s\"] == \"123\";       // true\nx.get(\"o\", \"xx\") != 0; // false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eCoroutine\u003c/strong\u003e\n\u003cp\u003ecoost has implemented a \u003ca href=\"https://github.com/golang/go\" rel=\"ugc\"\u003ego-style\u003c/a\u003e coroutine, which has the following features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSupport multi-thread scheduling, the default number of threads is the number of system CPU cores.\u003c/li\u003e\n\u003cli\u003eShared stack, coroutines in the same thread share several stacks (the default size is 1MB), and the memory usage is low.\u003c/li\u003e\n\u003cli\u003eThere is a flat relationship between coroutines, and new coroutines can be created from anywhere (including in coroutines).\u003c/li\u003e\n\u003cli\u003eSupport coroutine synchronization events, coroutine locks, channels, and waitgroups.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/co.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n\n    co::WaitGroup wg;\n    wg.add(2);\n\n    go([wg](){\n        LOG \u0026lt;\u0026lt; \"hello world\";\n        wg.done();\n    });\n\n    go([wg](){\n        LOG \u0026lt;\u0026lt; \"hello again\";\n        wg.done();\n    });\n\n    wg.wait();\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, the coroutines created by \u003ccode\u003ego()\u003c/code\u003e will be evenly distributed to different scheduling threads. Users can also control the scheduling of coroutines by themselves:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e// run f1 and f2 in the same scheduler\nauto s = co::next_scheduler();\ns-\u0026gt;go(f1);\ns-\u0026gt;go(f2);\n\n// run f in all schedulers\nfor (auto\u0026amp; s : co::schedulers()) {\n    s-\u0026gt;go(f);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003enetwork programming\u003c/strong\u003e\n\u003cp\u003ecoost provides a coroutine-based network programming framework, which can be roughly divided into 3 parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/coroutine/#coroutineized-socket-api\" rel=\"ugc\"\u003ecoroutineized socket API\u003c/a\u003e\u003c/strong\u003e, similar in form to the system socket API, users familiar with socket programming can easily write high-performance network programs in a synchronous manner.\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://coostdocs.github.io/en/co/net/tcp/\" rel=\"ugc\"\u003eTCP\u003c/a\u003e, \u003ca href=\"https://coostdocs.github.io/en/co/net/http/\" rel=\"ugc\"\u003eHTTP\u003c/a\u003e, \u003ca href=\"https://coostdocs.github.io/en/co/net/rpc/\" rel=\"ugc\"\u003eRPC\u003c/a\u003e and other high-level network programming components, compatible with IPv6, also support SSL, it is more convenient to use than socket API.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/coroutine/#system-api-hook\" rel=\"ugc\"\u003eSystem API hook\u003c/a\u003e\u003c/strong\u003e, with which, third-party network libraries can be used directly in coroutines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eRPC server\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/co.h\"\n#include \"co/rpc.h\"\n#include \"co/time.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n\n    rpc::Server()\n        .add_service(new xx::HelloWorldImpl)\n        .start(\"127.0.0.1\", 7788, \"/xx\");\n\n    for (;;) sleep::sec(80000);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003erpc::Server\u003c/code\u003e also supports HTTP protocol, you may use the POST method to call the RPC service:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sh\"\u003ecurl http://127.0.0.1:7788/xx --request POST --data '{\"api\":\"ping\"}'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eStatic web server\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/flag.h\"\n#include \"co/http.h\"\n\nDEF_string(d, \".\", \"root dir\"); // docroot for the web server\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n    so::easy(FLG_d.c_str()); // mum never have to worry again\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP server\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003evoid cb(const http::Req\u0026amp; req, http::Res\u0026amp; res) {\n    if (req.is_method_get()) {\n        if (req.url() == \"/hello\") {\n            res.set_status(200);\n            res.set_body(\"hello world\");\n        } else {\n            res.set_status(404);\n        }\n    } else {\n        res.set_status(405); // method not allowed\n    }\n}\n\n// http\nhttp::Server().on_req(cb).start(\"0.0.0.0\", 80);\n\n// https\nhttp::Server().on_req(cb).start(\n    \"0.0.0.0\", 443, \"privkey.pem\", \"certificate.pem\"\n);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP client\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003evoid f() {\n    http::Client c(\"https://github.com\");\n\n    c.get(\"/\");\n    LOG \u0026lt;\u0026lt; \"response code: \"\u0026lt;\u0026lt; c.status();\n    LOG \u0026lt;\u0026lt; \"body size: \"\u0026lt;\u0026lt; c.body().size();\n    LOG \u0026lt;\u0026lt; \"Content-Length: \"\u0026lt;\u0026lt; c.header(\"Content-Length\");\n    LOG \u0026lt;\u0026lt; c.header();\n\n    c.post(\"/hello\", \"data xxx\");\n    LOG \u0026lt;\u0026lt; \"response code: \"\u0026lt;\u0026lt; c.status();\n}\n\ngo(f);\n\u003c/code\u003e\u003c/pre\u003e\n","description_plain":"**[coost](https://github.com/idealvin/coost)** is an elegant and efficient cross-platform C++ base library. Its goal is to create a sword of C++ to make C++ programming easy and enjoyable.\r\n\r\ncoost is like boost, but more lightweight, **the static library built on linux or mac is only about 1MB in size**. However, it still provides enough powerful features:\r\n\r\n- Command line and config file parser (flag)\r\n- **High performance log library (log)**\r\n- Unit testing framework\r\n- **go-style coroutine**\r\n- Coroutine-based network library\r\n- Efficient JSON library\r\n- JSON RPC framework\r\n- Atomic operation (atomic)\r\n- **Efficient stream (fastream)**\r\n- Efficient string (fastring)\r\n- String utility (str)\r\n- Time library (time)\r\n- Thread library (thread)\r\n- Timed Task Scheduler\r\n- **God-oriented programming**\r\n- LruMap\r\n- hash library\r\n- path library\r\n- File utilities (fs)\r\n- System operations (os)\r\n- **Fast memory allocator**\r\n\r\n\r\n## Documents  \r\n\r\n- [Documents](https://coostdocs.github.io/en/about/co/)\r\n- [github](https://github.com/idealvin/coost)\r\n\r\n\r\n## Core features  \r\n---------------------------------------\r\n\r\n\r\n### God-oriented programming\r\n\r\n[co/god.h](https://github.com/idealvin/coost/blob/master/include/co/god.h) provides some features based on templates.\r\n\r\n```cpp\r\n#include \"co/god.h\"\r\n\r\nvoid f() {\r\n    god::bless_no_bugs();\r\n    god::align_up\u003c8\u003e(31); // -\u003e 32\r\n    god::is_same\u003cT, int, bool\u003e(); // T is int or bool?\r\n}\r\n```\r\n\r\n\r\n\r\n### flag\r\n\r\n**[flag](https://coostdocs.github.io/en/co/flag/)** is a command line and config file parser. It is similar to gflags, but more powerful:\r\n- Support parameters from both command-line and config file.\r\n- Support automatic generation of the config file.\r\n- Support flag aliases.\r\n- Flag of integer type, the value can take a unit `k,m,g,t,p`.\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/cout.h\"\r\n\r\nDEF_bool(x, false, \"x\");\r\nDEF_bool(debug, false, \"dbg\", d);\r\nDEF_uint32(u, 0, \"xxx\");\r\nDEF_string(s, \"\", \"xx\");\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n    COUT \u003c\u003c \"x: \" \u003c\u003c FLG_x;\r\n    COUT \u003c\u003c \"y: \" \u003c\u003c FLG_y;\r\n    COUT \u003c\u003c \"debug: \" \u003c\u003c FLG_debug;\r\n    COUT \u003c\u003c \"u: \" \u003c\u003c FLG_u;\r\n    COUT \u003c\u003c FLG_s \u003c\u003c \"|\" \u003c\u003c FLG_s.size();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the above example, the macros start with `DEF_` define 4 flags. Each flag corresponds to a global variable, whose name is `FLG_` plus the flag name. The flag `debug` has an alias `d`. After building, the above code can run as follow:\r\n\r\n```sh\r\n./xx                  # Run with default configs\r\n./xx -x -s good       # x -\u003e true, s -\u003e \"good\"\r\n./xx -debug           # debug -\u003e true\r\n./xx -xd              # x -\u003e true, debug -\u003e true\r\n./xx -u 8k            # u -\u003e 8192\r\n\r\n./xx -mkconf          # Automatically generate a config file: xx.conf\r\n./xx xx.conf          # run with a config file\r\n./xx -conf xx.conf    # Same as above\r\n```\r\n\r\n\r\n\r\n### log\r\n\r\n**[log](https://coostdocs.github.io/en/co/log/)** is a high-performance log library, some components in coost use it to print logs.\r\n\r\nlog supports two types of logs: one is level log, which is divided into 5 levels: debug, info, warning, error and fatal, **printing a fatal log will terminate the program**; the other is topic log, logs are grouped by topic, and logs of different topics are written to different files.\r\n\r\n```cpp\r\n#include \"co/log.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n\r\n    TLOG(\"xx\") \u003c\u003c \"s\" \u003c\u003c 23; // topic log\r\n    DLOG \u003c\u003c \"hello \" \u003c\u003c 23;  // debug\r\n    LOG \u003c\u003c \"hello \" \u003c\u003c 23;   // info\r\n    WLOG \u003c\u003c \"hello \" \u003c\u003c 23;  // warning\r\n    ELOG \u003c\u003c \"hello \" \u003c\u003c 23;  // error\r\n    FLOG \u003c\u003c \"hello \" \u003c\u003c 23;  // fatal\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nco/log also provides a series of `CHECK` macros, which is an enhanced version of `assert`, and they will not be cleared in debug mode.\r\n\r\n```cpp\r\nvoid* p = malloc(32);\r\nCHECK(p != NULL) \u003c\u003c \"malloc failed..\";\r\nCHECK_NE(p, NULL) \u003c\u003c \"malloc failed..\";\r\n```\r\n\r\n\r\n\r\n### unitest\r\n\r\n[unitest](https://coostdocs.github.io/en/co/unitest/) is a simple and easy-to-use unit test framework. Many components in coost use it to write unit test code, which guarantees the stability of coost.\r\n\r\n```cpp\r\n#include \"co/unitest.h\"\r\n#include \"co/os.h\"\r\n\r\nnamespace test {\r\n    \r\nDEF_test(os) {\r\n    DEF_case(homedir) {\r\n        EXPECT_NE(os::homedir(), \"\");\r\n    }\r\n\r\n    DEF_case(cpunum) {\r\n        EXPECT_GT(os::cpunum(), 0);\r\n    }\r\n}\r\n    \r\n} // namespace test\r\n```\r\n\r\nThe above is a simple example. The `DEF_test` macro defines a test unit, which is actually a function (a method in a class). The `DEF_case` macro defines test cases, and each test case is actually a code block. The main function is simple as below:\r\n\r\n```cpp\r\n#include \"co/unitest.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n    unitest::run_all_tests();\r\n    return 0;\r\n}\r\n```\r\n\r\nThe directory [unitest](https://github.com/idealvin/coost/tree/master/unitest) contains the unit test code in coost. Users can run unitest with the following commands:\r\n\r\n```sh\r\nxmake r unitest      # Run all test cases\r\nxmake r unitest -os  # Run test cases in the os unit\r\n```\r\n\r\n\r\n\r\n### JSON\r\n\r\nIn coost v3.0, **[Json](https://github.com/idealvin/coost/blob/master/include/co/json.h)** provides **fluent APIs**, which is more convenient to use.\r\n\r\n```cpp\r\n// {\"a\":23,\"b\":false,\"s\":\"123\",\"v\":[1,2,3],\"o\":{\"xx\":0}}\r\nJson x = {\r\n    { \"a\", 23 },\r\n    { \"b\", false },\r\n    { \"s\", \"123\" },\r\n    { \"v\", {1,2,3} },\r\n    { \"o\", {\r\n        {\"xx\", 0}\r\n    }},\r\n};\r\n\r\n// equal to x\r\nJson y = Json()\r\n    .add_member(\"a\", 23)\r\n    .add_member(\"b\", false)\r\n    .add_member(\"s\", \"123\")\r\n    .add_member(\"v\", Json().push_back(1).push_back(2).push_back(3))\r\n    .add_member(\"o\", Json().add_member(\"xx\", 0));\r\n\r\nx.get(\"a\").as_int();       // 23\r\nx.get(\"s\").as_string();    // \"123\"\r\nx.get(\"s\").as_int();       // 123, string -\u003e int\r\nx.get(\"v\", 0).as_int();    // 1\r\nx.get(\"v\", 2).as_int();    // 3\r\nx.get(\"o\", \"xx\").as_int(); // 0\r\n\r\nx[\"a\"] == 23;          // true\r\nx[\"s\"] == \"123\";       // true\r\nx.get(\"o\", \"xx\") != 0; // false\r\n```\r\n\r\n\r\n\r\n### Coroutine\r\n\r\ncoost has implemented a [go-style](https://github.com/golang/go) coroutine, which has the following features:\r\n\r\n- Support multi-thread scheduling, the default number of threads is the number of system CPU cores.\r\n- Shared stack, coroutines in the same thread share several stacks (the default size is 1MB), and the memory usage is low.\r\n- There is a flat relationship between coroutines, and new coroutines can be created from anywhere (including in coroutines).\r\n- Support coroutine synchronization events, coroutine locks, channels, and waitgroups.\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n\r\n    co::WaitGroup wg;\r\n    wg.add(2);\r\n\r\n    go([wg](){\r\n        LOG \u003c\u003c \"hello world\";\r\n        wg.done();\r\n    });\r\n\r\n    go([wg](){\r\n        LOG \u003c\u003c \"hello again\";\r\n        wg.done();\r\n    });\r\n\r\n    wg.wait();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the above code, the coroutines created by `go()` will be evenly distributed to different scheduling threads. Users can also control the scheduling of coroutines by themselves:\r\n\r\n```cpp\r\n// run f1 and f2 in the same scheduler\r\nauto s = co::next_scheduler();\r\ns-\u003ego(f1);\r\ns-\u003ego(f2);\r\n\r\n// run f in all schedulers\r\nfor (auto\u0026 s : co::schedulers()) {\r\n    s-\u003ego(f);\r\n}\r\n```\r\n\r\n\r\n\r\n### network programming\r\n\r\ncoost provides a coroutine-based network programming framework, which can be roughly divided into 3 parts:\r\n\r\n- **[coroutineized socket API](https://coostdocs.github.io/en/co/coroutine/#coroutineized-socket-api)**, similar in form to the system socket API, users familiar with socket programming can easily write high-performance network programs in a synchronous manner.\r\n- [TCP](https://coostdocs.github.io/en/co/net/tcp/), [HTTP](https://coostdocs.github.io/en/co/net/http/), [RPC](https://coostdocs.github.io/en/co/net/rpc/) and other high-level network programming components, compatible with IPv6, also support SSL, it is more convenient to use than socket API.\r\n- **[System API hook](https://coostdocs.github.io/en/co/coroutine/#system-api-hook)**, with which, third-party network libraries can be used directly in coroutines.\r\n\r\n\r\n**RPC server**\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n#include \"co/rpc.h\"\r\n#include \"co/time.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n\r\n    rpc::Server()\r\n        .add_service(new xx::HelloWorldImpl)\r\n        .start(\"127.0.0.1\", 7788, \"/xx\");\r\n\r\n    for (;;) sleep::sec(80000);\r\n    return 0;\r\n}\r\n```\r\n\r\n`rpc::Server` also supports HTTP protocol, you may use the POST method to call the RPC service:\r\n\r\n```sh\r\ncurl http://127.0.0.1:7788/xx --request POST --data '{\"api\":\"ping\"}'\r\n```\r\n\r\n\r\n**Static web server**\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/http.h\"\r\n\r\nDEF_string(d, \".\", \"root dir\"); // docroot for the web server\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n    so::easy(FLG_d.c_str()); // mum never have to worry again\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n**HTTP server**\r\n\r\n```cpp\r\nvoid cb(const http::Req\u0026 req, http::Res\u0026 res) {\r\n    if (req.is_method_get()) {\r\n        if (req.url() == \"/hello\") {\r\n            res.set_status(200);\r\n            res.set_body(\"hello world\");\r\n        } else {\r\n            res.set_status(404);\r\n        }\r\n    } else {\r\n        res.set_status(405); // method not allowed\r\n    }\r\n}\r\n\r\n// http\r\nhttp::Server().on_req(cb).start(\"0.0.0.0\", 80);\r\n\r\n// https\r\nhttp::Server().on_req(cb).start(\r\n    \"0.0.0.0\", 443, \"privkey.pem\", \"certificate.pem\"\r\n);\r\n```\r\n\r\n\r\n**HTTP client**\r\n\r\n```cpp\r\nvoid f() {\r\n    http::Client c(\"https://github.com\");\r\n\r\n    c.get(\"/\");\r\n    LOG \u003c\u003c \"response code: \"\u003c\u003c c.status();\r\n    LOG \u003c\u003c \"body size: \"\u003c\u003c c.body().size();\r\n    LOG \u003c\u003c \"Content-Length: \"\u003c\u003c c.header(\"Content-Length\");\r\n    LOG \u003c\u003c c.header();\r\n\r\n    c.post(\"/hello\", \"data xxx\");\r\n    LOG \u003c\u003c \"response code: \"\u003c\u003c c.status();\r\n}\r\n\r\ngo(f);\r\n```","comments_url":"https://lobste.rs/s/i5wkp8/coost_fantastic_c_library","submitter_user":{"username":"idealvin","created_at":"2022-01-18T08:53:26.000-06:00","is_admin":false,"about":"I'm a C++ programmer. I'm working on [cocoyaxi](https://github.com/idealvin/cocoyaxi), a go-style coroutine library in C++11 and more.","is_moderator":false,"karma":10,"avatar_url":"/avatars/idealvin-100.png","invited_by_user":"ruki","github_username":"idealvin"},"tags":["c++","programming"]},{"short_id":"vnnyip","short_id_url":"https://lobste.rs/s/vnnyip","created_at":"2022-10-06T18:55:42.000-05:00","title":"lambda-8cc: An x86 C compiler written in untyped lambda calculus","url":"https://github.com/woodrush/lambda-8cc","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vnnyip/lambda_8cc_x86_c_compiler_written_untyped","submitter_user":{"username":"woodrush","created_at":"2022-01-11T19:58:03.000-06:00","is_admin":false,"about":"Things I made:\r\n- LambdaLisp, a Lisp interpreter that runs on lambda calculus\r\n- Lisp in Life, a Lisp interpreter that runs in Conway's Game of Life\r\n\r\nI'm currently a Ph.D. student studying machine learning at The University of Tokyo.","is_moderator":false,"karma":91,"avatar_url":"/avatars/woodrush-100.png","invited_by_user":"jart","github_username":"woodrush","twitter_username":"woodrush924"},"tags":["c","compilers"]},{"short_id":"9irgta","short_id_url":"https://lobste.rs/s/9irgta","created_at":"2022-10-06T16:35:22.000-05:00","title":"Crubit: High-level design of C++/Rust interop","url":"https://github.com/google/crubit/blob/main/docs/design.md","score":4,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9irgta/crubit_high_level_design_c_rust_interop","submitter_user":{"username":"hsivonen","created_at":"2020-01-19T01:58:54.000-06:00","is_admin":false,"about":"[Twitter](https://twitter.com/hsivonen/)","is_moderator":false,"karma":160,"avatar_url":"/avatars/hsivonen-100.png","invited_by_user":"danburzo"},"tags":["c++","rust"]},{"short_id":"dqxx4h","short_id_url":"https://lobste.rs/s/dqxx4h","created_at":"2022-10-06T16:29:40.000-05:00","title":"libgrapheme 2.0.0 released - A suckless Unicode string library","url":"https://libs.suckless.org/libgrapheme/","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dqxx4h/libgrapheme_2_0_0_released_suckless","submitter_user":{"username":"FRIGN","created_at":"2015-02-19T10:11:05.000-06:00","is_admin":false,"about":"dev@frign.de\r\n\r\nsuckless developer, UNIX enthusiast\r\n\r\n|| https://frign.de ||\r\n\r\n(https://2f30.org https://suckless.org)","is_moderator":false,"karma":3261,"avatar_url":"/avatars/FRIGN-100.png","invited_by_user":"sin"},"tags":["c","release","unix"]},{"short_id":"o83lbm","short_id_url":"https://lobste.rs/s/o83lbm","created_at":"2022-10-06T16:12:48.000-05:00","title":"Construction and analysis of the build and runtime dependency graph of nixpkgs","url":"https://www.tweag.io/blog/2022-09-13-nixpkgs-graph/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o83lbm/construction_analysis_build_runtime","submitter_user":{"username":"knl","created_at":"2017-07-21T07:12:24.000-05:00","is_admin":false,"about":"Senior software engineer specialized in distributed systems and low latency, high frequency trading infrastructure.","is_moderator":false,"karma":5457,"avatar_url":"/avatars/knl-100.png","invited_by_user":"james","github_username":"knl","keybase_signatures":[{"kb_username":"knl","sig_hash":"cb1fe17fead6d360f9abca902132b2407ee736f1a243f615ad9757dfe8d17e3b0f"}]},"tags":["nix","visualization"]},{"short_id":"lo1nmx","short_id_url":"https://lobste.rs/s/lo1nmx","created_at":"2022-10-06T15:25:52.000-05:00","title":"GitHub - naftaliharris/tauthon: Fork of Python 2.7 with new syntax, builtins, and libraries backported from Python 3","url":"https://github.com/naftaliharris/tauthon","score":2,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lo1nmx/github_naftaliharris_tauthon_fork","submitter_user":{"username":"lproven","created_at":"2016-08-19T03:04:15.000-05:00","is_admin":false,"about":"Tall dark black-clad atheist biker skeptic vegetarian SF fan; writes (mostly about computers) for a living. \r\n\r\n• [Profile](https://about.me/liamproven)\r\n\r\n• [Tech blog](https://liam-on-linux.livejournal.com/)\r\n\r\n","is_moderator":false,"karma":504,"avatar_url":"/avatars/lproven-100.png","invited_by_user":"mjturner","github_username":"lproven","twitter_username":"lproven"},"tags":["programming","python"]},{"short_id":"m4vz4k","short_id_url":"https://lobste.rs/s/m4vz4k","created_at":"2022-10-06T15:17:26.000-05:00","title":"I've been playing with OS/2 again -- more on that soon -- but it was doomed from a young age","url":"https://liam-on-linux.dreamwidth.org/87435.html","score":12,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m4vz4k/i_ve_been_playing_with_os_2_again_more_on","submitter_user":{"username":"lproven","created_at":"2016-08-19T03:04:15.000-05:00","is_admin":false,"about":"Tall dark black-clad atheist biker skeptic vegetarian SF fan; writes (mostly about computers) for a living. \r\n\r\n• [Profile](https://about.me/liamproven)\r\n\r\n• [Tech blog](https://liam-on-linux.livejournal.com/)\r\n\r\n","is_moderator":false,"karma":504,"avatar_url":"/avatars/lproven-100.png","invited_by_user":"mjturner","github_username":"lproven","twitter_username":"lproven"},"tags":["historical"]},{"short_id":"xq00ml","short_id_url":"https://lobste.rs/s/xq00ml","created_at":"2022-10-06T12:39:32.000-05:00","title":"HEVC uAPI mainlined","url":"https://www.collabora.com/news-and-blog/news-and-events/hevc-uapi-mainlined.html","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xq00ml/hevc_uapi_mainlined","submitter_user":{"username":"mfilion","created_at":"2020-04-23T10:57:43.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":430,"avatar_url":"/avatars/mfilion-100.png","invited_by_user":"eloy"},"tags":["linux"]},{"short_id":"c2r1fp","short_id_url":"https://lobste.rs/s/c2r1fp","created_at":"2022-10-06T11:54:05.000-05:00","title":"Unix, Plan 9 and the Lurking Smalltalk","url":"https://www.humprog.org/~stephen/research/papers/kell19unix-personal.pdf","score":9,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/c2r1fp/unix_plan_9_lurking_smalltalk","submitter_user":{"username":"chrislloyd","created_at":"2019-05-16T09:41:07.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":154,"avatar_url":"/avatars/chrislloyd-100.png","invited_by_user":"ozan"},"tags":["osdev","pdf","plt"]},{"short_id":"x7hxyq","short_id_url":"https://lobste.rs/s/x7hxyq","created_at":"2022-10-06T11:06:11.000-05:00","title":"Apple AirPods Pro Are As Unrepairable As Ever","url":"https://www.ifixit.com/News/66194/apples-new-airpods-are-telling-users-to-replace-the-batteries-already-too-bad-thats-impossible","score":13,"flags":3,"comment_count":24,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/x7hxyq/apple_airpods_pro_are_as_unrepairable_as","submitter_user":{"username":"kujaw","created_at":"2020-05-24T04:04:44.000-05:00","is_admin":false,"about":"Located in Łódź, Poland","is_moderator":false,"karma":16,"avatar_url":"/avatars/kujaw-100.png","invited_by_user":"pzduniak","github_username":"kujaw"},"tags":["hardware"]},{"short_id":"vbyxqv","short_id_url":"https://lobste.rs/s/vbyxqv","created_at":"2022-10-06T10:38:06.000-05:00","title":"GitHub - twitter/pelikan: Pelikan is Twitter's unified cache backend","url":"https://github.com/twitter/pelikan","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vbyxqv/github_twitter_pelikan_pelikan_is","submitter_user":{"username":"mpweiher","created_at":"2019-11-22T11:22:25.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":1217,"avatar_url":"/avatars/mpweiher-100.png","invited_by_user":"mulle_nat","github_username":"mpw","twitter_username":"mpweiher"},"tags":["compsci"]},{"short_id":"rnfugk","short_id_url":"https://lobste.rs/s/rnfugk","created_at":"2022-10-06T10:29:57.000-05:00","title":"Future Proofing SQL with Carefully Placed Errors","url":"https://hakibenita.com/future-proof-sql","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rnfugk/future_proofing_sql_with_carefully","submitter_user":{"username":"Haki","created_at":"2019-01-04T01:25:42.000-06:00","is_admin":false,"about":"https://hakibenita.com","is_moderator":false,"karma":635,"avatar_url":"/avatars/Haki-100.png","invited_by_user":"pstef"},"tags":["databases"]},{"short_id":"gmxvun","short_id_url":"https://lobste.rs/s/gmxvun","created_at":"2022-10-06T10:24:16.000-05:00","title":"Hard Mode Rust","url":"https://matklad.github.io/2022/10/06/hard-mode-rust.html","score":34,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gmxvun/hard_mode_rust","submitter_user":{"username":"matklad","created_at":"2019-07-02T07:23:10.000-05:00","is_admin":false,"about":"Working on IDE support for the Rust language.\r\n\r\nhttps://github.com/matklad","is_moderator":false,"karma":3604,"avatar_url":"/avatars/matklad-100.png","invited_by_user":"skade","github_username":"matklad"},"tags":["c","performance","rust"]},{"short_id":"yjuhri","short_id_url":"https://lobste.rs/s/yjuhri","created_at":"2022-10-06T09:59:56.000-05:00","title":"Cloud desktops aren't as good as you'd think","url":"https://mjg59.dreamwidth.org/61535.html","score":15,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yjuhri/cloud_desktops_aren_t_as_good_as_you_d_think","submitter_user":{"username":"freddyb","created_at":"2017-02-02T09:12:16.000-06:00","is_admin":false,"about":"I like browser security and web security. Both at work (for Mozilla from Berlin, Germany) and for fun.","is_moderator":false,"karma":8878,"avatar_url":"/avatars/freddyb-100.png","invited_by_user":"stas","keybase_signatures":[{"kb_username":"freddyb","sig_hash":"550e2f5b27d4b5d558c02dfb2b23a628e90635183c93f993eeea4e16b20c51150f"}]},"tags":["rant","security","virtualization"]},{"short_id":"ykyhda","short_id_url":"https://lobste.rs/s/ykyhda","created_at":"2022-10-06T09:59:49.000-05:00","title":"Vulkan Render-Queues and how they Sync","url":"https://poniesandlight.co.uk/reflect/island_rendergraph_2/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ykyhda/vulkan_render_queues_how_they_sync","submitter_user":{"username":"tgfrerer","created_at":"2020-07-29T05:36:54.000-05:00","is_admin":false,"about":"graphics, mostly.","is_moderator":false,"karma":77,"avatar_url":"/avatars/tgfrerer-100.png","invited_by_user":"355E3B","github_username":"tgfrerer"},"tags":["graphics"]},{"short_id":"gdf8cr","short_id_url":"https://lobste.rs/s/gdf8cr","created_at":"2022-10-06T09:57:20.000-05:00","title":"End-to-end Neural Coreference Resolution in spaCy","url":"https://explosion.ai/blog/coref","score":2,"flags":0,"comment_count":0,"description":"\u003cp\u003eThis is something some of my colleagues worked on for months. Although I generally try to avoid self-submissions, I think there is a lot of technical background in this post that might interest people who are into NLP/ML here.\u003c/p\u003e\n","description_plain":"This is something some of my colleagues worked on for months. Although I generally try to avoid self-submissions, I think there is a lot of technical background in this post that might interest people who are into NLP/ML here.","comments_url":"https://lobste.rs/s/gdf8cr/end_end_neural_coreference_resolution","submitter_user":{"username":"danieldk","created_at":"2015-04-07T14:06:28.000-05:00","is_admin":false,"about":"Computational linguistics (parsing, generation, neural networks) and macOS/Fedora user.\r\n\r\nFeel free to drop me an e-mail.\r\n\r\nhttp://danieldk.eu/","is_moderator":false,"karma":2947,"avatar_url":"/avatars/danieldk-100.png","invited_by_user":"trousers","github_username":"danieldk","twitter_username":"danieldekok"},"tags":["ai","python"]},{"short_id":"rzi6o9","short_id_url":"https://lobste.rs/s/rzi6o9","created_at":"2022-10-06T09:56:39.000-05:00","title":"Programming is Greek to me... Literally","url":"https://github.com/naver/lispe/wiki/6.15-Programming-is-Greek-to-me...-Literally","score":17,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rzi6o9/programming_is_greek_me_literally","submitter_user":{"username":"Claudius","created_at":"2021-01-28T04:41:57.000-06:00","is_admin":false,"about":"I have been working for years on Natural Language parsing technology, implementing a tool: XIP (Xerox Incremental Parser) that was used in my research team for over 16 years. As NLP was quickly shifting into Deep Learning, I moved my interest to programming languages, which appeared to me as a natural continuation of my work on grammars. I have so far implemented two languages, which are now in Open Source: Tamgu and LispE (github.com/naver/tamgu and github.com/naver/lispe).","is_moderator":false,"karma":116,"avatar_url":"/avatars/Claudius-100.png","invited_by_user":"qmacro"},"tags":["culture","lisp","programming"]},{"short_id":"d1awxg","short_id_url":"https://lobste.rs/s/d1awxg","created_at":"2022-10-06T09:54:42.000-05:00","title":"WebVM: Linux Virtualization in WebAssembly with Full Networking via Tailscale","url":"https://leaningtech.com/webvm-virtual-machine-with-networking-via-tailscale/","score":25,"flags":1,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/d1awxg/webvm_linux_virtualization_webassembly","submitter_user":{"username":"yuri91","created_at":"2020-08-18T06:55:39.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":27,"avatar_url":"/avatars/yuri91-100.png","invited_by_user":"gerikson","github_username":"yuri91","twitter_username":"YIozzelli"},"tags":["browsers","networking","virtualization","wasm"]},{"short_id":"ry8yzh","short_id_url":"https://lobste.rs/s/ry8yzh","created_at":"2022-10-06T09:47:08.000-05:00","title":"The Story Behind the Alternative Genesis Block of Bitcoin","url":"https://serhack.me/articles/story-behind-alternative-genesis-block-bitcoin/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ry8yzh/story_behind_alternative_genesis_block","submitter_user":{"username":"serhack","created_at":"2020-07-21T09:01:02.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":108,"avatar_url":"/avatars/serhack-100.png","invited_by_user":"asymptotically"},"tags":["finance","merkle-trees"]},{"short_id":"ljsws8","short_id_url":"https://lobste.rs/s/ljsws8","created_at":"2022-10-06T09:01:55.000-05:00","title":"Modmapper: Putting every Skyrim mod on a map with Rust","url":"https://www.hallada.net/2022/10/05/modmapper-putting-every-skyrim-mod-on-a-map-with-rust.html","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ljsws8/modmapper_putting_every_skyrim_mod_on_map","submitter_user":{"username":"zmitchell","created_at":"2018-12-05T13:37:17.000-06:00","is_admin":false,"about":"Ultrafast spectroscopy by day, programming by night","is_moderator":false,"karma":666,"avatar_url":"/avatars/zmitchell-100.png","invited_by_user":"btbytes"},"tags":["games","rust","wasm"]},{"short_id":"k2sfqb","short_id_url":"https://lobste.rs/s/k2sfqb","created_at":"2022-10-06T08:19:24.000-05:00","title":"Building an ESP32-based Wireless Haptic Communication System","url":"https://learn.adafruit.com/cheekmate-wireless-haptic-communication?view=all","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/k2sfqb/building_esp32_based_wireless_haptic","submitter_user":{"username":"hoistbypetard","created_at":"2019-12-22T23:11:15.000-06:00","is_admin":false,"about":"I enjoy turning coffee into code.","is_moderator":false,"karma":2849,"avatar_url":"/avatars/hoistbypetard-100.png","invited_by_user":"yumaikas"},"tags":["hardware","programming"]},{"short_id":"bdruov","short_id_url":"https://lobste.rs/s/bdruov","created_at":"2022-10-06T08:18:54.000-05:00","title":"Partitioning in Postgres","url":"https://brandur.org/fragments/postgres-partitioning-2022","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bdruov/partitioning_postgres","submitter_user":{"username":"carlmjohnson","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carl M. Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":5424,"avatar_url":"/avatars/carlmjohnson-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson","twitter_username":"carlmjohnson"},"tags":["databases"]},{"short_id":"n062nd","short_id_url":"https://lobste.rs/s/n062nd","created_at":"2022-10-06T06:32:57.000-05:00","title":"Why We Use CUE (and Not Helm)","url":"https://cloudplane.org/blog/why-cue","score":12,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/n062nd/why_we_use_cue_not_helm","submitter_user":{"username":"jamesog","created_at":"2014-01-28T16:55:11.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":989,"avatar_url":"/avatars/jamesog-100.png","invited_by_user":"sevan"},"tags":["devops","practices"]}]