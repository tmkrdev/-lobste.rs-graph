[{"short_id":"u9v0ki","short_id_url":"https://lobste.rs/s/u9v0ki","created_at":"2024-02-24T11:56:00.000-06:00","title":"Can you make a basic web app without googling? I can't","url":"https://austinhenley.com/blog/webappwithoutgoogling.html","score":2,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/u9v0ki/can_you_make_basic_web_app_without","submitter_user":{"username":"azhenley","created_at":"2021-10-04T14:03:32.000-05:00","is_admin":false,"about":"I work on dev tools at Microsoft. Former professor at University of Tennessee.\r\n\r\nhttp://austinhenley.com","is_moderator":false,"karma":1291,"avatar_url":"/avatars/azhenley-100.png","invited_by_user":"eatonphil"},"user_is_author":true,"tags":["programming","web"]},{"short_id":"eenimf","short_id_url":"https://lobste.rs/s/eenimf","created_at":"2024-02-24T11:15:31.000-06:00","title":"Co-Developing Programs and Their Proof of Correctness","url":"https://cacm.acm.org/magazines/2024/3/280078-co-developing-programs-and-their-proof-of-correctness/fulltext","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/eenimf/co_developing_programs_their_proof","submitter_user":{"username":"pyj","created_at":"2018-12-03T10:15:30.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":1541,"avatar_url":"/avatars/pyj-100.png","invited_by_user":"stonewall"},"user_is_author":false,"tags":["formalmethods","programming"]},{"short_id":"q08509","short_id_url":"https://lobste.rs/s/q08509","created_at":"2024-02-24T10:51:59.000-06:00","title":"Sway 1.9","url":"https://github.com/swaywm/sway/releases/tag/1.9","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/q08509/sway_1_9","submitter_user":{"username":"pimeys","created_at":"2023-02-27T12:43:56.000-06:00","is_admin":false,"about":"https://prisma.io\r\n","is_moderator":false,"karma":47,"avatar_url":"/avatars/pimeys-100.png","invited_by_user":"Jolg42","github_username":"pimeys"},"user_is_author":false,"tags":["linux","release"]},{"short_id":"y1jn40","short_id_url":"https://lobste.rs/s/y1jn40","created_at":"2024-02-24T10:30:52.000-06:00","title":"Reverse-Engineering a Switch Lite Boardview at 6,000 Pixels Per Inch","url":"https://usoldering.com/switch-lite/","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/y1jn40/reverse_engineering_switch_lite","submitter_user":{"username":"unlobito","created_at":"2021-01-21T09:28:26.000-06:00","is_admin":false,"about":"(it/she)\r\n\r\nthrough psychological safety, we can build high performing teams that trust in each other and believe in the value of their work","is_moderator":false,"karma":265,"avatar_url":"/avatars/unlobito-100.png","invited_by_user":"soatok","github_username":"unlobito","keybase_signatures":[{"kb_username":"unlobito","sig_hash":"f78c5437427c1e04d3d8e1dd92459e29efe233412e659630bb8e24caf3f1981d0f"}]},"user_is_author":false,"tags":["hardware","reversing"]},{"short_id":"rurlxp","short_id_url":"https://lobste.rs/s/rurlxp","created_at":"2024-02-24T09:41:20.000-06:00","title":"Asynchronous clean-up [in Rust]","url":"https://without.boats/blog/asynchronous-clean-up/","score":9,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rurlxp/asynchronous_clean_up_rust","submitter_user":{"username":"withoutboats","created_at":"2024-01-24T05:42:05.000-06:00","is_admin":false,"about":"In civilizations without boats, dreams dry up.\r\n\r\nhttps://without.boats","is_moderator":false,"karma":174,"avatar_url":"/avatars/withoutboats-100.png","invited_by_user":"skade"},"user_is_author":true,"tags":["rust"]},{"short_id":"nmls74","short_id_url":"https://lobste.rs/s/nmls74","created_at":"2024-02-24T06:47:56.000-06:00","title":"CSS :has() Interactive Guide","url":"https://ishadeed.com/article/css-has-guide/","score":6,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nmls74/css_has_interactive_guide","submitter_user":{"username":"carlana","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carlana Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":17140,"avatar_url":"/avatars/carlana-100.png","invited_by_user":"peterbourgon","github_username":"earthboundkid"},"user_is_author":false,"tags":["css"]},{"short_id":"qhxh4b","short_id_url":"https://lobste.rs/s/qhxh4b","created_at":"2024-02-24T02:39:13.000-06:00","title":"Contributing Scrutiny to nixpkgs","url":"https://jnsgr.uk/2024/02/contributing-scrutiny-to-nixpkgs/","score":11,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qhxh4b/contributing_scrutiny_nixpkgs","submitter_user":{"username":"jnsgruk","created_at":"2023-02-22T04:26:31.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":96,"avatar_url":"/avatars/jnsgruk-100.png","invited_by_user":"pieq"},"user_is_author":true,"tags":["nix"]},{"short_id":"uocusk","short_id_url":"https://lobste.rs/s/uocusk","created_at":"2024-02-24T01:49:40.000-06:00","title":"StreetPass for Mastodon","url":"https://streetpass.social","score":29,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uocusk/streetpass_for_mastodon","submitter_user":{"username":"icy","created_at":"2019-03-22T08:39:08.000-05:00","is_admin":false,"about":"[@icy@icyphox.sh](https://h.icyphox.sh/@icy) on the fedi\r\n\r\nhelsinki, finland","is_moderator":false,"karma":2707,"avatar_url":"/avatars/icy-100.png","invited_by_user":"romanzolotarev","github_username":"icyphox"},"user_is_author":false,"tags":["web"]},{"short_id":"efm8nv","short_id_url":"https://lobste.rs/s/efm8nv","created_at":"2024-02-24T01:19:35.000-06:00","title":"StringZilla: Up to 10x faster strings for C, C++, Python, Rust, and Swift","url":"https://github.com/ashvardanian/StringZilla","score":6,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/efm8nv/stringzilla_up_10x_faster_strings_for_c_c","submitter_user":{"username":"dvk","created_at":"2017-04-12T13:35:58.000-05:00","is_admin":false,"about":"Indie developer. Working full-time on OSS since 2013. Climber, runner, cyclist, father.","is_moderator":false,"karma":290,"avatar_url":"/avatars/dvk-100.png","invited_by_user":"lukas","github_username":"dannyvankooten"},"user_is_author":false,"tags":["c","c++","python","rust"]},{"short_id":"4hltnk","short_id_url":"https://lobste.rs/s/4hltnk","created_at":"2024-02-24T01:16:58.000-06:00","title":"Shoes! The easiest little GUI toolkit, for Ruby","url":"http://shoesrb.com/","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4hltnk/shoes_easiest_little_gui_toolkit_for_ruby","submitter_user":{"username":"mpweiher","created_at":"2019-11-22T11:22:25.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":2012,"avatar_url":"/avatars/mpweiher-100.png","invited_by_user":"mulle_nat","github_username":"mpw"},"user_is_author":false,"tags":["ruby"]},{"short_id":"ujfsdw","short_id_url":"https://lobste.rs/s/ujfsdw","created_at":"2024-02-23T20:48:55.000-06:00","title":"Intel Processor Instability Causing Oodle Decompression Failures","url":"https://www.radgametools.com/oodleintel.htm","score":14,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ujfsdw/intel_processor_instability_causing","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":102531,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"user_is_author":false,"tags":["hardware"]},{"short_id":"jovx77","short_id_url":"https://lobste.rs/s/jovx77","created_at":"2024-02-23T18:50:35.000-06:00","title":"Static Assert in Go","url":"https://zephyrtronium.github.io/articles/static-assert.html","score":9,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jovx77/static_assert_go","submitter_user":{"username":"carlana","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carlana Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":17140,"avatar_url":"/avatars/carlana-100.png","invited_by_user":"peterbourgon","github_username":"earthboundkid"},"user_is_author":false,"tags":["go"]},{"short_id":"mdvuyq","short_id_url":"https://lobste.rs/s/mdvuyq","created_at":"2024-02-23T15:28:30.000-06:00","title":"Really Large Repositories","url":"https://blog.gitbutler.com/git-tips-3-really-large-repositories/","score":21,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mdvuyq/really_large_repositories","submitter_user":{"username":"ebababi","created_at":"2018-10-14T11:47:38.000-05:00","is_admin":false,"about":"I am a programmer who likes playing music...","is_moderator":false,"karma":414,"avatar_url":"/avatars/ebababi-100.png","invited_by_user":"alynpost","github_username":"ebababi"},"user_is_author":false,"tags":["vcs"]},{"short_id":"fxbaoj","short_id_url":"https://lobste.rs/s/fxbaoj","created_at":"2024-02-23T14:33:00.000-06:00","title":"Cycles all the way down","url":"https://coredumped.dev/2024/02/23/cycles-all-way-down/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fxbaoj/cycles_all_way_down","submitter_user":{"username":"Celeritas","created_at":"2023-03-10T06:42:29.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":116,"avatar_url":"/avatars/Celeritas-100.png","invited_by_user":"Wilfred"},"user_is_author":true,"tags":["emacs","lisp"]},{"short_id":"gpiiax","short_id_url":"https://lobste.rs/s/gpiiax","created_at":"2024-02-23T14:20:40.000-06:00","title":"Dynamic bindings and more","url":"https://jank-lang.org/blog/2024-02-23-bindings/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gpiiax/dynamic_bindings_more","submitter_user":{"username":"jeaye","created_at":"2022-08-11T18:49:43.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":70,"avatar_url":"/avatars/jeaye-100.png","invited_by_user":"technomancy"},"user_is_author":true,"tags":["c++","clojure","plt"]},{"short_id":"khugml","short_id_url":"https://lobste.rs/s/khugml","created_at":"2024-02-23T13:07:26.000-06:00","title":"How to make self-hosted maps that work everywhere and cost next to nothing","url":"https://www.muckrock.com/news/archives/2024/feb/13/release-notes-how-to-make-self-hosted-maps-that-work-everywhere-cost-next-to-nothing-and-might-even-work-in-airplane-mode/","score":20,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/khugml/how_make_self_hosted_maps_work_everywhere","submitter_user":{"username":"pushcx","created_at":"2012-08-14T20:25:08.000-05:00","is_admin":true,"about":"Hi, I'm [Peter Bhat Harkins](https://malaprop.org), a programmer and entrepreneur from Chicago. From June 2014 to winter of 2015 I typically posted a dozen stories per day to [help](https://lobste.rs/s/9pm09z/what_is_on_topic_what_is_not/comments/nie0yn#c_nie0yn) the site reach a critical mass of regular visitors. In October 2017 I became the site administrator after the site creator @jcs stepped down.\r\n\r\n * Please don’t message me for an invitation if we're complete strangers; check \u003ca href=\"https://lobste.rs/u\"\u003ethe user list\u003c/a\u003e for someone you know or ask [in chat](https://lobste.rs/chat).\r\n * Submit a [`meta`](https://lobste.rs/t/meta) post for feature requests (including new tags) to let the community discuss. Bug reports and \"is this a bug?\" should go to [the issue tracker](https://github.com/lobsters/lobsters/issues).\r\n * [Message me](https://lobste.rs/messages?to=pushcx) for administrative and moderator things. I don't see everything and I gotta sleep sometime.\r\n * E-mail my first name @malaprop.org regarding site security or if you can't log in to message me. If I've posted or commented about something here or in the chat room, I'd almost certainly love to talk more about it.\r\n","is_moderator":true,"avatar_url":"/avatars/pushcx-100.png","invited_by_user":"jcs","github_username":"pushcx","mastodon_username":"pushcx","keybase_signatures":[{"kb_username":"pushcx","sig_hash":"de6fb28b501c211e88fabddeacc834c6b922d738efd6b4108ce871879d039e510f"}]},"user_is_author":false,"tags":["web"]},{"short_id":"y2xpov","short_id_url":"https://lobste.rs/s/y2xpov","created_at":"2024-02-23T12:46:44.000-06:00","title":"After 14 years in the industry, I still find programming difficult","url":"https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/y2xpov/after_14_years_industry_i_still_find","submitter_user":{"username":"crstry","created_at":"2021-03-19T05:50:36.000-05:00","is_admin":false,"about":"Voluntary carcinization subject","is_moderator":false,"karma":1214,"avatar_url":"/avatars/crstry-100.png","invited_by_user":"boffbowsh"},"user_is_author":false,"tags":["programming"]},{"short_id":"genptl","short_id_url":"https://lobste.rs/s/genptl","created_at":"2024-02-23T12:19:55.000-06:00","title":"JavaScript Registry: First Impressions","url":"https://dbushell.com/2024/02/16/jsr-first-impression/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/genptl/javascript_registry_first_impressions","submitter_user":{"username":"carlana","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carlana Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":17140,"avatar_url":"/avatars/carlana-100.png","invited_by_user":"peterbourgon","github_username":"earthboundkid"},"user_is_author":false,"tags":["javascript"]},{"short_id":"zxbpho","short_id_url":"https://lobste.rs/s/zxbpho","created_at":"2024-02-23T11:46:20.000-06:00","title":"Osquery: An sqlite3 virtual table exposing operating system data to SQL","url":"https://osquery.io/","score":10,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zxbpho/osquery_sqlite3_virtual_table_exposing","submitter_user":{"username":"epilys","created_at":"2017-05-09T09:29:51.000-05:00","is_admin":false,"about":"Virtualization and Emulation Engineer at Linaro.\r\n\r\nMaintainer of [`meli`](https://github.com/meli/meli), a terminal e-mail client.","is_moderator":false,"karma":2083,"avatar_url":"/avatars/epilys-100.png","invited_by_user":"river","github_username":"epilys","mastodon_username":"epilys"},"user_is_author":false,"tags":["databases"]},{"short_id":"mkw6ad","short_id_url":"https://lobste.rs/s/mkw6ad","created_at":"2024-02-23T09:50:49.000-06:00","title":"Making Tables Responsive With Minimal CSS","url":"https://btxx.org/posts/tables/","score":9,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mkw6ad/making_tables_responsive_with_minimal","submitter_user":{"username":"MatheusRich","created_at":"2022-01-20T08:23:08.000-06:00","is_admin":false,"about":"🇧🇷 developer @ thoughtbot","is_moderator":false,"karma":614,"avatar_url":"/avatars/MatheusRich-100.png","invited_by_user":"edwardloveall","github_username":"MatheusRich"},"user_is_author":false,"tags":["css","web"]},{"short_id":"j9prdc","short_id_url":"https://lobste.rs/s/j9prdc","created_at":"2024-02-23T09:26:43.000-06:00","title":"Pipeline-oriented Programming (2019)","url":"https://fsharpforfunandprofit.com/pipeline/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/j9prdc/pipeline_oriented_programming_2019","submitter_user":{"username":"pushcx","created_at":"2012-08-14T20:25:08.000-05:00","is_admin":true,"about":"Hi, I'm [Peter Bhat Harkins](https://malaprop.org), a programmer and entrepreneur from Chicago. From June 2014 to winter of 2015 I typically posted a dozen stories per day to [help](https://lobste.rs/s/9pm09z/what_is_on_topic_what_is_not/comments/nie0yn#c_nie0yn) the site reach a critical mass of regular visitors. In October 2017 I became the site administrator after the site creator @jcs stepped down.\r\n\r\n * Please don’t message me for an invitation if we're complete strangers; check \u003ca href=\"https://lobste.rs/u\"\u003ethe user list\u003c/a\u003e for someone you know or ask [in chat](https://lobste.rs/chat).\r\n * Submit a [`meta`](https://lobste.rs/t/meta) post for feature requests (including new tags) to let the community discuss. Bug reports and \"is this a bug?\" should go to [the issue tracker](https://github.com/lobsters/lobsters/issues).\r\n * [Message me](https://lobste.rs/messages?to=pushcx) for administrative and moderator things. I don't see everything and I gotta sleep sometime.\r\n * E-mail my first name @malaprop.org regarding site security or if you can't log in to message me. If I've posted or commented about something here or in the chat room, I'd almost certainly love to talk more about it.\r\n","is_moderator":true,"avatar_url":"/avatars/pushcx-100.png","invited_by_user":"jcs","github_username":"pushcx","mastodon_username":"pushcx","keybase_signatures":[{"kb_username":"pushcx","sig_hash":"de6fb28b501c211e88fabddeacc834c6b922d738efd6b4108ce871879d039e510f"}]},"user_is_author":false,"tags":["dotnet","slides"]},{"short_id":"dghv8d","short_id_url":"https://lobste.rs/s/dghv8d","created_at":"2024-02-23T09:02:54.000-06:00","title":"Please Make Your Table Headings Sticky","url":"https://btxx.org/posts/Please_Make_Your_Table_Headings_Sticky/","score":63,"flags":0,"comment_count":16,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dghv8d/please_make_your_table_headings_sticky","submitter_user":{"username":"bt","created_at":"2022-09-23T07:06:36.000-05:00","is_admin":false,"about":"UX designer / developer passionate about usability and software freedom.","is_moderator":false,"karma":505,"avatar_url":"/avatars/bt-100.png","invited_by_user":"galaiko"},"user_is_author":true,"tags":["web"]},{"short_id":"kz0jpg","short_id_url":"https://lobste.rs/s/kz0jpg","created_at":"2024-02-23T08:32:26.000-06:00","title":"Everyone seems to forget why GNOME and GNOME 3 and Unity happened (2022)","url":"https://liam-on-linux.dreamwidth.org/85359.html","score":24,"flags":4,"comment_count":15,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kz0jpg/everyone_seems_forget_why_gnome_gnome_3","submitter_user":{"username":"drs","created_at":"2015-11-24T15:34:32.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":937,"avatar_url":"/avatars/drs-100.png","invited_by_user":"brynet"},"user_is_author":false,"tags":["design","historical","linux"]},{"short_id":"w3zkxx","short_id_url":"https://lobste.rs/s/w3zkxx","created_at":"2024-02-23T08:31:37.000-06:00","title":"Lobsters interview with Bjorn Stahl","url":"","score":102,"flags":0,"comment_count":9,"description":"\u003cp\u003eAfter \u003ca href=\"https://lobste.rs/~PhantomZorba\" rel=\"ugc\"\u003e@PhantomZorba\u003c/a\u003e did the \u003ca href=\"https://lobste.rs/s/ttr8op/lobsters_interview_with_david_chisnall\" rel=\"ugc\"\u003einterview with me last month\u003c/a\u003e we decided to try to make the lobste.rs interview series a relay, where each interviewee then interviews someone else.  Picking a single person from this community is hard, but \u003ca href=\"https://arcan-fe.com\" rel=\"ugc\"\u003eArcan\u003c/a\u003e is the project that I wish I had the time, expertise, and patience to have written, so I had to choose \u003ca href=\"https://lobste.rs/~crazyloglad\" rel=\"ugc\"\u003e@crazyloglad\u003c/a\u003e.\u003c/p\u003e\n\u003cstrong\u003eIntroduce yourself, describe what you do for work and how long you’ve been at it.\u003c/strong\u003e\n\u003cp\u003eHello! For the last few years I have been an independent contractor working with smaller startups in information security. I have just finished a longer engagement into hardware reversing and am taking something of a breather doing more playful things. On the open-source side of the world, I am the architect and lead engineer of the Arcan project.\u003c/p\u003e\n\u003cp\u003eThere are paper trails that say I am a software engineer, yet others that say I am a computer scientist. For me, I tend to stick with the term ‘reverser’; it means little to most but much to a few and the few tend to interest me more than the many.\u003c/p\u003e\n\u003cp\u003eMy background in computing is life-long. I am a child of the personal computing era. My conversations with the Commodore 64 happened much too early, starting with the Usborne Publishing ‘Computer Battlegames’ book and continued into devouring anything the local library could provide thereafter, picking up English in the process. This took place in a small village close to the 56th parallel north where computers were mostly dismissed as witchcraft and being accused of performing witchcraft didn’t make life any easier.\u003c/p\u003e\n\u003cp\u003eI will try and fail to keep this short, condensing the last three decades into three pivotal moments. The first moment from my preteens-into-teens was emulation. With home consoles becoming more prevalent I got curious as to why games on one system wouldn’t run on another, especially not on my own beloved computer: Isn’t it all just code? I started asking around in the circle of much older explorers and penpals and got a cursory explanation that it was difficult and unreasonable. That sounded like just my thing. Someone handed me a printout of phone numbers to ‘Bulletin Boards’ which led to heavier drugs like FidoNet and a small world suddenly became very large and down the rabbit hole I went.\u003c/p\u003e\n\u003cp\u003eThe second pivot was the PhD thing. I enrolled at university to try and get some structure to the chaos of being primarily autodidactic. It was a small university that had the reputation of being a place for ‘hackers’ through the ‘software engineering’ disguise. For a small pocket of time the student housing area was a sight to behold, and every scene from cracking to osdev to demos to gamedev was represented in abundance. There was an offer of a place to work in a lab, coding 3D engines and visualizations for demonstrators of autonomous coordination of naval vessels and submarines and things like that. I built something of a repertoire with the professor that was pulling the strings, which started the doctoral journey. My main interest was (and remains) debugging when things grow large, complex and distributed. Following the money meant that the best fit at the time was SCADA for critical infrastructure, and the consequences when energy systems would need to be restructured to deal with consumers also being producers and you can no longer hide behind the lie of control systems being ‘air-gapped’. In that context nobody would listen if you talked debugging, so I had to flip the switch to talk about security.\u003c/p\u003e\n\u003cp\u003eThe third pivot was first an industrial collaboration that turned into employment at a tiger-team (the ‘Men in Black’) at Sony-Ericsson, now SONY Mobile. This happened just before the transition from feature-phones into smartphones. This group dealt with putting out fires, meaning critical bugs that others had given up on but meant the death of a product or possibly the company if it caused device returns. The margins were razor thin; if you could save a few cents on the BOM by not having a MMU and process isolation, you saved a few cents on the BOM. A close friend and I tried to distil some of these lessons into trainings and a university course on the subject, with the ‘NDA friendly’ version still around on the Internet somewhere under the idea of ‘Systemic Software Debugging’ which I hope to revisit someday in a more approachable format.\u003c/p\u003e\n\u003cstrong\u003eWhat is your work/computing environment like?\u003c/strong\u003e\n\u003cp\u003eVery compartmentalised.\u003c/p\u003e\n\u003cp\u003eMy house is less of a house and more of a daycare for forever young techies. I have one lab for coding with a big desktop and a lot of ‘one purpose devices’, novelty displays and input tech. Of note is a small cluster of ephemeral devices that boot from preset images and run some software that I need but deeply distrust (like web browsers). These reset and re-image (saving raw-disk diffs if something strange happens) and map into tabs, though the windowing scheme used is quite different.\u003c/p\u003e\n\u003cp\u003eI work offline with ‘bare minimal’ editor and man pages instead of IDEs and autocompletion as I tend to, paraphrasing James Mickens, break my tools with my tools.\u003c/p\u003e\n\u003cp\u003eAnother lab doubles as a home theater. This is used for VR and general controlled environment ‘audio/video’ testing. The more playful things happen in the basement area around pinball machines and DIY arcade games. Pinballs are great fun for computer-vision like experiments. The latest addition is a more controlled space for lower level hardware work - with the usual scopes, some laser ‘cutters’, CNCs, 3D printers and so on.\u003c/p\u003e\n\u003cp\u003eI also rely on printing things on paper and scribble. I always carry at least one notebook or e-Ink notetaker. There is also something almost purifying when later shredding and incinerating the evidence. When travelling, commuting or just hiding in a pub or bar for a change of scenery I nowadays tend to use AR glasses hooked up to a steam deck or laptop.\u003c/p\u003e\n\u003cstrong\u003eAt some point it appears that you decided to rewrite the *NIX graphics stack from scratch, how did that happen?\u003c/strong\u003e\n\u003cp\u003eReluctantly and regrettably. Knowing what I know today I probably would not have bothered. I approach ‘system graphics’ from an angle of signal processing and queueing theory (IPC systems) rather than what most think of as ‘graphics’. In that sense we are mixing and resampling signals much more than drawing pixels. Very little of the actual work is modern graphics, and I am artificially constrained by the capability ‘sweet-spot’ of the first generation Raspberry Pi.\u003c/p\u003e\n\u003cp\u003eThis is done in order to get away from the influence of GPUs that only a few can build and comprehend, and to be able to work on simpler dedicated processors that many more can design and build. Many architectural decisions in Arcan are explicitly to begin the painful decoupling from proprietary GPUs. The modern GPU ecosystem is highly abusive and deliberately user unfriendly yet is in a place where it is actually running the show. I don’t like that.\u003c/p\u003e\n\u003cp\u003eThere is also a personal story of trying to build the panopticon of debugging. With that I mean ‘observing and experimenting’ with the Rube Goldberg contraption of what we unknowingly build by smashing pieces of software together. Even though the individual pieces can sometimes be formally proven to work and then actually made to work, the solutions that we end up with often solves some problem in a very convoluted way, but we lack the faculties to see it. Part of the reason for that is a tooling problem.\u003c/p\u003e\n\u003cp\u003eThis coincides with the other side of the same coin. What I am trying to achieve with the Arcan project, and the sole reason any of this is public, is that I want to string together some of the frayed threads of our history. With that I mean to resurrect some of what we lost from the personal computer era where you just ‘powered on and started to code’ as a means of exploring computing. This is not meant as a retrocomputing romance. The output should be more capable than what we already have, not less. There are other and far more interesting and intimate webs to uncover than the ones we have, Ted Nelson even said as much.\u003c/p\u003e\n\u003cp\u003eThis is also why I keep aiming that any layer follows the model of having agency be defined and scriptable in Lua - which I find to be a more civilized take on BASIC. Lua is a fair vantage point for working towards the abstract if that is your thing, but also for digging further down the stack. The target audience is not so much the developers that are, as much as the ones that should come. For that aim to have any chance of success at all, controlling the tactile, the aural and the visual need to be much more approachable and many still start their journey programming games.\u003c/p\u003e\n\u003cstrong\u003eYou mentioned that you sometime regret going down the path of building a new display system, if you could give one piece of advice to your younger self, what would it be?\u003c/strong\u003e\n\u003cp\u003eBecause you asked for one, I will provide two – mainly because the most important one is really short: Disseminate earlier. The distance from what has been done and where my mental model currently sits compared to what is written down or published is several years. I was afraid of stepping on toes even though I should be crushing feet. There are good reasons as to why I couldn’t, but that doesn’t invalidate the fact that I was overly careful and have been paying the price ever since.\u003c/p\u003e\n\u003cp\u003eThe real ‘one’ would be to stick to the first plan for the integration story. For a long time I simply used Xorg as the user space portion of the display driver and had all my bits and pieces running as the one and only full screen surface, just disable its native socket after setup and done. There was simply not much to gain from trying to use the lower level interfaces as they were being split out and refactored away from Xorg. I have easily wasted years trying to untangle issues caused by subtle changes to that neverending refactoring story and the building blocks are still woefully incomplete.\u003c/p\u003e\n\u003cp\u003eAt the same time I maintained a private, less than friendly version of Android that swapped out parts of their stack for mine using all the tricks in the offensive software engineering playbook. This was abandoned a long time ago and I shouldn’t have done so. Part of the reason I did was the fallout from witnessing FirefoxOS from a front row seat. The architecture I was trying to push would have had a much better chance (still dangerously close to zero). In the end that would have been a much more fruitful path than the FreeDesktop one, which could have been retrofitted much later. The strategic position of having a seemless transition away from the Android we know today that isn’t hinged on whole-system virtualization would have been very valuable.\u003c/p\u003e\n\u003cstrong\u003eYou said that part of your goal is tying together the frayed threads of history. In computing, there are a lot of paths that were abandoned for various reasons that you may no longer apply. What idea would you most like to see resurrected from computing history?\u003c/strong\u003e\n\u003cp\u003eThe old quip about the future already being here, just not evenly distributed applies to the past as well. In that sense I think there is little that has actually gone away, merely drifted out of sight until the next opportune cycle. Just consider how many rounds of ebb and flow we have had for AI, Virtualization and Centralized-shared versus Distributed-single user.\u003c/p\u003e\n\u003cp\u003eThe framing I would like to see is webs of personal computing. In this sense the ‘app’ is a topic of interest originating at the individual by default, but invites, or even mandates, collaboration around said topic (or a slice thereof).\u003c/p\u003e\n\u003cp\u003eHere, the economy should be around active participation rather than the current default of a quiet (or in twitch.tv - loud but saying nothing) mass which observes, takes note and punishes or rewards the central figurehead while simultaneously fighting to take the spotlight, which encourages censorship over attenuating a message.\u003c/p\u003e\n\u003cp\u003eWith modern hardware and communications, local content and links can be much more dynamic and interactive. Within it I want to see the ‘living document’ revisited as a communal scratchpad.\u003c/p\u003e\n\u003cp\u003eThis would land closer to a continuation of where the BBS model meets Xanadu with an internal representation closer to that of NeWS and Display Postscript with overlays for alternate presentation to account for accessibility. It would warrant other solutions than ‘cloud central’ web for a number of interesting areas across the board: from authenticated identity to search and retrieval, but especially for the principal building block that is ‘the link’.\u003c/p\u003e\n\u003cp\u003eDone wrong (URL) the link is merely an web-ABI conforming RPC call or (symlink) a reference to a data assumption (“everything” is a file schtick). If so, ancillary systems chime in and compensate for abandoned opportunity. That is how you get “advertisement and 3rd party cookies”, man-in-the-middle “shorteners” and so on. Just as the dynamics would change if the one being linked contractually knows who linked to them, the rules we bake in here has a profound systemic effect.\u003c/p\u003e\n\u003cstrong\u003eIf you could make all OS kernels include one feature, and have compatible implementations supported everywhere, what would it be?\u003c/strong\u003e\n\u003cp\u003eI think the pragmatic reality of dealing with- and sustaining- legacy while also paving the way for new things is the most important part for the kernel to play and curate, so this is really for the popular user facing kernels and not more research, nostalgia or server specialized ones. The biggest problem I have right now is not the lack of any singular feature, but how the current ones are exposed.\u003c/p\u003e\n\u003cp\u003eThe single most expensive and needlessly painful parts have been working with capabilities and resource identifier tokens, whatever we call them (HANDLEs, file descriptors). The POSIX ones are worst in class, much thanks to the sparse allocation requirement but also thanks to the staggered evolution of all the support functions that comes with it. This is worse in graphics where you might need to juggle tens of tokens to cover even a single image frame. Connected to this is process and thread creation but that is only part of the story. Inheriting a complex set of states as per fork() is bad, but the other side of the very verbose ‘CreateProcessEx’ or ‘posix_spawn’ is not that much better.\u003c/p\u003e\n\u003cp\u003eWhat I want from the OS is a better and coherent interface for specifying short lived, language runtime agnostic and specialized compute, especially as we are getting more FPGAs, DSPs, and so on. Having one interface for FPGAs, a handful for GPUs, others for tracing then to try and specify the compute, lifecycle, resource access permissions, data transfer and error handling conditions over things as unrefined and inefficient as kill, mmap, mprotect, madvise, read, write, exec etc. is soul-crushing to say the least.\u003c/p\u003e\n\u003cstrong\u003eI found a lot of the low level bits of the open source graphics stacks very hard to understand, what would you recommend for someone wanting to get started in this area?\u003c/strong\u003e\n\u003cp\u003eA challenge in unpacking the graphic stack is that it is not in a single discrete place, but smeared all over. Surprisingly little is actually ‘inside’ the display server API or display server itself.\u003c/p\u003e\n\u003cp\u003eMuch more live in the accelerated graphics API, and how it talks to kernel devices (this is MESA and through it, KMS/GBM or HWC/Gralloc in Android). That said, MESA has many faces and while the public ones relate to the many versions and extensions of GL and Vulkan, that is only part of the story. For the actual ‘graphics’ part, that is the place to study or use as reference. Note that the MESA codebase started around 1993 with all that entails. It’s not an easy read.\u003c/p\u003e\n\u003cp\u003eWhat I think is the best course of action depends a bit on where you current intuition took a wrong turn. The most common one in my experience is the mistake of thinking of a ‘framebuffer’ that you batch write ‘pixels’ into, binned by some discrete synchronization signal (‘vsynch’, ‘vblank’, …). This is common because that is often at least part of what higher level graphics API used to offer the developer.\u003c/p\u003e\n\u003cp\u003eThe printer was, and is, a more accurate model. Just as there was good reason for why the printer server part of Xorg fell out of favour, there was good reason for why it was there in the first place.\u003c/p\u003e\n\u003cp\u003eWe still queue deeply paginated batches of draw commands to a strange and foreign device that looks at colours very differently from what we do; papers still get stuck; often we want to cancel a dispatched job because it contained the wrong thing or something changed; render times vary wildly for unclear reasons and so on. The display server do to render jobs what the printer spooler did to print jobs.\u003c/p\u003e\n\u003cp\u003eFor the real system graphics experience however, pick a single usecase in normal desktop use that is common. The one that I prefer when comparing is ‘drag resizing’ a window as it really gives every subsystem a good shake. This is where you will find the biggest divergence between solutions and near every design decision comes into scrutiny.\u003c/p\u003e\n","description_plain":"After @PhantomZorba did the [interview with me last month](https://lobste.rs/s/ttr8op/lobsters_interview_with_david_chisnall) we decided to try to make the lobste.rs interview series a relay, where each interviewee then interviews someone else.  Picking a single person from this community is hard, but [Arcan](https://arcan-fe.com) is the project that I wish I had the time, expertise, and patience to have written, so I had to choose @crazyloglad.\r\n\r\n\r\n# Introduce yourself, describe what you do for work and how long you’ve been at it.\r\n\r\nHello! For the last few years I have been an independent contractor working with smaller startups in information security. I have just finished a longer engagement into hardware reversing and am taking something of a breather doing more playful things. On the open-source side of the world, I am the architect and lead engineer of the Arcan project.\r\n\r\nThere are paper trails that say I am a software engineer, yet others that say I am a computer scientist. For me, I tend to stick with the term ‘reverser’; it means little to most but much to a few and the few tend to interest me more than the many.\r\n\r\nMy background in computing is life-long. I am a child of the personal computing era. My conversations with the Commodore 64 happened much too early, starting with the Usborne Publishing ‘Computer Battlegames’ book and continued into devouring anything the local library could provide thereafter, picking up English in the process. This took place in a small village close to the 56th parallel north where computers were mostly dismissed as witchcraft and being accused of performing witchcraft didn’t make life any easier.\r\n\r\nI will try and fail to keep this short, condensing the last three decades into three pivotal moments. The first moment from my preteens-into-teens was emulation. With home consoles becoming more prevalent I got curious as to why games on one system wouldn’t run on another, especially not on my own beloved computer: Isn’t it all just code? I started asking around in the circle of much older explorers and penpals and got a cursory explanation that it was difficult and unreasonable. That sounded like just my thing. Someone handed me a printout of phone numbers to ‘Bulletin Boards’ which led to heavier drugs like FidoNet and a small world suddenly became very large and down the rabbit hole I went.\r\n\r\nThe second pivot was the PhD thing. I enrolled at university to try and get some structure to the chaos of being primarily autodidactic. It was a small university that had the reputation of being a place for ‘hackers’ through the ‘software engineering’ disguise. For a small pocket of time the student housing area was a sight to behold, and every scene from cracking to osdev to demos to gamedev was represented in abundance. There was an offer of a place to work in a lab, coding 3D engines and visualizations for demonstrators of autonomous coordination of naval vessels and submarines and things like that. I built something of a repertoire with the professor that was pulling the strings, which started the doctoral journey. My main interest was (and remains) debugging when things grow large, complex and distributed. Following the money meant that the best fit at the time was SCADA for critical infrastructure, and the consequences when energy systems would need to be restructured to deal with consumers also being producers and you can no longer hide behind the lie of control systems being ‘air-gapped’. In that context nobody would listen if you talked debugging, so I had to flip the switch to talk about security.\r\n\r\nThe third pivot was first an industrial collaboration that turned into employment at a tiger-team (the ‘Men in Black’) at Sony-Ericsson, now SONY Mobile. This happened just before the transition from feature-phones into smartphones. This group dealt with putting out fires, meaning critical bugs that others had given up on but meant the death of a product or possibly the company if it caused device returns. The margins were razor thin; if you could save a few cents on the BOM by not having a MMU and process isolation, you saved a few cents on the BOM. A close friend and I tried to distil some of these lessons into trainings and a university course on the subject, with the ‘NDA friendly’ version still around on the Internet somewhere under the idea of ‘Systemic Software Debugging’ which I hope to revisit someday in a more approachable format.\r\n\r\n\r\n# What is your work/computing environment like?\r\n\r\nVery compartmentalised.\r\n\r\nMy house is less of a house and more of a daycare for forever young techies. I have one lab for coding with a big desktop and a lot of ‘one purpose devices’, novelty displays and input tech. Of note is a small cluster of ephemeral devices that boot from preset images and run some software that I need but deeply distrust (like web browsers). These reset and re-image (saving raw-disk diffs if something strange happens) and map into tabs, though the windowing scheme used is quite different.\r\n\r\nI work offline with ‘bare minimal’ editor and man pages instead of IDEs and autocompletion as I tend to, paraphrasing James Mickens, break my tools with my tools.\r\n\r\nAnother lab doubles as a home theater. This is used for VR and general controlled environment ‘audio/video’ testing. The more playful things happen in the basement area around pinball machines and DIY arcade games. Pinballs are great fun for computer-vision like experiments. The latest addition is a more controlled space for lower level hardware work - with the usual scopes, some laser ‘cutters’, CNCs, 3D printers and so on.\r\n\r\nI also rely on printing things on paper and scribble. I always carry at least one notebook or e-Ink notetaker. There is also something almost purifying when later shredding and incinerating the evidence. When travelling, commuting or just hiding in a pub or bar for a change of scenery I nowadays tend to use AR glasses hooked up to a steam deck or laptop.\r\n\r\n# At some point it appears that you decided to rewrite the *NIX graphics stack from scratch, how did that happen?\r\n\r\nReluctantly and regrettably. Knowing what I know today I probably would not have bothered. I approach ‘system graphics’ from an angle of signal processing and queueing theory (IPC systems) rather than what most think of as ‘graphics’. In that sense we are mixing and resampling signals much more than drawing pixels. Very little of the actual work is modern graphics, and I am artificially constrained by the capability ‘sweet-spot’ of the first generation Raspberry Pi.\r\n\r\nThis is done in order to get away from the influence of GPUs that only a few can build and comprehend, and to be able to work on simpler dedicated processors that many more can design and build. Many architectural decisions in Arcan are explicitly to begin the painful decoupling from proprietary GPUs. The modern GPU ecosystem is highly abusive and deliberately user unfriendly yet is in a place where it is actually running the show. I don’t like that.\r\n\r\nThere is also a personal story of trying to build the panopticon of debugging. With that I mean ‘observing and experimenting’ with the Rube Goldberg contraption of what we unknowingly build by smashing pieces of software together. Even though the individual pieces can sometimes be formally proven to work and then actually made to work, the solutions that we end up with often solves some problem in a very convoluted way, but we lack the faculties to see it. Part of the reason for that is a tooling problem.\r\n\r\nThis coincides with the other side of the same coin. What I am trying to achieve with the Arcan project, and the sole reason any of this is public, is that I want to string together some of the frayed threads of our history. With that I mean to resurrect some of what we lost from the personal computer era where you just ‘powered on and started to code’ as a means of exploring computing. This is not meant as a retrocomputing romance. The output should be more capable than what we already have, not less. There are other and far more interesting and intimate webs to uncover than the ones we have, Ted Nelson even said as much.\r\n\r\nThis is also why I keep aiming that any layer follows the model of having agency be defined and scriptable in Lua - which I find to be a more civilized take on BASIC. Lua is a fair vantage point for working towards the abstract if that is your thing, but also for digging further down the stack. The target audience is not so much the developers that are, as much as the ones that should come. For that aim to have any chance of success at all, controlling the tactile, the aural and the visual need to be much more approachable and many still start their journey programming games.\r\n\r\n# You mentioned that you sometime regret going down the path of building a new display system, if you could give one piece of advice to your younger self, what would it be?\r\n\r\nBecause you asked for one, I will provide two – mainly because the most important one is really short: Disseminate earlier. The distance from what has been done and where my mental model currently sits compared to what is written down or published is several years. I was afraid of stepping on toes even though I should be crushing feet. There are good reasons as to why I couldn’t, but that doesn’t invalidate the fact that I was overly careful and have been paying the price ever since.\r\n\r\nThe real ‘one’ would be to stick to the first plan for the integration story. For a long time I simply used Xorg as the user space portion of the display driver and had all my bits and pieces running as the one and only full screen surface, just disable its native socket after setup and done. There was simply not much to gain from trying to use the lower level interfaces as they were being split out and refactored away from Xorg. I have easily wasted years trying to untangle issues caused by subtle changes to that neverending refactoring story and the building blocks are still woefully incomplete.\r\n\r\nAt the same time I maintained a private, less than friendly version of Android that swapped out parts of their stack for mine using all the tricks in the offensive software engineering playbook. This was abandoned a long time ago and I shouldn’t have done so. Part of the reason I did was the fallout from witnessing FirefoxOS from a front row seat. The architecture I was trying to push would have had a much better chance (still dangerously close to zero). In the end that would have been a much more fruitful path than the FreeDesktop one, which could have been retrofitted much later. The strategic position of having a seemless transition away from the Android we know today that isn’t hinged on whole-system virtualization would have been very valuable.\r\n\r\n# You said that part of your goal is tying together the frayed threads of history. In computing, there are a lot of paths that were abandoned for various reasons that you may no longer apply. What idea would you most like to see resurrected from computing history?\r\n\r\nThe old quip about the future already being here, just not evenly distributed applies to the past as well. In that sense I think there is little that has actually gone away, merely drifted out of sight until the next opportune cycle. Just consider how many rounds of ebb and flow we have had for AI, Virtualization and Centralized-shared versus Distributed-single user.\r\n\r\nThe framing I would like to see is webs of personal computing. In this sense the ‘app’ is a topic of interest originating at the individual by default, but invites, or even mandates, collaboration around said topic (or a slice thereof).\r\n\r\nHere, the economy should be around active participation rather than the current default of a quiet (or in twitch.tv - loud but saying nothing) mass which observes, takes note and punishes or rewards the central figurehead while simultaneously fighting to take the spotlight, which encourages censorship over attenuating a message.\r\n\r\nWith modern hardware and communications, local content and links can be much more dynamic and interactive. Within it I want to see the ‘living document’ revisited as a communal scratchpad.\r\n\r\nThis would land closer to a continuation of where the BBS model meets Xanadu with an internal representation closer to that of NeWS and Display Postscript with overlays for alternate presentation to account for accessibility. It would warrant other solutions than ‘cloud central’ web for a number of interesting areas across the board: from authenticated identity to search and retrieval, but especially for the principal building block that is ‘the link’.\r\n\r\nDone wrong (URL) the link is merely an web-ABI conforming RPC call or (symlink) a reference to a data assumption (“everything” is a file schtick). If so, ancillary systems chime in and compensate for abandoned opportunity. That is how you get “advertisement and 3rd party cookies”, man-in-the-middle “shorteners” and so on. Just as the dynamics would change if the one being linked contractually knows who linked to them, the rules we bake in here has a profound systemic effect.\r\n\r\n\r\n\r\n# If you could make all OS kernels include one feature, and have compatible implementations supported everywhere, what would it be?\r\n\r\nI think the pragmatic reality of dealing with- and sustaining- legacy while also paving the way for new things is the most important part for the kernel to play and curate, so this is really for the popular user facing kernels and not more research, nostalgia or server specialized ones. The biggest problem I have right now is not the lack of any singular feature, but how the current ones are exposed.\r\n\r\nThe single most expensive and needlessly painful parts have been working with capabilities and resource identifier tokens, whatever we call them (HANDLEs, file descriptors). The POSIX ones are worst in class, much thanks to the sparse allocation requirement but also thanks to the staggered evolution of all the support functions that comes with it. This is worse in graphics where you might need to juggle tens of tokens to cover even a single image frame. Connected to this is process and thread creation but that is only part of the story. Inheriting a complex set of states as per fork() is bad, but the other side of the very verbose ‘CreateProcessEx’ or ‘posix_spawn’ is not that much better.\r\n\r\nWhat I want from the OS is a better and coherent interface for specifying short lived, language runtime agnostic and specialized compute, especially as we are getting more FPGAs, DSPs, and so on. Having one interface for FPGAs, a handful for GPUs, others for tracing then to try and specify the compute, lifecycle, resource access permissions, data transfer and error handling conditions over things as unrefined and inefficient as kill, mmap, mprotect, madvise, read, write, exec etc. is soul-crushing to say the least.\r\n\r\n# I found a lot of the low level bits of the open source graphics stacks very hard to understand, what would you recommend for someone wanting to get started in this area?\r\n\r\nA challenge in unpacking the graphic stack is that it is not in a single discrete place, but smeared all over. Surprisingly little is actually ‘inside’ the display server API or display server itself.\r\n\r\nMuch more live in the accelerated graphics API, and how it talks to kernel devices (this is MESA and through it, KMS/GBM or HWC/Gralloc in Android). That said, MESA has many faces and while the public ones relate to the many versions and extensions of GL and Vulkan, that is only part of the story. For the actual ‘graphics’ part, that is the place to study or use as reference. Note that the MESA codebase started around 1993 with all that entails. It’s not an easy read.\r\n\r\nWhat I think is the best course of action depends a bit on where you current intuition took a wrong turn. The most common one in my experience is the mistake of thinking of a ‘framebuffer’ that you batch write ‘pixels’ into, binned by some discrete synchronization signal (‘vsynch’, ‘vblank’, …). This is common because that is often at least part of what higher level graphics API used to offer the developer.\r\n\r\nThe printer was, and is, a more accurate model. Just as there was good reason for why the printer server part of Xorg fell out of favour, there was good reason for why it was there in the first place.\r\n\r\nWe still queue deeply paginated batches of draw commands to a strange and foreign device that looks at colours very differently from what we do; papers still get stuck; often we want to cancel a dispatched job because it contained the wrong thing or something changed; render times vary wildly for unclear reasons and so on. The display server do to render jobs what the printer spooler did to print jobs.\r\n\r\nFor the real system graphics experience however, pick a single usecase in normal desktop use that is common. The one that I prefer when comparing is ‘drag resizing’ a window as it really gives every subsystem a good shake. This is where you will find the biggest divergence between solutions and near every design decision comes into scrutiny.","comments_url":"https://lobste.rs/s/w3zkxx/lobsters_interview_with_bjorn_stahl","submitter_user":{"username":"david_chisnall","created_at":"2020-03-19T12:44:25.000-05:00","is_admin":false,"about":"I am Director of System Architecture at SCI Semiconductor and a Visiting Researcher at the University of Cambridge Computer Laboratory.  I remain actively involved in the [CHERI](http://chericpu.org) project, where I led the early language / compiler strand of the research, and am the maintainer of the [CHERIoT Platform](https://cheriot.org).  \r\n\r\nI was on the FreeBSD Core Team for two terms, have been an LLVM developer since 2008, am the author of the GNUstep Objective-C runtime (libobjc2 and associated clang support), and am responsible for libcxxrt and the BSD-licensed device tree compiler.  \r\n\r\nI am [clearly at least ten people](https://lobste.rs/s/ttr8op/lobsters_interview_with_david_chisnall#c_k16zu8)","is_moderator":false,"karma":26802,"avatar_url":"/avatars/david_chisnall-100.png","invited_by_user":"Drakonis","github_username":"davidchisnall","mastodon_username":"david_chisnall"},"user_is_author":true,"tags":["interview"]},{"short_id":"9mqtoh","short_id_url":"https://lobste.rs/s/9mqtoh","created_at":"2024-02-23T08:29:43.000-06:00","title":"Warp, the modern terminal, is now available for Linux","url":"https://www.warp.dev/blog/warp-for-linux","score":-5,"flags":6,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9mqtoh/warp_modern_terminal_is_now_available_for","submitter_user":{"username":"kghose","created_at":"2014-09-03T12:48:11.000-05:00","is_admin":false,"about":"Electrical Engineer, Software writer, fascinated by mathematics, visualizations and the human brain, currently a novice bioinformatician. [Long form articles and coding diary](http://kaushikghose.wordpress.com)\r\n","is_moderator":false,"karma":4216,"avatar_url":"/avatars/kghose-100.png","invited_by_user":"hdevalence"},"user_is_author":false,"tags":["ai","linux","programming"]}]