[{"short_id":"6e8zc3","short_id_url":"https://lobste.rs/s/6e8zc3","created_at":"2024-11-20T02:02:32.000-06:00","title":"AAA - Analytical Anti-Aliasing","url":"https://blog.frost.kiwi/analytical-anti-aliasing/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6e8zc3/aaa_analytical_anti_aliasing","submitter_user":"FrostKiwi","user_is_author":true,"tags":["graphics"]},{"short_id":"stdvxh","short_id_url":"https://lobste.rs/s/stdvxh","created_at":"2024-11-20T01:50:25.000-06:00","title":"Spineless Traversal for Layout Invalidation","url":"https://arxiv.org/pdf/2411.10659","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eLatency is a major concern for web rendering engines like those in Chrome, Safari, and Firefox. These engines reduce latency by using an incremental layout algorithm to redraw the page when the user interacts with it. In such an algorithm, elements that change frame-to-frame are marked dirty; only the dirty elements need be processed to draw the next frame, dramatically reducing latency. However, the standard incremental layout algorithm must search the page for dirty elements, accessing a number of auxiliary elements in the process. These auxiliary elements add cache misses and stalled cycles, and are responsible for a sizable fraction of all layout latency. We introduce a new, faster incremental layout algorithm called Spineless Traversal. Spineless Traversal uses a more computationally demanding priority queue algorithm to avoid the need to access auxiliary nodes and thus reduces cache traffic and stalls. This leads to dramatic speedups on the most latency-critical interactions such as hovering, typing, or animations. Moreover, thanks to numerous low-level optimizations, we are able to make Spineless Traversal competitive across the whole spectrum of incremental layout workloads. As a result, across 2216 benchmarks, Spineless Traversal is faster on 78.2% of the benchmark, with a mean speedup of 3.23x concentrated in the most latency-critical interactions such as hovering, typing, and animations.\u003c/p\u003e\n","description_plain":"Latency is a major concern for web rendering engines like those in Chrome, Safari, and Firefox. These engines reduce latency by using an incremental layout algorithm to redraw the page when the user interacts with it. In such an algorithm, elements that change frame-to-frame are marked dirty; only the dirty elements need be processed to draw the next frame, dramatically reducing latency. However, the standard incremental layout algorithm must search the page for dirty elements, accessing a number of auxiliary elements in the process. These auxiliary elements add cache misses and stalled cycles, and are responsible for a sizable fraction of all layout latency. We introduce a new, faster incremental layout algorithm called Spineless Traversal. Spineless Traversal uses a more computationally demanding priority queue algorithm to avoid the need to access auxiliary nodes and thus reduces cache traffic and stalls. This leads to dramatic speedups on the most latency-critical interactions such as hovering, typing, or animations. Moreover, thanks to numerous low-level optimizations, we are able to make Spineless Traversal competitive across the whole spectrum of incremental layout workloads. As a result, across 2216 benchmarks, Spineless Traversal is faster on 78.2% of the benchmark, with a mean speedup of 3.23x concentrated in the most latency-critical interactions such as hovering, typing, and animations.","comments_url":"https://lobste.rs/s/stdvxh/spineless_traversal_for_layout","submitter_user":"asb","user_is_author":false,"tags":["browsers","pdf","performance"]},{"short_id":"qhdfdg","short_id_url":"https://lobste.rs/s/qhdfdg","created_at":"2024-11-20T01:12:59.000-06:00","title":"webvm: Virtual Machine for the Web","url":"https://github.com/leaningtech/webvm","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qhdfdg/webvm_virtual_machine_for_web","submitter_user":"txxnano","user_is_author":false,"tags":["wasm"]},{"short_id":"tlaaae","short_id_url":"https://lobste.rs/s/tlaaae","created_at":"2024-11-20T00:45:31.000-06:00","title":"Lush: my favorite small programming language","url":"https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tlaaae/lush_my_favorite_small_programming","submitter_user":"williballenthin","user_is_author":false,"tags":["lisp"]},{"short_id":"kob7ma","short_id_url":"https://lobste.rs/s/kob7ma","created_at":"2024-11-19T22:12:37.000-06:00","title":"Decisions \u0026 Dragons","url":"https://www.decisionsanddragons.com/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kob7ma/decisions_dragons","submitter_user":"rjzak","user_is_author":false,"tags":["ai"]},{"short_id":"jjxxpq","short_id_url":"https://lobste.rs/s/jjxxpq","created_at":"2024-11-19T21:03:29.000-06:00","title":"The Esc key bug in games with the CJK IMEs","url":"https://ericswpark.com/blog/2024/2024-11-19-the-esc-key-bug-in-games-with-cjk-imes/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jjxxpq/esc_key_bug_games_with_cjk_imes","submitter_user":"eBPF","user_is_author":false,"tags":["programming"]},{"short_id":"cbmzpv","short_id_url":"https://lobste.rs/s/cbmzpv","created_at":"2024-11-19T20:48:58.000-06:00","title":"Nominal for Storing, Structural for Manipulating","url":"https://welltypedwitch.bearblog.dev/nominal-for-storing-structural-for-manipulating/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cbmzpv/nominal_for_storing_structural_for","submitter_user":"hongminhee","user_is_author":false,"tags":["plt"]},{"short_id":"xmgz3l","short_id_url":"https://lobste.rs/s/xmgz3l","created_at":"2024-11-19T18:21:36.000-06:00","title":"Safety in an Unsafe World","url":"https://www.youtube.com/watch?v=Ba7fajt4l1M","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xmgz3l/safety_unsafe_world","submitter_user":"itamarst","user_is_author":false,"tags":["plt","rust","video"]},{"short_id":"4vdb9z","short_id_url":"https://lobste.rs/s/4vdb9z","created_at":"2024-11-19T18:18:37.000-06:00","title":"Smaller Than Pixel Art: Sub-Pixel Art","url":"https://www.youtube.com/watch?v=SlS3FOmKUbE","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4vdb9z/smaller_than_pixel_art_sub_pixel_art","submitter_user":"WilhelmVonWeiner","user_is_author":false,"tags":["graphics","video"]},{"short_id":"nsorvn","short_id_url":"https://lobste.rs/s/nsorvn","created_at":"2024-11-19T17:09:55.000-06:00","title":"The stretch keyword: a better alternative to width: 100% in CSS?","url":"https://fullystacked.net/stretch/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nsorvn/stretch_keyword_better_alternative","submitter_user":"calebhearth","user_is_author":false,"tags":["css"]},{"short_id":"qbrrer","short_id_url":"https://lobste.rs/s/qbrrer","created_at":"2024-11-19T17:08:55.000-06:00","title":"Overflow Clip","url":"https://ishadeed.com/article/overflow-clip/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qbrrer/overflow_clip","submitter_user":"calebhearth","user_is_author":false,"tags":["css"]},{"short_id":"xalc4i","short_id_url":"https://lobste.rs/s/xalc4i","created_at":"2024-11-19T15:42:49.000-06:00","title":"Go sync.Once is Simple... Does It Really?","url":"https://victoriametrics.com/blog/go-sync-once/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xalc4i/go_sync_once_is_simple_does_it_really","submitter_user":"eduard","user_is_author":false,"tags":["go"]},{"short_id":"b2vubm","short_id_url":"https://lobste.rs/s/b2vubm","created_at":"2024-11-19T14:54:00.000-06:00","title":"How to use Common Lisp on NixOS with C libraries","url":"https://honza.pokorny.ca/2024/11/how-to-use-common-lisp-on-nixos-with-c-libraries/","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/b2vubm/how_use_common_lisp_on_nixos_with_c","submitter_user":"honza","user_is_author":true,"tags":["lisp","nix"]},{"short_id":"p5gpeq","short_id_url":"https://lobste.rs/s/p5gpeq","created_at":"2024-11-19T14:38:06.000-06:00","title":"Original ChipWits FORTH Code Open Sourced","url":"https://chipwits.com/2024/11/16/chipwits-40th-birthday-original-forth-code-open-sourced/","score":13,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/p5gpeq/original_chipwits_forth_code_open","submitter_user":"lorddimwit","user_is_author":false,"tags":["games","historical","retrocomputing"]},{"short_id":"tphwxi","short_id_url":"https://lobste.rs/s/tphwxi","created_at":"2024-11-19T14:29:00.000-06:00","title":"Blogging through the decades","url":"https://bcantrill.dtrace.org/2024/11/16/blogging-through-the-decades/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tphwxi/blogging_through_decades","submitter_user":"craigkerstiens","user_is_author":false,"tags":["historical"]},{"short_id":"ecbhjy","short_id_url":"https://lobste.rs/s/ecbhjy","created_at":"2024-11-19T13:48:23.000-06:00","title":"The Nano-parsing Architecture: Sane And Portable Parsing For Perverse Environments","url":"https://www.youtube.com/watch?v=uInwQEMYAP8","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ecbhjy/nano_parsing_architecture_sane_portable","submitter_user":"dpk","user_is_author":false,"tags":["apl","compilers","video"]},{"short_id":"2jxble","short_id_url":"https://lobste.rs/s/2jxble","created_at":"2024-11-19T13:02:03.000-06:00","title":"Loop targets","url":"https://nedbatchelder.com/blog/202411/loop_targets.html","score":17,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2jxble/loop_targets","submitter_user":"ubernostrum","user_is_author":false,"tags":["python"]},{"short_id":"bnvbca","short_id_url":"https://lobste.rs/s/bnvbca","created_at":"2024-11-19T12:17:31.000-06:00","title":"Reading the Generalized Isolation Level Definitions paper with Alloy","url":"https://surfingcomplexity.blog/2024/11/18/reading-the-generalized-isolation-level-definitions-paper-with-alloy/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bnvbca/reading_generalized_isolation_level","submitter_user":"eatonphil","user_is_author":false,"tags":["databases","formalmethods"]},{"short_id":"bpfsyf","short_id_url":"https://lobste.rs/s/bpfsyf","created_at":"2024-11-19T12:08:48.000-06:00","title":"Hyrum's Law in Golang","url":"https://abenezer.org/blog/hyrum-law-in-golang","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bpfsyf/hyrum_s_law_golang","submitter_user":"telemachus","user_is_author":false,"tags":["api","go","practices"]},{"short_id":"rawcyg","short_id_url":"https://lobste.rs/s/rawcyg","created_at":"2024-11-19T11:20:51.000-06:00","title":"On \"Safe\" C++","url":"https://izzys.casa/2024/11/on-safe-cxx/","score":50,"flags":3,"comment_count":25,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rawcyg/on_safe_c","submitter_user":"alper","user_is_author":false,"tags":["c++","rant"]},{"short_id":"tjfdnb","short_id_url":"https://lobste.rs/s/tjfdnb","created_at":"2024-11-19T10:42:41.000-06:00","title":"Display/KMS Meeting at XDC 2024: Detailed Report","url":"https://melissawen.github.io/blog/2024/11/19/summary-display-kms-meeting-xdc2024","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tjfdnb/display_kms_meeting_at_xdc_2024_detailed","submitter_user":"calvin","user_is_author":false,"tags":["graphics","linux"]},{"short_id":"ovbb1u","short_id_url":"https://lobste.rs/s/ovbb1u","created_at":"2024-11-19T10:28:28.000-06:00","title":"Understanding the BM25 full text search algorithm","url":"https://emschwartz.me/understanding-the-bm25-full-text-search-algorithm/","score":14,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ovbb1u/understanding_bm25_full_text_search","submitter_user":"emschwartz","user_is_author":true,"tags":["compsci","databases","math"]},{"short_id":"i5xnsj","short_id_url":"https://lobste.rs/s/i5xnsj","created_at":"2024-11-19T10:15:01.000-06:00","title":"Testing with Go and PostgreSQL: ephemeral DBs","url":"https://michael.stapelberg.ch/posts/2024-11-19-testing-with-go-and-postgresql-ephemeral-dbs/","score":30,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i5xnsj/testing_with_go_postgresql_ephemeral_dbs","submitter_user":"stapelberg","user_is_author":true,"tags":["databases","go","testing"]},{"short_id":"bsdz1n","short_id_url":"https://lobste.rs/s/bsdz1n","created_at":"2024-11-19T09:37:56.000-06:00","title":"A Survey of Protocol Fuzzing","url":"https://arxiv.org/abs/2401.01568","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bsdz1n/survey_protocol_fuzzing","submitter_user":"itamarst","user_is_author":false,"tags":["security"]},{"short_id":"fxjcuf","short_id_url":"https://lobste.rs/s/fxjcuf","created_at":"2024-11-19T08:59:12.000-06:00","title":"What to expect from CHICKEN 6","url":"https://www.more-magic.net/posts/chicken-6.html","score":25,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fxjcuf/what_expect_from_chicken_6","submitter_user":"Bunny351","user_is_author":true,"tags":["compilers","lisp"]}]