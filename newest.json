[{"short_id":"4urvgq","short_id_url":"https://lobste.rs/s/4urvgq","created_at":"2024-05-30T18:48:06.000-05:00","title":"DuckDB Doesn’t Need Data To Be a Database","url":"https://www.nikolasgoebel.com/2024/05/28/duckdb-doesnt-need-data.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4urvgq/duckdb_doesn_t_need_data_be_database","submitter_user":"xilef","user_is_author":false,"tags":["databases"]},{"short_id":"zt6wox","short_id_url":"https://lobste.rs/s/zt6wox","created_at":"2024-05-30T16:24:34.000-05:00","title":"Evolution of Cloud Block Store","url":"https://asatarin.github.io/talks/2024-05-evolution-of-cloud-block-store/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zt6wox/evolution_cloud_block_store","submitter_user":"eatonphil","user_is_author":false,"tags":["databases","distributed"]},{"short_id":"tpvfzt","short_id_url":"https://lobste.rs/s/tpvfzt","created_at":"2024-05-30T16:03:11.000-05:00","title":"Recommendations for practical introductions to PEG parsing?","url":"","score":6,"flags":0,"comment_count":2,"description":"\u003cp\u003eI’m hoping that people can point me to practical introductions to PEG parsing. Article length (i.e., 25-50 pages) would be ideal, but book suggestions are welcome too. This may be obvious, but by “practical” I mean that I’m interested in material with a lot of examples and usable tips rather than theoretical accounts. A good example of the kind of thing I’m interested in is Roberto Ierusalimschy’s \u003ca href=\"https://www.inf.puc-rio.br/~roberto/docs/lpeg-primer.pdf\" rel=\"ugc\"\u003eMastering LPeg\u003c/a\u003e (PDF link).\u003c/p\u003e\n\u003cp\u003eBrief background on why: I’m a self-taught, amateur programmer, and I’m interested in using LPeg (especially \u003ca href=\"https://neovim.io/doc/user/lua.html#vim.lpeg\" rel=\"ugc\"\u003ewithin neovim\u003c/a\u003e) for text manipulation and scanning. I don’t have the kind of math or CS background to deal with the theory, but I find LPeg appealing as an alternative to vim regexes or Lua patterns.\u003c/p\u003e\n","description_plain":"I'm hoping that people can point me to practical introductions to PEG parsing. Article length (i.e., 25-50 pages) would be ideal, but book suggestions are welcome too. This may be obvious, but by \"practical\" I mean that I'm interested in material with a lot of examples and usable tips rather than theoretical accounts. A good example of the kind of thing I'm interested in is Roberto Ierusalimschy's [Mastering LPeg](https://www.inf.puc-rio.br/~roberto/docs/lpeg-primer.pdf) (PDF link).\r\n\r\nBrief background on why: I'm a self-taught, amateur programmer, and I'm interested in using LPeg (especially [within neovim](https://neovim.io/doc/user/lua.html#vim.lpeg)) for text manipulation and scanning. I don't have the kind of math or CS background to deal with the theory, but I find LPeg appealing as an alternative to vim regexes or Lua patterns.","comments_url":"https://lobste.rs/s/tpvfzt/recommendations_for_practical","submitter_user":"telemachus","user_is_author":true,"tags":["ask","education","programming"]},{"short_id":"lpf0ty","short_id_url":"https://lobste.rs/s/lpf0ty","created_at":"2024-05-30T15:44:29.000-05:00","title":"Find PBT properties by relating multiple functions","url":"https://www.youtube.com/watch?v=CnIlm6-XK6U","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lpf0ty/find_pbt_properties_by_relating_multiple","submitter_user":"janiczek","user_is_author":true,"tags":["programming","testing","video"]},{"short_id":"71szcz","short_id_url":"https://lobste.rs/s/71szcz","created_at":"2024-05-30T14:50:01.000-05:00","title":"If Multicast is the Answer – What was the Question?","url":"https://arxiv.org/abs/2211.09029","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/71szcz/if_multicast_is_answer_what_was_question","submitter_user":"fanf","user_is_author":false,"tags":["networking"]},{"short_id":"a5exrx","short_id_url":"https://lobste.rs/s/a5exrx","created_at":"2024-05-30T14:11:49.000-05:00","title":"Rill - Library for Simpler Concurrency in Go","url":"https://github.com/destel/rill","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/a5exrx/rill_library_for_simpler_concurrency_go","submitter_user":"veqq","user_is_author":false,"tags":["go"]},{"short_id":"m55u77","short_id_url":"https://lobste.rs/s/m55u77","created_at":"2024-05-30T13:52:08.000-05:00","title":"PyPy has been quietly working for me for several years now","url":"https://utcc.utoronto.ca/~cks/space/blog/python/PyPyQuietlyWorking","score":22,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m55u77/pypy_has_been_quietly_working_for_me_for","submitter_user":"Corbin","user_is_author":false,"tags":["python"]},{"short_id":"jxulih","short_id_url":"https://lobste.rs/s/jxulih","created_at":"2024-05-30T12:06:46.000-05:00","title":"Zig's New CLI Progress Bar Explained","url":"https://andrewkelley.me/post/zig-new-cli-progress-bar-explained.html","score":25,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jxulih/zig_s_new_cli_progress_bar_explained","submitter_user":"aminom","user_is_author":false,"tags":["visualization","zig"]},{"short_id":"4zbfhz","short_id_url":"https://lobste.rs/s/4zbfhz","created_at":"2024-05-30T12:06:42.000-05:00","title":"Is Community-Backed Open Source Software Worth the Risk?","url":"https://thenewstack.io/is-community-backed-open-source-software-worth-the-risk/","score":2,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4zbfhz/is_community_backed_open_source_software","submitter_user":"Student","user_is_author":false,"tags":["law","security"]},{"short_id":"6rem8w","short_id_url":"https://lobste.rs/s/6rem8w","created_at":"2024-05-30T11:57:02.000-05:00","title":"Django Enhancement Proposal 14: Background Workers","url":"https://www.djangoproject.com/weblog/2024/may/29/django-enhancement-proposal-14-background-workers/","score":11,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6rem8w/django_enhancement_proposal_14","submitter_user":"carlana","user_is_author":false,"tags":["python","web"]},{"short_id":"pj5cy6","short_id_url":"https://lobste.rs/s/pj5cy6","created_at":"2024-05-30T10:16:41.000-05:00","title":"Let’s optimize! Running 15× faster with a situation-specific algorithm","url":"https://pythonspeed.com/articles/lets-optimize-median-local-threshold/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pj5cy6/let_s_optimize_running_15x_faster_with","submitter_user":"itamarst","user_is_author":true,"tags":["performance"]},{"short_id":"hva5aa","short_id_url":"https://lobste.rs/s/hva5aa","created_at":"2024-05-30T09:25:54.000-05:00","title":"How I run a software book club","url":"https://notes.eatonphil.com/2025-05-30-how-i-run-book-clubs.html","score":16,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hva5aa/how_i_run_software_book_club","submitter_user":"pushcx","user_is_author":false,"tags":["culture"]},{"short_id":"kde6vl","short_id_url":"https://lobste.rs/s/kde6vl","created_at":"2024-05-30T08:40:04.000-05:00","title":"Lobsters interview with Frederik Braun","url":"","score":55,"flags":0,"comment_count":11,"description":"\u003cp\u003eAfter \u003ca href=\"https://lobste.rs/~david_chisnall\" rel=\"ugc\"\u003e@david_chisnall\u003c/a\u003e did the \u003ca href=\"https://lobste.rs/s/w3zkxx/lobsters_interview_with_bjorn_stahl\" rel=\"ugc\"\u003einterview with me\u003c/a\u003e it is finally time to continue the relay with someone with a lot more exposed skin in the security game, particularly through the browser I hope needs no introduction, namely Firefox. I am, of course, talking about Frederik Braun, perhaps locally better known as \u003ca href=\"https://lobste.rs/~freddyb\" rel=\"ugc\"\u003e@freddyb\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIntroduce yourself, describe what you do for work and how long you’ve been at it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHi! So, I’m a computer nerd living in Berlin with my family. I currently work as a manager for the Firefox Security team, but I do not speak for Mozilla in this post.\u003c/p\u003e\n\u003cp\u003eMy fascination with computers started with DOS games (Commander Keen) on my father’s PC in the early 1990s. He created simple batch scripts so my brother and I could just power on the machine and type the game name. The scripts were basically \u003ccode\u003ecd keen\u003c/code\u003e followed by \u003ccode\u003ekeen.exe\u003c/code\u003e. Very simple stuff, just changing the directory and calling the executable. However, I soon noticed that the scripts worked only once. Maybe obvious to the reader, but when the game quits, you would still be in that subdirectory. Figuring out what was broken and how to fix it, got me into computers.\u003c/p\u003e\n\u003cp\u003eBut I better skip ahead for a bit. I already had a bit of an understanding of programming, various network protocols a bit of web security by the time I went to uni, and was lucky enough to find a group of like-minded people in university, the Ruhr-University Bochum: This led to us founding the CTF group \u003ca href=\"https://www.fluxfingers.net/\" rel=\"ugc\"\u003efluxfingers\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe took it way too seriously for a while: Back then, with only 2-3 competitions happening per year, we still practised every week and aimed to solve previous competitions until we had at least two vulnerabilities per application. At some point, the professors caught wind of that and I was lucky enough to co-create the first lecture on web security (“hackerpraktikum”), with my friend Reiners. We taught it for a couple of years and even made it into national TV.\u003c/p\u003e\n\u003cp\u003eWinning a CTF with fluxfingers at some point allowed me to meet folks from Mozilla, which in turn helped me land an internship there: Three months in sunny California with paid airfare, accommodation and a salary. An unbelievable offer. I met a lot of really great people and was allowed to do lots of fun things: I helped run Mozilla’s first and only MozillaCTF; I helped pentest some web apps and gave presentations about web security. It was a really great trip. Mozilla is such a great place to work, I think they spoiled me for life.\u003c/p\u003e\n\u003cp\u003eAs much as I enjoyed spending a winter in warm Silicon Valley, I missed my friends and family at home. I still had some months of university to go, but knew that I did not want to live in the USA. Lucky for me, Mozilla had just started opening up an office in Berlin, Germany. So when I finished my studies (with a \u003ca href=\"https://https://frederik-braun.com/publications/thesis/Thesis-Origin_Policy_Enforcement_in_Modern_Browsers.pdf\" rel=\"ugc\"\u003ediploma thesis (PDF)\u003c/a\u003e on browser \u0026amp; web security in the (then new) HTML5 world of rich internet applications) in 2012, I applied for a full time position to continue working on Security at Mozilla.\u003c/p\u003e\n\u003cp\u003eMy first years at Mozilla were defined by constant change: I helped break \u0026amp; fix web applications before they were allowed to go live on a \u003ccode\u003e.mozilla.org\u003c/code\u003e subdomain. I contributed to various specifications, like Content-Security-Policy in the W3C and also helped write DevTools \u0026amp; CSP patches in Firefox. Soon after, I found myself in a bigger reorg and landed in the Firefox OS Security team.\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHow was it like working on FirefoxOS through Mozilla?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe FxOS project was pretty wild, very skunkworks, but also very deeply technical. We provided lots of custom Web APIs that allowed controlling the phone and the hardware in new and interesting ways - way before Googlers spun this idea into PWAs or “Fugu APIs”. The crux was security, though. Our privilege separation model built on the security review process that we had already established for Firefox add-ons: It required that apps be reviewed and signed in order to use phone APIs. In turn, JavaScript just got way more interesting. You could make the phone ring, the battery vibrate, etc. etc. Lots of work went into standardizing these things, but other browser makers were probably not very interested in competition for their mobile operating systems back then. I also built some cool privacy overrides: You could revoke individual app permissions (e.g., disable specific APIs) regardless of what their app manifest said. I’m sure app developers really hated it, but I also know that nerds loved it. This was way before other phone operating systems allowed these kinds of global controls.\u003c/p\u003e\n\u003cp\u003eWe also had a lot of XSS-style security bugs in these privileged apps and it was massively fun trying to drive cohesive, wide-scaling security efforts into this hacky, ambitious underdog project. At first, we gave all apps a mandatory Content-Security-Policy (CSP). Then, we had CSP bypasses and other injections leading to information stealing or clickjacking attacks. However, we drove two interesting security projects that managed to live on way beyond Firefox OS: The first project is the \u003ca href=\"https://github.com/mozilla/eslint-plugin-no-unsanitized\" rel=\"ugc\"\u003eeslint rule “no-unsanitized”\u003c/a\u003e, which I still maintain. The rule essentially disallows your JavaScript code from patterns which are prone to XSS (e.g., assigning into \u003ccode\u003einnerHTML\u003c/code\u003e). We managed to bring that rule to all apps that were part of the Firefox OS system by rewriting a lot of code, which solved the majority of our XSS issues.\u003c/p\u003e\n\u003cp\u003eThe second cool thing is Subresource Integrity, \u003ca href=\"https://www.w3.org/TR/SRI/\" rel=\"ugc\"\u003eSRI\u003c/a\u003e: It was inspired by two things. First, Firefox OS becoming more “webby” and hosted versus packaged and signed. And secondly, a problem I saw with increasing usage of CDNs: A lot of pages wanted to boost their performance by loading jQuery, Bootstrap etc. from a shared URL. If all websites use that “default URL” for the library, any visitor might already have the library in their cache and the website would load faster. I was baffled - no, annoyed that people would risk their web security to random third-party domains. Apparently, I was loud enough that Brad Hill (back then, the co-chair of the W3C webappsec group) told me there is a future deliverable in the working group and that sort of got me looking at it.\u003c/p\u003e\n\u003cp\u003eWorking on standards can be very long and time consuming. But in the end - and through a great collaboration with Mike West, Devdatta Akhawe, François Marier, Joel Weinberger, and many others - we shipped it as SRI. With this, you can compute e.g., the SHA256 of a JavaScript file that is hosted elsewhere and put in the \u003ccode\u003eintegrity\u003c/code\u003e attribute of your \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag. This allows the browser to check whether a CDN-hosted third-party script is actually matching the expectation of the primary website’s author.\u003c/p\u003e\n\u003cp\u003eFor FirefoxOS, I hoped to build upon SRI to create web-hosted packaged apps with higher privileges, but that never came to be. The project was shut down before we got there. I still think SRI nicely solved the security problem that I saw with CDNs.\u003c/p\u003e\n\u003cp\u003eHowever, nowadays browsers \u003ca href=\"https://www.peakhour.io/blog/cache-partitioning-firefox-chrome/\" rel=\"ugc\"\u003epartition their caches\u003c/a\u003e in order to prevent cross-site tracking. Because of that, SRI is nowhere as useful as it was. In fact, I agree with \u003ca href=\"https://shkspr.mobi/blog/2020/10/please-stop-using-cdns-for-external-javascript-libraries/\" rel=\"ugc\"\u003eTerence Eden\u003c/a\u003e here and believe these asset CDNs are also not very useful anymore either: With HTTP2 (and HTTP3) multiplexing, browsers are able to fetch necessary subresources from the existing connection much faster than reaching out to the CDN on a different socket. So that chapter is likely closed.\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat did you continue with after working with Firefox OS?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAfter Firefox OS, another re-org brought me to Firefox Security. At first, I applied the XSS / eslint stuff from FxOS to Firefox desktop, which also has quite a lot of UI code written in JavaScript. This code is in the privileged un-sandboxed process. So that work led to some impactful bugs, which I wrote down in a blog post called \u003ca href=\"https://frederik-braun.com/firefox-ui-xss-leading-to-rce.html\" rel=\"ugc\"\u003eRemote Code Execution in Firefox beyond memory corruptions\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMost of this should be solved by now: Firefox has adopted the eslint rule quite widely and has also invested massively in defense in depth (e.g., enforced CSPs, implicit sanitizing). The full project was published in a whitepaper \u003ca href=\"https://frederik-braun.com/publications/hardening_paper.pdf\" rel=\"ugc\"\u003eHardening Firefox against Injection Attacks\u003c/a\u003e, with \u003ca href=\"https://christophkerschbaumer.com/\" rel=\"ugc\"\u003eChristoph Kerschbaumer\u003c/a\u003e and \u003ca href=\"https://ritter.vg/\" rel=\"ugc\"\u003eTom Ritter\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThen, I went on to poke some further holes in the sandbox, which is explained in \u003ca href=\"https://frederik-braun.com/firefox-ui-xss-leading-to-rce.html\" rel=\"ugc\"\u003eExamining JavaScript Inter-Process Communication in Firefox\u003c/a\u003e that YouTuber LiveOverflow made into a video What is a Browser Security Sandbox?! (Learn to Hack Firefox). In 2020, I also started working on the \u003ca href=\"https://github.com/WICG/sanitizer-api/\" rel=\"ugc\"\u003eSanitizer API\u003c/a\u003e in the webappsec working group.\u003c/p\u003e\n\u003cp\u003eBut then in summer of 2022, I totally switched gears: When a manager of a different team left, we were undergoing a bit of a reorg again and our group was short of a manager. I offered to take the position and have been managing Firefox Security Engineering for almost two years now. The team is just incredible. I get to work with amazing folks. I now spend my days supporting a great set of people that make Firefox secure, private and user-first.\u003c/p\u003e\n\u003cp\u003eJust recently, when our browser was targeted at \u003ca href=\"https://www.zerodayinitiative.com/blog/2024/3/21/pwn2own-vancouver-2024-day-two-results\" rel=\"ugc\"\u003epwn2own 2024\u003c/a\u003e, we worked with a wide group of teams across Mozilla to get a security release out the door in less than 24 hours. A track record that we have kept for real-life zero days as well as exploit competitions for many years now.\u003c/p\u003e\n\u003cp\u003eAt this time, we work on web security improvements (Fingerprinting Protections, HTTPS-Only) Sandbox escapes, hardening, Fuzzing, and much more).\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat is your work / computing environment like?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor a long while, I loved using the X-series thinkpads, mostly for their portability. Originally Ubuntu with awesomewm as a window manager. My setup broke a bit too often for me to be efficient, so I eventually switched to a vanilla Ubuntu build for a long while.\u003c/p\u003e\n\u003cp\u003eHowever, that became untenable when I started working on Firefox proper: The build times on an X-series Thinkpad were really unbearably long. At first I had a workstation in the office where I could SSH into when I wanted to develop \u0026amp; build Firefox, but at some point the workstation broke and I made the jump to macOS. Now, I can have a build of Firefox in less than 15 minutes :-)\u003c/p\u003e\n\u003cp\u003eThough, with my switch to management, my tools of choice changed quite a bit: An online word processor, email, chat, bug trackers, video meetings.\u003c/p\u003e\n\u003cp\u003eWhen I \u003cem\u003edo\u003c/em\u003e code, I use vscode with \u003ccode\u003eclangd\u003c/code\u003e. However, I would like to switch to \u003ccode\u003ehelix\u003c/code\u003e if I’d only find the time :)\u003c/p\u003e\n\u003cp\u003eI still like tiling windows, so I use \u003ca href=\"https://rectangleapp.com/\" rel=\"ugc\"\u003erectangle\u003c/a\u003e to keep that just a quick keyboard shortcut away. I also use \u003ca href=\"https://usebeams.com/\" rel=\"ugc\"\u003ebeams\u003c/a\u003e to remind me of upcoming video meetings, making them one-click.\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBuilding on your experience with browser security, if you could go back in time and change or add something anywhere in the full stack as a whole in order to improve security, W3C be damned, what would you do?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI actually really like how the web is built. I know that everything is \u003ca href=\"https://www.w3.org/TR/html-design-principles/#support-existing-content\" rel=\"ugc\"\u003econstrained by backwards compatibility\u003c/a\u003e, but I also don’t want the web to lose that: It’s amazing that most web pages from the 1990s still work perfectly fine and I wouldn’t want to change that.\u003c/p\u003e\n\u003cp\u003eI love the web because it’s the one platform has defied corporate control over and over. I really enjoy working towards keeping it that way. The lack of “central control” makes it messy and weird. Sometimes I resent that every change is piecemeal and half-assed, but that’s 1000 times better than full corporate control or someone forcing changes on all web pages unilaterally.\u003c/p\u003e\n\u003cp\u003eWith all this baggage and inertia aside, I believe that the \u003ca href=\"https://blog.mozilla.org/security/2018/01/15/secure-contexts-everywhere/\" rel=\"ugc\"\u003erequirement for a “Secure Context”\u003c/a\u003e, has made the web stronger and a 2020s-milestone ina similar vein would be a great improvement of the web.\u003c/p\u003e\n\u003cp\u003eRequiring websites to be more resilient to widespread \u0026amp; prevalent attacks by nudging them into better development practices should be possible again. There have been multiple attempts and I think they are worth pursuing.\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBringing up or onboarding new security engineers can be a big task. Are there any lessons from the CTF scene that proved useful to you, or would be useful for newcomers to learn from? There’s an overwhelming amount of material for computing students looking into the offensive side of security but much less so for defensive work and even less for browser work. Which resources and exercises would you suggest for ‘onboarding’ the coming generations?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eQuick disclaimer: When I played CTFs before 2007 the bugs were simple and so were the exploits. We did not get to bypass sandboxes and we did not have to target modern brwosers.\u003c/p\u003e\n\u003cp\u003eHowever, I think the most underrated thing in playing CTFs is teamwork and community. Finding a bug is a hell of a rush, but it’s also not the most important thing: Spending time with friends and learning from them might be, though.\u003c/p\u003e\n\u003cp\u003eA great way to learn about defense is to practice offense: Once you believe you have fully understood an attack and can replicate it, you also get a good feeling for what kind of stop-gaps would \u003cem\u003ereally\u003c/em\u003e upset an attacker. As a defender, you need to walk up and down the abstraction layers just as fluently as an attacker, such that your mitigations aren’t easily by-passable.\u003c/p\u003e\n\u003cp\u003eA favorite example I have is from work again. We had a very gnarly XSS bug in Firefox that allowed attackers to inject into the privileged (non-sandboxed!) parent process of the browser. This can happen because Firefox’s browser UI is written in web technologies like HTML, JS and CSS. We fixed this not by looking at the specific XSS bug (something like \u003ccode\u003efoo.innerHTML = attackerControlledString\u003c/code\u003e, but by looking at the vulnerability class from a lower abstraction layer:\nGiven that we control both the JS/CSS/HTML code as well as the underlying browser runtime, we just changed the whole implementation of \u003ccode\u003einnerHTML=\u003c/code\u003e. Now, when we run the steps for assigning to \u003ccode\u003einnerHTML\u003c/code\u003e in a privileged context, Firefox will always perform an XSS-sanitization on the input string.\nBy going an abstraction level deeper, we could look beyond code audits or security guidelines. Instead, we completely kill a whole vulnerability class.\u003c/p\u003e\n\u003cp\u003eMost of my thinking here is also deeply inspired by the langsec folks, Meredith L. Patterson and her talk \u003ca href=\"https://media.ccc.de/v/28c3-4763-en-the_science_of_insecurity\" rel=\"ugc\"\u003e“The Science of Insecurity”\u003c/a\u003e, Sergey Bratus, and Travis Godspeed (look for his \u003ca href=\"https://travisgoodspeed.blogspot.com/2011/09/remotely-exploiting-phy-layer.html\" rel=\"ugc\"\u003e“packet in packet”\u003c/a\u003e work).\u003c/p\u003e\n\u003cp\u003eAt the end of the day, regardless of whether you work in offense or in defense. I want you to ask yourself: \u003cem\u003eFor whom\u003c/em\u003e?\u003c/p\u003e\n","description_plain":"After @david_chisnall did the [interview with me](https://lobste.rs/s/w3zkxx/lobsters_interview_with_bjorn_stahl) it is finally time to continue the relay with someone with a lot more exposed skin in the security game, particularly through the browser I hope needs no introduction, namely Firefox. I am, of course, talking about Frederik Braun, perhaps locally better known as @freddyb. \r\n\r\n\u003e Introduce yourself, describe what you do for work and how long you’ve been at it.\r\n\r\nHi! So, I’m a computer nerd living in Berlin with my family. I currently work as a manager for the Firefox Security team, but I do not speak for Mozilla in this post.\r\n\r\nMy fascination with computers started with DOS games (Commander Keen) on my father’s PC in the early 1990s. He created simple batch scripts so my brother and I could just power on the machine and type the game name. The scripts were basically `cd keen` followed by `keen.exe`. Very simple stuff, just changing the directory and calling the executable. However, I soon noticed that the scripts worked only once. Maybe obvious to the reader, but when the game quits, you would still be in that subdirectory. Figuring out what was broken and how to fix it, got me into computers.\r\n\r\nBut I better skip ahead for a bit. I already had a bit of an understanding of programming, various network protocols a bit of web security by the time I went to uni, and was lucky enough to find a group of like-minded people in university, the Ruhr-University Bochum: This led to us founding the CTF group [fluxfingers](https://www.fluxfingers.net/).\r\n\r\nWe took it way too seriously for a while: Back then, with only 2-3 competitions happening per year, we still practised every week and aimed to solve previous competitions until we had at least two vulnerabilities per application. At some point, the professors caught wind of that and I was lucky enough to co-create the first lecture on web security (“hackerpraktikum”), with my friend Reiners. We taught it for a couple of years and even made it into national TV.\r\n\r\nWinning a CTF with fluxfingers at some point allowed me to meet folks from Mozilla, which in turn helped me land an internship there: Three months in sunny California with paid airfare, accommodation and a salary. An unbelievable offer. I met a lot of really great people and was allowed to do lots of fun things: I helped run Mozilla’s first and only MozillaCTF; I helped pentest some web apps and gave presentations about web security. It was a really great trip. Mozilla is such a great place to work, I think they spoiled me for life.\r\n\r\nAs much as I enjoyed spending a winter in warm Silicon Valley, I missed my friends and family at home. I still had some months of university to go, but knew that I did not want to live in the USA. Lucky for me, Mozilla had just started opening up an office in Berlin, Germany. So when I finished my studies (with a [diploma thesis (PDF)](https://https://frederik-braun.com/publications/thesis/Thesis-Origin_Policy_Enforcement_in_Modern_Browsers.pdf) on browser \u0026 web security in the (then new) HTML5 world of rich internet applications) in 2012, I applied for a full time position to continue working on Security at Mozilla.\r\n\r\nMy first years at Mozilla were defined by constant change: I helped break \u0026 fix web applications before they were allowed to go live on a `.mozilla.org` subdomain. I contributed to various specifications, like Content-Security-Policy in the W3C and also helped write DevTools \u0026 CSP patches in Firefox. Soon after, I found myself in a bigger reorg and landed in the Firefox OS Security team.\r\n\r\n---\r\n\r\n\u003e How was it like working on FirefoxOS through Mozilla?\r\n\r\nThe FxOS project was pretty wild, very skunkworks, but also very deeply technical. We provided lots of custom Web APIs that allowed controlling the phone and the hardware in new and interesting ways - way before Googlers spun this idea into PWAs or “Fugu APIs”. The crux was security, though. Our privilege separation model built on the security review process that we had already established for Firefox add-ons: It required that apps be reviewed and signed in order to use phone APIs. In turn, JavaScript just got way more interesting. You could make the phone ring, the battery vibrate, etc. etc. Lots of work went into standardizing these things, but other browser makers were probably not very interested in competition for their mobile operating systems back then. I also built some cool privacy overrides: You could revoke individual app permissions (e.g., disable specific APIs) regardless of what their app manifest said. I’m sure app developers really hated it, but I also know that nerds loved it. This was way before other phone operating systems allowed these kinds of global controls.\r\n\r\nWe also had a lot of XSS-style security bugs in these privileged apps and it was massively fun trying to drive cohesive, wide-scaling security efforts into this hacky, ambitious underdog project. At first, we gave all apps a mandatory Content-Security-Policy (CSP). Then, we had CSP bypasses and other injections leading to information stealing or clickjacking attacks. However, we drove two interesting security projects that managed to live on way beyond Firefox OS: The first project is the [eslint rule “no-unsanitized”](https://github.com/mozilla/eslint-plugin-no-unsanitized), which I still maintain. The rule essentially disallows your JavaScript code from patterns which are prone to XSS (e.g., assigning into `innerHTML`). We managed to bring that rule to all apps that were part of the Firefox OS system by rewriting a lot of code, which solved the majority of our XSS issues.\r\n\r\nThe second cool thing is Subresource Integrity, [SRI](https://www.w3.org/TR/SRI/): It was inspired by two things. First, Firefox OS becoming more “webby” and hosted versus packaged and signed. And secondly, a problem I saw with increasing usage of CDNs: A lot of pages wanted to boost their performance by loading jQuery, Bootstrap etc. from a shared URL. If all websites use that “default URL” for the library, any visitor might already have the library in their cache and the website would load faster. I was baffled - no, annoyed that people would risk their web security to random third-party domains. Apparently, I was loud enough that Brad Hill (back then, the co-chair of the W3C webappsec group) told me there is a future deliverable in the working group and that sort of got me looking at it.\r\n\r\nWorking on standards can be very long and time consuming. But in the end - and through a great collaboration with Mike West, Devdatta Akhawe, François Marier, Joel Weinberger, and many others - we shipped it as SRI. With this, you can compute e.g., the SHA256 of a JavaScript file that is hosted elsewhere and put in the `integrity` attribute of your `\u003cscript\u003e` tag. This allows the browser to check whether a CDN-hosted third-party script is actually matching the expectation of the primary website’s author.\r\n\r\nFor FirefoxOS, I hoped to build upon SRI to create web-hosted packaged apps with higher privileges, but that never came to be. The project was shut down before we got there. I still think SRI nicely solved the security problem that I saw with CDNs.\r\n\r\nHowever, nowadays browsers [partition their caches](https://www.peakhour.io/blog/cache-partitioning-firefox-chrome/) in order to prevent cross-site tracking. Because of that, SRI is nowhere as useful as it was. In fact, I agree with [Terence Eden](https://shkspr.mobi/blog/2020/10/please-stop-using-cdns-for-external-javascript-libraries/) here and believe these asset CDNs are also not very useful anymore either: With HTTP2 (and HTTP3) multiplexing, browsers are able to fetch necessary subresources from the existing connection much faster than reaching out to the CDN on a different socket. So that chapter is likely closed.\r\n\r\n---\r\n\r\n\u003e What did you continue with after working with Firefox OS?\r\n\r\nAfter Firefox OS, another re-org brought me to Firefox Security. At first, I applied the XSS / eslint stuff from FxOS to Firefox desktop, which also has quite a lot of UI code written in JavaScript. This code is in the privileged un-sandboxed process. So that work led to some impactful bugs, which I wrote down in a blog post called [Remote Code Execution in Firefox beyond memory corruptions](https://frederik-braun.com/firefox-ui-xss-leading-to-rce.html).\r\n\r\nMost of this should be solved by now: Firefox has adopted the eslint rule quite widely and has also invested massively in defense in depth (e.g., enforced CSPs, implicit sanitizing). The full project was published in a whitepaper [Hardening Firefox against Injection Attacks](https://frederik-braun.com/publications/hardening_paper.pdf), with [Christoph Kerschbaumer](https://christophkerschbaumer.com/) and [Tom Ritter](https://ritter.vg/). \r\n\r\nThen, I went on to poke some further holes in the sandbox, which is explained in [Examining JavaScript Inter-Process Communication in Firefox](https://frederik-braun.com/firefox-ui-xss-leading-to-rce.html) that YouTuber LiveOverflow made into a video What is a Browser Security Sandbox?! (Learn to Hack Firefox). In 2020, I also started working on the [Sanitizer API](https://github.com/WICG/sanitizer-api/) in the webappsec working group.\r\n\r\nBut then in summer of 2022, I totally switched gears: When a manager of a different team left, we were undergoing a bit of a reorg again and our group was short of a manager. I offered to take the position and have been managing Firefox Security Engineering for almost two years now. The team is just incredible. I get to work with amazing folks. I now spend my days supporting a great set of people that make Firefox secure, private and user-first.\r\n\r\nJust recently, when our browser was targeted at [pwn2own 2024](https://www.zerodayinitiative.com/blog/2024/3/21/pwn2own-vancouver-2024-day-two-results), we worked with a wide group of teams across Mozilla to get a security release out the door in less than 24 hours. A track record that we have kept for real-life zero days as well as exploit competitions for many years now.\r\n\r\nAt this time, we work on web security improvements (Fingerprinting Protections, HTTPS-Only) Sandbox escapes, hardening, Fuzzing, and much more).\r\n\r\n---\r\n\r\n\u003e What is your work / computing environment like?\r\n\r\nFor a long while, I loved using the X-series thinkpads, mostly for their portability. Originally Ubuntu with awesomewm as a window manager. My setup broke a bit too often for me to be efficient, so I eventually switched to a vanilla Ubuntu build for a long while.\r\n\r\nHowever, that became untenable when I started working on Firefox proper: The build times on an X-series Thinkpad were really unbearably long. At first I had a workstation in the office where I could SSH into when I wanted to develop \u0026 build Firefox, but at some point the workstation broke and I made the jump to macOS. Now, I can have a build of Firefox in less than 15 minutes :-)\r\n\r\nThough, with my switch to management, my tools of choice changed quite a bit: An online word processor, email, chat, bug trackers, video meetings. \r\n\r\nWhen I _do_ code, I use vscode with `clangd`. However, I would like to switch to `helix` if I'd only find the time :)\r\n\r\nI still like tiling windows, so I use [rectangle](https://rectangleapp.com/) to keep that just a quick keyboard shortcut away. I also use [beams](https://usebeams.com/) to remind me of upcoming video meetings, making them one-click.\r\n\r\n---\r\n\r\n\u003e Building on your experience with browser security, if you could go back in time and change or add something anywhere in the full stack as a whole in order to improve security, W3C be damned, what would you do?\r\n\r\nI actually really like how the web is built. I know that everything is [constrained by backwards compatibility](https://www.w3.org/TR/html-design-principles/#support-existing-content), but I also don’t want the web to lose that: It’s amazing that most web pages from the 1990s still work perfectly fine and I wouldn’t want to change that.\r\n\r\nI love the web because it’s the one platform has defied corporate control over and over. I really enjoy working towards keeping it that way. The lack of “central control” makes it messy and weird. Sometimes I resent that every change is piecemeal and half-assed, but that’s 1000 times better than full corporate control or someone forcing changes on all web pages unilaterally.\r\n\r\nWith all this baggage and inertia aside, I believe that the [requirement for a “Secure Context”](https://blog.mozilla.org/security/2018/01/15/secure-contexts-everywhere/), has made the web stronger and a 2020s-milestone ina similar vein would be a great improvement of the web. \r\n\r\nRequiring websites to be more resilient to widespread \u0026 prevalent attacks by nudging them into better development practices should be possible again. There have been multiple attempts and I think they are worth pursuing.\r\n\r\n---\r\n\r\n\u003e Bringing up or onboarding new security engineers can be a big task. Are there any lessons from the CTF scene that proved useful to you, or would be useful for newcomers to learn from? There’s an overwhelming amount of material for computing students looking into the offensive side of security but much less so for defensive work and even less for browser work. Which resources and exercises would you suggest for ‘onboarding’ the coming generations?\r\n\r\nQuick disclaimer: When I played CTFs before 2007 the bugs were simple and so were the exploits. We did not get to bypass sandboxes and we did not have to target modern brwosers.\r\n\r\nHowever, I think the most underrated thing in playing CTFs is teamwork and community. Finding a bug is a hell of a rush, but it’s also not the most important thing: Spending time with friends and learning from them might be, though.\r\n\r\nA great way to learn about defense is to practice offense: Once you believe you have fully understood an attack and can replicate it, you also get a good feeling for what kind of stop-gaps would *really* upset an attacker. As a defender, you need to walk up and down the abstraction layers just as fluently as an attacker, such that your mitigations aren’t easily by-passable.\r\n\r\nA favorite example I have is from work again. We had a very gnarly XSS bug in Firefox that allowed attackers to inject into the privileged (non-sandboxed!) parent process of the browser. This can happen because Firefox’s browser UI is written in web technologies like HTML, JS and CSS. We fixed this not by looking at the specific XSS bug (something like `foo.innerHTML = attackerControlledString`, but by looking at the vulnerability class from a lower abstraction layer:\r\nGiven that we control both the JS/CSS/HTML code as well as the underlying browser runtime, we just changed the whole implementation of `innerHTML=`. Now, when we run the steps for assigning to `innerHTML` in a privileged context, Firefox will always perform an XSS-sanitization on the input string.\r\nBy going an abstraction level deeper, we could look beyond code audits or security guidelines. Instead, we completely kill a whole vulnerability class. \r\n\r\nMost of my thinking here is also deeply inspired by the langsec folks, Meredith L. Patterson and her talk [“The Science of Insecurity”](https://media.ccc.de/v/28c3-4763-en-the_science_of_insecurity), Sergey Bratus, and Travis Godspeed (look for his [“packet in packet”](https://travisgoodspeed.blogspot.com/2011/09/remotely-exploiting-phy-layer.html) work).\r\n\r\nAt the end of the day, regardless of whether you work in offense or in defense. I want you to ask yourself: *For whom*?","comments_url":"https://lobste.rs/s/kde6vl/lobsters_interview_with_frederik_braun","submitter_user":"crazyloglad","user_is_author":true,"tags":["interview"]},{"short_id":"ufuu9w","short_id_url":"https://lobste.rs/s/ufuu9w","created_at":"2024-05-30T06:35:38.000-05:00","title":"Why, after 6 years, I’m over GraphQL","url":"https://bessey.dev/blog/2024/05/24/why-im-over-graphql/","score":87,"flags":0,"comment_count":25,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ufuu9w/why_after_6_years_i_m_over_graphql","submitter_user":"fanf","user_is_author":false,"tags":["web"]},{"short_id":"wjabm4","short_id_url":"https://lobste.rs/s/wjabm4","created_at":"2024-05-30T05:35:25.000-05:00","title":"Modular: What Ownership is Really About:  A Mental Model Approach","url":"https://www.modular.com/blog/what-ownership-is-really-about-a-mental-model-approach","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wjabm4/modular_what_ownership_is_really_about","submitter_user":"bollu","user_is_author":false,"tags":["compilers"]},{"short_id":"74qoqm","short_id_url":"https://lobste.rs/s/74qoqm","created_at":"2024-05-30T03:41:09.000-05:00","title":"The KeePassXC kerfuffle","url":"https://lwn.net/Articles/973782/","score":18,"flags":0,"comment_count":26,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/74qoqm/keepassxc_kerfuffle","submitter_user":"kivikakk","user_is_author":false,"tags":["linux"]},{"short_id":"jmtero","short_id_url":"https://lobste.rs/s/jmtero","created_at":"2024-05-30T01:02:35.000-05:00","title":"F# developer stories: how we've finally fixed a 9-year-old performance issue","url":"https://devblogs.microsoft.com/dotnet/fsharp-developer-stories-how-weve-finally-fixed-a-9yearold-performance-issue/","score":17,"flags":0,"comment_count":10,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jmtero/f_developer_stories_how_we_ve_finally","submitter_user":"adamshaylor","user_is_author":false,"tags":["compilers","dotnet"]},{"short_id":"uy0nls","short_id_url":"https://lobste.rs/s/uy0nls","created_at":"2024-05-29T19:20:06.000-05:00","title":"Five Years Running a News Site on JAMStack","url":"https://blog.carlana.net/post/2024/spotlight-pa-jamstack-history/","score":20,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uy0nls/five_years_running_news_site_on_jamstack","submitter_user":"carlana","user_is_author":true,"tags":["go","historical","javascript","web"]},{"short_id":"7jwquw","short_id_url":"https://lobste.rs/s/7jwquw","created_at":"2024-05-29T18:50:21.000-05:00","title":"Disassembling Dalvik","url":"https://margin.re/2024/05/dalvik-disassembly/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7jwquw/disassembling_dalvik","submitter_user":"finity","user_is_author":false,"tags":["android","reversing"]},{"short_id":"iqjhki","short_id_url":"https://lobste.rs/s/iqjhki","created_at":"2024-05-29T17:31:53.000-05:00","title":"IBDNS: the intentionally broken DNS server","url":"https://gitlab.rd.nic.fr/dns-testing-tools/ibdns","score":13,"flags":0,"comment_count":0,"description":"\u003cp\u003eAnnouncement from Afnic: \u003ca href=\"https://www.afnic.fr/en/observatory-and-resources/news/afnic-launches-ibdns-the-intentionally-broken-dns-server/\" rel=\"ugc\"\u003ehttps://www.afnic.fr/en/observatory-and-resources/news/afnic-launches-ibdns-the-intentionally-broken-dns-server/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Announcement from Afnic: https://www.afnic.fr/en/observatory-and-resources/news/afnic-launches-ibdns-the-intentionally-broken-dns-server/","comments_url":"https://lobste.rs/s/iqjhki/ibdns_intentionally_broken_dns_server","submitter_user":"steinuil","user_is_author":false,"tags":["elixir","networking","release"]},{"short_id":"mj8rs0","short_id_url":"https://lobste.rs/s/mj8rs0","created_at":"2024-05-29T17:21:19.000-05:00","title":"A Compendium of Gen-Z Terminology in Technical Contexts","url":"https://dev.to/yonkeltron/a-compendium-of-gen-z-terminology-in-technical-contexts-49k3","score":-1,"flags":3,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mj8rs0/compendium_gen_z_terminology_technical","submitter_user":"yonkeltron","user_is_author":true,"tags":["satire"]},{"short_id":"qsws7e","short_id_url":"https://lobste.rs/s/qsws7e","created_at":"2024-05-29T16:42:22.000-05:00","title":"Adding a USB Port to the ThinkPad X1 Nano (the Hard Way)","url":"https://jcs.org/2024/05/29/x1usb","score":57,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qsws7e/adding_usb_port_thinkpad_x1_nano_hard_way","submitter_user":"jcs","user_is_author":true,"tags":["hardware"]},{"short_id":"ghrcmf","short_id_url":"https://lobste.rs/s/ghrcmf","created_at":"2024-05-29T15:36:42.000-05:00","title":"Chat arena for crowd sourcing model evaluation","url":"https://chat.lmsys.org/?leaderboard","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ghrcmf/chat_arena_for_crowd_sourcing_model","submitter_user":"jaguar","user_is_author":false,"tags":["ai"]},{"short_id":"ob3u2c","short_id_url":"https://lobste.rs/s/ob3u2c","created_at":"2024-05-29T15:31:33.000-05:00","title":"Lambda Way Project - Lisp, IDE \u0026 SSG","url":"http://lambdaway.fr/workshop/index.php","score":12,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ob3u2c/lambda_way_project_lisp_ide_ssg","submitter_user":"veqq","user_is_author":false,"tags":["lisp"]},{"short_id":"tl53cn","short_id_url":"https://lobste.rs/s/tl53cn","created_at":"2024-05-29T14:05:13.000-05:00","title":"Runtime code generation and execution in Go","url":"https://mathetake.github.io/posts/runtime-code-generation-in-go-part-1/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tl53cn/runtime_code_generation_execution_go","submitter_user":"carlana","user_is_author":false,"tags":["go","plt"]}]