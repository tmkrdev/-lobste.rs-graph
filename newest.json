[{"short_id":"lrolvj","short_id_url":"https://lobste.rs/s/lrolvj","created_at":"2022-10-07T13:10:55.000-05:00","title":"cppq: Simple, reliable \u0026 efficient distributed task queue for C++17. Backed by Redis","url":"https://github.com/jafarlihi/cppq","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lrolvj/cppq_simple_reliable_efficient","submitter_user":{"username":"jafarlihi","created_at":"2022-10-07T13:08:08.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":0,"avatar_url":"/avatars/jafarlihi-100.png","invited_by_user":"jj5"},"tags":["c++","distributed"]},{"short_id":"bntuh7","short_id_url":"https://lobste.rs/s/bntuh7","created_at":"2022-10-07T12:53:14.000-05:00","title":"Migrating our monorepo seamlessly from Dep to Go Modules","url":"https://monzo.com/blog/2022/09/29/migrating-our-monorepo-seamlessly-from-dep-to-go-modules/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bntuh7/migrating_our_monorepo_seamlessly_from","submitter_user":{"username":"carlmjohnson","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carl M. Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":5429,"avatar_url":"/avatars/carlmjohnson-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson","twitter_username":"carlmjohnson"},"tags":["go"]},{"short_id":"poktm4","short_id_url":"https://lobste.rs/s/poktm4","created_at":"2022-10-07T12:30:47.000-05:00","title":"Moving files in ZSH - The wonderful world of zmv","url":"https://filipe.kiss.ink/zmv-zsh-rename/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/poktm4/moving_files_zsh_wonderful_world_zmv","submitter_user":{"username":"iddan","created_at":"2022-07-02T20:05:02.000-05:00","is_admin":false,"about":"Entrepreneur; Open source enthusiast; Based in Tel Aviv.\r\n\r\nFounding Engineer @ [FlyCode](http://flycode.com/) (S22)","is_moderator":false,"karma":10,"avatar_url":"/avatars/iddan-100.png","invited_by_user":"sunshine","github_username":"iddan","twitter_username":"iddan"},"tags":["unix"]},{"short_id":"pd3ljn","short_id_url":"https://lobste.rs/s/pd3ljn","created_at":"2022-10-07T11:35:51.000-05:00","title":"The Hundred-Year Programming Language","url":"https://codefol.io/posts/the-hundred-year-programming-language/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pd3ljn/hundred_year_programming_language","submitter_user":{"username":"ebababi","created_at":"2018-10-14T11:47:38.000-05:00","is_admin":false,"about":"I am a programmer who likes playing music...","is_moderator":false,"karma":153,"avatar_url":"/avatars/ebababi-100.png","invited_by_user":"alynpost","github_username":"ebababi"},"tags":["plt"]},{"short_id":"v89rpi","short_id_url":"https://lobste.rs/s/v89rpi","created_at":"2022-10-07T09:59:19.000-05:00","title":"Lánczos interpolation explained","url":"https://mazzo.li/posts/lanczos.html","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/v89rpi/lanczos_interpolation_explained","submitter_user":{"username":"technetium","created_at":"2020-02-06T19:52:39.000-06:00","is_admin":false,"about":"A sentient lump of a certain high-density material.","is_moderator":false,"karma":4627,"avatar_url":"/avatars/technetium-100.png","invited_by_user":"ngoldbaum"},"tags":["design","math"]},{"short_id":"1ru8ni","short_id_url":"https://lobste.rs/s/1ru8ni","created_at":"2022-10-07T09:51:00.000-05:00","title":"The Future of the Web is on the Edge","url":"https://deno.com/blog/the-future-of-web-is-on-the-edge","score":4,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/1ru8ni/future_web_is_on_edge","submitter_user":{"username":"lucasfcosta","created_at":"2021-10-04T07:04:21.000-05:00","is_admin":false,"about":"Brazilian, open-source wizard, published author, and professional problem solver. Chai.js and Sinon.js maintainer. Testing expert. I strive to be lazy.\r\n\r\nhttps://github.com/lucasfcosta\r\nhttps://twitter.com/thewizardlucas\r\nhttps://www.lucasfcosta.com","is_moderator":false,"karma":105,"avatar_url":"/avatars/lucasfcosta-100.png","invited_by_user":"maskd","github_username":"lucasfcosta"},"tags":["web"]},{"short_id":"p5lhde","short_id_url":"https://lobste.rs/s/p5lhde","created_at":"2022-10-07T09:37:51.000-05:00","title":"Avoiding allocations in Rust to shrink Wasm modules","url":"https://nickb.dev/blog/avoiding-allocations-in-rust-to-shrink-wasm-modules/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/p5lhde/avoiding_allocations_rust_shrink_wasm","submitter_user":{"username":"rjzak","created_at":"2022-01-07T12:41:11.000-06:00","is_admin":false,"about":"Greetings, y'all!","is_moderator":false,"karma":133,"avatar_url":"/avatars/rjzak-100.png","invited_by_user":"waddlesplash","github_username":"rjzak","twitter_username":"rjzak","keybase_signatures":[{"kb_username":"rjzak","sig_hash":"efa767ee332339e8b027d58eb6d45d5489fc6af25f22802866192dcc5ba32eb30f"}]},"tags":["rust","wasm"]},{"short_id":"ydvomf","short_id_url":"https://lobste.rs/s/ydvomf","created_at":"2022-10-07T08:32:16.000-05:00","title":"A Game Engine in the Elm Style","url":"https://vsyncronicity.com/2020/03/01/a-game-engine-in-the-elm-style/","score":4,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ydvomf/game_engine_elm_style","submitter_user":{"username":"steinuil","created_at":"2018-08-14T19:50:45.000-05:00","is_admin":false,"about":"aka steenuil on #lobsters","is_moderator":false,"karma":1392,"avatar_url":"/avatars/steinuil-100.png","invited_by_user":"alynpost"},"tags":["dotnet","games","plt"]},{"short_id":"goihvc","short_id_url":"https://lobste.rs/s/goihvc","created_at":"2022-10-07T07:23:29.000-05:00","title":"LeanQt - official release of the core and xml modules","url":"https://github.com/rochus-keller/LeanQt/releases/tag/2022-10-06","score":1,"flags":1,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/goihvc/leanqt_official_release_core_xml_modules","submitter_user":{"username":"Rochus","created_at":"2020-07-11T16:57:57.000-05:00","is_admin":false,"about":"See http://www.rochus-keller.ch","is_moderator":false,"karma":149,"avatar_url":"/avatars/Rochus-100.png","invited_by_user":"technomancy"},"tags":["c++","programming"]},{"short_id":"todpmq","short_id_url":"https://lobste.rs/s/todpmq","created_at":"2022-10-07T06:59:29.000-05:00","title":"Magnetic core memory reborn","url":"http://olivernash.org/2011/05/11/magnetic-core-memory-reborn/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/todpmq/magnetic_core_memory_reborn","submitter_user":{"username":"jj5","created_at":"2020-04-23T04:25:37.000-05:00","is_admin":false,"about":"Hi there. I'm John. I'm a computer programmer from Australia with over 20 years commercial experience. I used to be a C# programmer in the Microsoft world but about 10 years ago I jumped ship and now I program mostly on the LAMP stack. I consider programming my craft and I endeavour to be as good at it as I possibly can be.","is_moderator":false,"karma":74,"avatar_url":"/avatars/jj5-100.png","invited_by_user":"gerikson","github_username":"jj5"},"tags":["hardware"]},{"short_id":"fu523l","short_id_url":"https://lobste.rs/s/fu523l","created_at":"2022-10-07T05:18:34.000-05:00","title":"What are you doing this weekend?","url":"","score":12,"flags":0,"comment_count":19,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it’s more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it’s more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/fu523l/what_are_you_doing_this_weekend","submitter_user":{"username":"caius","created_at":"2014-05-13T06:58:30.000-05:00","is_admin":false,"about":"Compulsive Geek, Ale Connoisseur, Occasionally Responsible Adult.","is_moderator":false,"karma":8113,"avatar_url":"/avatars/caius-100.png","invited_by_user":"lauris","github_username":"caius","twitter_username":"Caius"},"tags":["ask","programming"]},{"short_id":"5ozkke","short_id_url":"https://lobste.rs/s/5ozkke","created_at":"2022-10-07T05:03:07.000-05:00","title":"AI solved this programming problem. Can you?","url":"https://www.youtube.com/watch?v=MRc2XgXloY0","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5ozkke/ai_solved_this_programming_problem_can","submitter_user":{"username":"coolshaurya","created_at":"2022-09-14T11:45:37.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":8,"avatar_url":"/avatars/coolshaurya-100.png","invited_by_user":"thatonelutenist","github_username":"coolshaurya"},"tags":["ai","video"]},{"short_id":"mvfif2","short_id_url":"https://lobste.rs/s/mvfif2","created_at":"2022-10-07T05:00:39.000-05:00","title":"How to tell a mainframe from a minicomputer from a microcomputer","url":"https://liam-on-linux.dreamwidth.org/87578.html","score":3,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mvfif2/how_tell_mainframe_from_minicomputer","submitter_user":{"username":"lproven","created_at":"2016-08-19T03:04:15.000-05:00","is_admin":false,"about":"Tall dark black-clad atheist biker skeptic vegetarian SF fan; writes (mostly about computers) for a living. \r\n\r\n• [Profile](https://about.me/liamproven)\r\n\r\n• [Tech blog](https://liam-on-linux.livejournal.com/)\r\n\r\n","is_moderator":false,"karma":524,"avatar_url":"/avatars/lproven-100.png","invited_by_user":"mjturner","github_username":"lproven","twitter_username":"lproven"},"tags":["historical"]},{"short_id":"onyjte","short_id_url":"https://lobste.rs/s/onyjte","created_at":"2022-10-07T01:14:08.000-05:00","title":"Faster hash table probing","url":"https://outerproduct.net/trivial/2022-10-06_hash.html","score":4,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/onyjte/faster_hash_table_probing","submitter_user":{"username":"Moonchild","created_at":"2018-04-01T12:28:59.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":2267,"avatar_url":"/avatars/Moonchild-100.png","invited_by_user":"pushcx"},"tags":["compsci","performance"]},{"short_id":"ekdju2","short_id_url":"https://lobste.rs/s/ekdju2","created_at":"2022-10-06T23:05:43.000-05:00","title":"Bulk inserting nested data into the database (part II)","url":"https://contra.com/p/P7kB2RPO-bulk-inserting-nested-data-into-the-database-part-ii","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ekdju2/bulk_inserting_nested_data_into_database","submitter_user":{"username":"gajus","created_at":"2019-04-09T12:10:10.000-05:00","is_admin":false,"about":"Co-Founder of Contra","is_moderator":false,"karma":41,"avatar_url":"/avatars/gajus-100.png","invited_by_user":"benharri","github_username":"gajus","twitter_username":"kuizinas"},"tags":["databases","nodejs"]},{"short_id":"i5wkp8","short_id_url":"https://lobste.rs/s/i5wkp8","created_at":"2022-10-06T21:18:47.000-05:00","title":"coost - A fantastic C++ library","url":"https://github.com/idealvin/coost","score":-1,"flags":4,"comment_count":3,"description":"\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/idealvin/coost\" rel=\"ugc\"\u003ecoost\u003c/a\u003e\u003c/strong\u003e is an elegant and efficient cross-platform C++ base library. Its goal is to create a sword of C++ to make C++ programming easy and enjoyable.\u003c/p\u003e\n\u003cp\u003ecoost is like boost, but more lightweight, \u003cstrong\u003ethe static library built on linux or mac is only about 1MB in size\u003c/strong\u003e. However, it still provides enough powerful features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCommand line and config file parser (flag)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHigh performance log library (log)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eUnit testing framework\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ego-style coroutine\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eCoroutine-based network library\u003c/li\u003e\n\u003cli\u003eEfficient JSON library\u003c/li\u003e\n\u003cli\u003eJSON RPC framework\u003c/li\u003e\n\u003cli\u003eAtomic operation (atomic)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEfficient stream (fastream)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eEfficient string (fastring)\u003c/li\u003e\n\u003cli\u003eString utility (str)\u003c/li\u003e\n\u003cli\u003eTime library (time)\u003c/li\u003e\n\u003cli\u003eThread library (thread)\u003c/li\u003e\n\u003cli\u003eTimed Task Scheduler\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGod-oriented programming\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eLruMap\u003c/li\u003e\n\u003cli\u003ehash library\u003c/li\u003e\n\u003cli\u003epath library\u003c/li\u003e\n\u003cli\u003eFile utilities (fs)\u003c/li\u003e\n\u003cli\u003eSystem operations (os)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFast memory allocator\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstrong\u003eDocuments\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://coostdocs.github.io/en/about/co/\" rel=\"ugc\"\u003eDocuments\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/idealvin/coost\" rel=\"ugc\"\u003egithub\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstrong\u003eCore features\u003c/strong\u003e\n\u003chr\u003e\n\u003cstrong\u003eGod-oriented programming\u003c/strong\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/idealvin/coost/blob/master/include/co/god.h\" rel=\"ugc\"\u003eco/god.h\u003c/a\u003e provides some features based on templates.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/god.h\"\n\nvoid f() {\n    god::bless_no_bugs();\n    god::align_up\u0026lt;8\u0026gt;(31); // -\u0026gt; 32\n    god::is_same\u0026lt;T, int, bool\u0026gt;(); // T is int or bool?\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eflag\u003c/strong\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/flag/\" rel=\"ugc\"\u003eflag\u003c/a\u003e\u003c/strong\u003e is a command line and config file parser. It is similar to gflags, but more powerful:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSupport parameters from both command-line and config file.\u003c/li\u003e\n\u003cli\u003eSupport automatic generation of the config file.\u003c/li\u003e\n\u003cli\u003eSupport flag aliases.\u003c/li\u003e\n\u003cli\u003eFlag of integer type, the value can take a unit \u003ccode\u003ek,m,g,t,p\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/flag.h\"\n#include \"co/cout.h\"\n\nDEF_bool(x, false, \"x\");\nDEF_bool(debug, false, \"dbg\", d);\nDEF_uint32(u, 0, \"xxx\");\nDEF_string(s, \"\", \"xx\");\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n    COUT \u0026lt;\u0026lt; \"x: \" \u0026lt;\u0026lt; FLG_x;\n    COUT \u0026lt;\u0026lt; \"y: \" \u0026lt;\u0026lt; FLG_y;\n    COUT \u0026lt;\u0026lt; \"debug: \" \u0026lt;\u0026lt; FLG_debug;\n    COUT \u0026lt;\u0026lt; \"u: \" \u0026lt;\u0026lt; FLG_u;\n    COUT \u0026lt;\u0026lt; FLG_s \u0026lt;\u0026lt; \"|\" \u0026lt;\u0026lt; FLG_s.size();\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above example, the macros start with \u003ccode\u003eDEF_\u003c/code\u003e define 4 flags. Each flag corresponds to a global variable, whose name is \u003ccode\u003eFLG_\u003c/code\u003e plus the flag name. The flag \u003ccode\u003edebug\u003c/code\u003e has an alias \u003ccode\u003ed\u003c/code\u003e. After building, the above code can run as follow:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sh\"\u003e./xx                  # Run with default configs\n./xx -x -s good       # x -\u0026gt; true, s -\u0026gt; \"good\"\n./xx -debug           # debug -\u0026gt; true\n./xx -xd              # x -\u0026gt; true, debug -\u0026gt; true\n./xx -u 8k            # u -\u0026gt; 8192\n\n./xx -mkconf          # Automatically generate a config file: xx.conf\n./xx xx.conf          # run with a config file\n./xx -conf xx.conf    # Same as above\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003elog\u003c/strong\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/log/\" rel=\"ugc\"\u003elog\u003c/a\u003e\u003c/strong\u003e is a high-performance log library, some components in coost use it to print logs.\u003c/p\u003e\n\u003cp\u003elog supports two types of logs: one is level log, which is divided into 5 levels: debug, info, warning, error and fatal, \u003cstrong\u003eprinting a fatal log will terminate the program\u003c/strong\u003e; the other is topic log, logs are grouped by topic, and logs of different topics are written to different files.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/log.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n\n    TLOG(\"xx\") \u0026lt;\u0026lt; \"s\" \u0026lt;\u0026lt; 23; // topic log\n    DLOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // debug\n    LOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;   // info\n    WLOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // warning\n    ELOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // error\n    FLOG \u0026lt;\u0026lt; \"hello \" \u0026lt;\u0026lt; 23;  // fatal\n\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eco/log also provides a series of \u003ccode\u003eCHECK\u003c/code\u003e macros, which is an enhanced version of \u003ccode\u003eassert\u003c/code\u003e, and they will not be cleared in debug mode.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003evoid* p = malloc(32);\nCHECK(p != NULL) \u0026lt;\u0026lt; \"malloc failed..\";\nCHECK_NE(p, NULL) \u0026lt;\u0026lt; \"malloc failed..\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eunitest\u003c/strong\u003e\n\u003cp\u003e\u003ca href=\"https://coostdocs.github.io/en/co/unitest/\" rel=\"ugc\"\u003eunitest\u003c/a\u003e is a simple and easy-to-use unit test framework. Many components in coost use it to write unit test code, which guarantees the stability of coost.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/unitest.h\"\n#include \"co/os.h\"\n\nnamespace test {\n    \nDEF_test(os) {\n    DEF_case(homedir) {\n        EXPECT_NE(os::homedir(), \"\");\n    }\n\n    DEF_case(cpunum) {\n        EXPECT_GT(os::cpunum(), 0);\n    }\n}\n    \n} // namespace test\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above is a simple example. The \u003ccode\u003eDEF_test\u003c/code\u003e macro defines a test unit, which is actually a function (a method in a class). The \u003ccode\u003eDEF_case\u003c/code\u003e macro defines test cases, and each test case is actually a code block. The main function is simple as below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/unitest.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n    unitest::run_all_tests();\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe directory \u003ca href=\"https://github.com/idealvin/coost/tree/master/unitest\" rel=\"ugc\"\u003eunitest\u003c/a\u003e contains the unit test code in coost. Users can run unitest with the following commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sh\"\u003exmake r unitest      # Run all test cases\nxmake r unitest -os  # Run test cases in the os unit\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eJSON\u003c/strong\u003e\n\u003cp\u003eIn coost v3.0, \u003cstrong\u003e\u003ca href=\"https://github.com/idealvin/coost/blob/master/include/co/json.h\" rel=\"ugc\"\u003eJson\u003c/a\u003e\u003c/strong\u003e provides \u003cstrong\u003efluent APIs\u003c/strong\u003e, which is more convenient to use.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e// {\"a\":23,\"b\":false,\"s\":\"123\",\"v\":[1,2,3],\"o\":{\"xx\":0}}\nJson x = {\n    { \"a\", 23 },\n    { \"b\", false },\n    { \"s\", \"123\" },\n    { \"v\", {1,2,3} },\n    { \"o\", {\n        {\"xx\", 0}\n    }},\n};\n\n// equal to x\nJson y = Json()\n    .add_member(\"a\", 23)\n    .add_member(\"b\", false)\n    .add_member(\"s\", \"123\")\n    .add_member(\"v\", Json().push_back(1).push_back(2).push_back(3))\n    .add_member(\"o\", Json().add_member(\"xx\", 0));\n\nx.get(\"a\").as_int();       // 23\nx.get(\"s\").as_string();    // \"123\"\nx.get(\"s\").as_int();       // 123, string -\u0026gt; int\nx.get(\"v\", 0).as_int();    // 1\nx.get(\"v\", 2).as_int();    // 3\nx.get(\"o\", \"xx\").as_int(); // 0\n\nx[\"a\"] == 23;          // true\nx[\"s\"] == \"123\";       // true\nx.get(\"o\", \"xx\") != 0; // false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003eCoroutine\u003c/strong\u003e\n\u003cp\u003ecoost has implemented a \u003ca href=\"https://github.com/golang/go\" rel=\"ugc\"\u003ego-style\u003c/a\u003e coroutine, which has the following features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSupport multi-thread scheduling, the default number of threads is the number of system CPU cores.\u003c/li\u003e\n\u003cli\u003eShared stack, coroutines in the same thread share several stacks (the default size is 1MB), and the memory usage is low.\u003c/li\u003e\n\u003cli\u003eThere is a flat relationship between coroutines, and new coroutines can be created from anywhere (including in coroutines).\u003c/li\u003e\n\u003cli\u003eSupport coroutine synchronization events, coroutine locks, channels, and waitgroups.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/co.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n\n    co::WaitGroup wg;\n    wg.add(2);\n\n    go([wg](){\n        LOG \u0026lt;\u0026lt; \"hello world\";\n        wg.done();\n    });\n\n    go([wg](){\n        LOG \u0026lt;\u0026lt; \"hello again\";\n        wg.done();\n    });\n\n    wg.wait();\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, the coroutines created by \u003ccode\u003ego()\u003c/code\u003e will be evenly distributed to different scheduling threads. Users can also control the scheduling of coroutines by themselves:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e// run f1 and f2 in the same scheduler\nauto s = co::next_scheduler();\ns-\u0026gt;go(f1);\ns-\u0026gt;go(f2);\n\n// run f in all schedulers\nfor (auto\u0026amp; s : co::schedulers()) {\n    s-\u0026gt;go(f);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cstrong\u003enetwork programming\u003c/strong\u003e\n\u003cp\u003ecoost provides a coroutine-based network programming framework, which can be roughly divided into 3 parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/coroutine/#coroutineized-socket-api\" rel=\"ugc\"\u003ecoroutineized socket API\u003c/a\u003e\u003c/strong\u003e, similar in form to the system socket API, users familiar with socket programming can easily write high-performance network programs in a synchronous manner.\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://coostdocs.github.io/en/co/net/tcp/\" rel=\"ugc\"\u003eTCP\u003c/a\u003e, \u003ca href=\"https://coostdocs.github.io/en/co/net/http/\" rel=\"ugc\"\u003eHTTP\u003c/a\u003e, \u003ca href=\"https://coostdocs.github.io/en/co/net/rpc/\" rel=\"ugc\"\u003eRPC\u003c/a\u003e and other high-level network programming components, compatible with IPv6, also support SSL, it is more convenient to use than socket API.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ca href=\"https://coostdocs.github.io/en/co/coroutine/#system-api-hook\" rel=\"ugc\"\u003eSystem API hook\u003c/a\u003e\u003c/strong\u003e, with which, third-party network libraries can be used directly in coroutines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eRPC server\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/co.h\"\n#include \"co/rpc.h\"\n#include \"co/time.h\"\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n\n    rpc::Server()\n        .add_service(new xx::HelloWorldImpl)\n        .start(\"127.0.0.1\", 7788, \"/xx\");\n\n    for (;;) sleep::sec(80000);\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003erpc::Server\u003c/code\u003e also supports HTTP protocol, you may use the POST method to call the RPC service:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-sh\"\u003ecurl http://127.0.0.1:7788/xx --request POST --data '{\"api\":\"ping\"}'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eStatic web server\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e#include \"co/flag.h\"\n#include \"co/http.h\"\n\nDEF_string(d, \".\", \"root dir\"); // docroot for the web server\n\nint main(int argc, char** argv) {\n    flag::init(argc, argv);\n    so::easy(FLG_d.c_str()); // mum never have to worry again\n    return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP server\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003evoid cb(const http::Req\u0026amp; req, http::Res\u0026amp; res) {\n    if (req.is_method_get()) {\n        if (req.url() == \"/hello\") {\n            res.set_status(200);\n            res.set_body(\"hello world\");\n        } else {\n            res.set_status(404);\n        }\n    } else {\n        res.set_status(405); // method not allowed\n    }\n}\n\n// http\nhttp::Server().on_req(cb).start(\"0.0.0.0\", 80);\n\n// https\nhttp::Server().on_req(cb).start(\n    \"0.0.0.0\", 443, \"privkey.pem\", \"certificate.pem\"\n);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP client\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003evoid f() {\n    http::Client c(\"https://github.com\");\n\n    c.get(\"/\");\n    LOG \u0026lt;\u0026lt; \"response code: \"\u0026lt;\u0026lt; c.status();\n    LOG \u0026lt;\u0026lt; \"body size: \"\u0026lt;\u0026lt; c.body().size();\n    LOG \u0026lt;\u0026lt; \"Content-Length: \"\u0026lt;\u0026lt; c.header(\"Content-Length\");\n    LOG \u0026lt;\u0026lt; c.header();\n\n    c.post(\"/hello\", \"data xxx\");\n    LOG \u0026lt;\u0026lt; \"response code: \"\u0026lt;\u0026lt; c.status();\n}\n\ngo(f);\n\u003c/code\u003e\u003c/pre\u003e\n","description_plain":"**[coost](https://github.com/idealvin/coost)** is an elegant and efficient cross-platform C++ base library. Its goal is to create a sword of C++ to make C++ programming easy and enjoyable.\r\n\r\ncoost is like boost, but more lightweight, **the static library built on linux or mac is only about 1MB in size**. However, it still provides enough powerful features:\r\n\r\n- Command line and config file parser (flag)\r\n- **High performance log library (log)**\r\n- Unit testing framework\r\n- **go-style coroutine**\r\n- Coroutine-based network library\r\n- Efficient JSON library\r\n- JSON RPC framework\r\n- Atomic operation (atomic)\r\n- **Efficient stream (fastream)**\r\n- Efficient string (fastring)\r\n- String utility (str)\r\n- Time library (time)\r\n- Thread library (thread)\r\n- Timed Task Scheduler\r\n- **God-oriented programming**\r\n- LruMap\r\n- hash library\r\n- path library\r\n- File utilities (fs)\r\n- System operations (os)\r\n- **Fast memory allocator**\r\n\r\n\r\n## Documents  \r\n\r\n- [Documents](https://coostdocs.github.io/en/about/co/)\r\n- [github](https://github.com/idealvin/coost)\r\n\r\n\r\n## Core features  \r\n---------------------------------------\r\n\r\n\r\n### God-oriented programming\r\n\r\n[co/god.h](https://github.com/idealvin/coost/blob/master/include/co/god.h) provides some features based on templates.\r\n\r\n```cpp\r\n#include \"co/god.h\"\r\n\r\nvoid f() {\r\n    god::bless_no_bugs();\r\n    god::align_up\u003c8\u003e(31); // -\u003e 32\r\n    god::is_same\u003cT, int, bool\u003e(); // T is int or bool?\r\n}\r\n```\r\n\r\n\r\n\r\n### flag\r\n\r\n**[flag](https://coostdocs.github.io/en/co/flag/)** is a command line and config file parser. It is similar to gflags, but more powerful:\r\n- Support parameters from both command-line and config file.\r\n- Support automatic generation of the config file.\r\n- Support flag aliases.\r\n- Flag of integer type, the value can take a unit `k,m,g,t,p`.\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/cout.h\"\r\n\r\nDEF_bool(x, false, \"x\");\r\nDEF_bool(debug, false, \"dbg\", d);\r\nDEF_uint32(u, 0, \"xxx\");\r\nDEF_string(s, \"\", \"xx\");\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n    COUT \u003c\u003c \"x: \" \u003c\u003c FLG_x;\r\n    COUT \u003c\u003c \"y: \" \u003c\u003c FLG_y;\r\n    COUT \u003c\u003c \"debug: \" \u003c\u003c FLG_debug;\r\n    COUT \u003c\u003c \"u: \" \u003c\u003c FLG_u;\r\n    COUT \u003c\u003c FLG_s \u003c\u003c \"|\" \u003c\u003c FLG_s.size();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the above example, the macros start with `DEF_` define 4 flags. Each flag corresponds to a global variable, whose name is `FLG_` plus the flag name. The flag `debug` has an alias `d`. After building, the above code can run as follow:\r\n\r\n```sh\r\n./xx                  # Run with default configs\r\n./xx -x -s good       # x -\u003e true, s -\u003e \"good\"\r\n./xx -debug           # debug -\u003e true\r\n./xx -xd              # x -\u003e true, debug -\u003e true\r\n./xx -u 8k            # u -\u003e 8192\r\n\r\n./xx -mkconf          # Automatically generate a config file: xx.conf\r\n./xx xx.conf          # run with a config file\r\n./xx -conf xx.conf    # Same as above\r\n```\r\n\r\n\r\n\r\n### log\r\n\r\n**[log](https://coostdocs.github.io/en/co/log/)** is a high-performance log library, some components in coost use it to print logs.\r\n\r\nlog supports two types of logs: one is level log, which is divided into 5 levels: debug, info, warning, error and fatal, **printing a fatal log will terminate the program**; the other is topic log, logs are grouped by topic, and logs of different topics are written to different files.\r\n\r\n```cpp\r\n#include \"co/log.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n\r\n    TLOG(\"xx\") \u003c\u003c \"s\" \u003c\u003c 23; // topic log\r\n    DLOG \u003c\u003c \"hello \" \u003c\u003c 23;  // debug\r\n    LOG \u003c\u003c \"hello \" \u003c\u003c 23;   // info\r\n    WLOG \u003c\u003c \"hello \" \u003c\u003c 23;  // warning\r\n    ELOG \u003c\u003c \"hello \" \u003c\u003c 23;  // error\r\n    FLOG \u003c\u003c \"hello \" \u003c\u003c 23;  // fatal\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nco/log also provides a series of `CHECK` macros, which is an enhanced version of `assert`, and they will not be cleared in debug mode.\r\n\r\n```cpp\r\nvoid* p = malloc(32);\r\nCHECK(p != NULL) \u003c\u003c \"malloc failed..\";\r\nCHECK_NE(p, NULL) \u003c\u003c \"malloc failed..\";\r\n```\r\n\r\n\r\n\r\n### unitest\r\n\r\n[unitest](https://coostdocs.github.io/en/co/unitest/) is a simple and easy-to-use unit test framework. Many components in coost use it to write unit test code, which guarantees the stability of coost.\r\n\r\n```cpp\r\n#include \"co/unitest.h\"\r\n#include \"co/os.h\"\r\n\r\nnamespace test {\r\n    \r\nDEF_test(os) {\r\n    DEF_case(homedir) {\r\n        EXPECT_NE(os::homedir(), \"\");\r\n    }\r\n\r\n    DEF_case(cpunum) {\r\n        EXPECT_GT(os::cpunum(), 0);\r\n    }\r\n}\r\n    \r\n} // namespace test\r\n```\r\n\r\nThe above is a simple example. The `DEF_test` macro defines a test unit, which is actually a function (a method in a class). The `DEF_case` macro defines test cases, and each test case is actually a code block. The main function is simple as below:\r\n\r\n```cpp\r\n#include \"co/unitest.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n    unitest::run_all_tests();\r\n    return 0;\r\n}\r\n```\r\n\r\nThe directory [unitest](https://github.com/idealvin/coost/tree/master/unitest) contains the unit test code in coost. Users can run unitest with the following commands:\r\n\r\n```sh\r\nxmake r unitest      # Run all test cases\r\nxmake r unitest -os  # Run test cases in the os unit\r\n```\r\n\r\n\r\n\r\n### JSON\r\n\r\nIn coost v3.0, **[Json](https://github.com/idealvin/coost/blob/master/include/co/json.h)** provides **fluent APIs**, which is more convenient to use.\r\n\r\n```cpp\r\n// {\"a\":23,\"b\":false,\"s\":\"123\",\"v\":[1,2,3],\"o\":{\"xx\":0}}\r\nJson x = {\r\n    { \"a\", 23 },\r\n    { \"b\", false },\r\n    { \"s\", \"123\" },\r\n    { \"v\", {1,2,3} },\r\n    { \"o\", {\r\n        {\"xx\", 0}\r\n    }},\r\n};\r\n\r\n// equal to x\r\nJson y = Json()\r\n    .add_member(\"a\", 23)\r\n    .add_member(\"b\", false)\r\n    .add_member(\"s\", \"123\")\r\n    .add_member(\"v\", Json().push_back(1).push_back(2).push_back(3))\r\n    .add_member(\"o\", Json().add_member(\"xx\", 0));\r\n\r\nx.get(\"a\").as_int();       // 23\r\nx.get(\"s\").as_string();    // \"123\"\r\nx.get(\"s\").as_int();       // 123, string -\u003e int\r\nx.get(\"v\", 0).as_int();    // 1\r\nx.get(\"v\", 2).as_int();    // 3\r\nx.get(\"o\", \"xx\").as_int(); // 0\r\n\r\nx[\"a\"] == 23;          // true\r\nx[\"s\"] == \"123\";       // true\r\nx.get(\"o\", \"xx\") != 0; // false\r\n```\r\n\r\n\r\n\r\n### Coroutine\r\n\r\ncoost has implemented a [go-style](https://github.com/golang/go) coroutine, which has the following features:\r\n\r\n- Support multi-thread scheduling, the default number of threads is the number of system CPU cores.\r\n- Shared stack, coroutines in the same thread share several stacks (the default size is 1MB), and the memory usage is low.\r\n- There is a flat relationship between coroutines, and new coroutines can be created from anywhere (including in coroutines).\r\n- Support coroutine synchronization events, coroutine locks, channels, and waitgroups.\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n\r\n    co::WaitGroup wg;\r\n    wg.add(2);\r\n\r\n    go([wg](){\r\n        LOG \u003c\u003c \"hello world\";\r\n        wg.done();\r\n    });\r\n\r\n    go([wg](){\r\n        LOG \u003c\u003c \"hello again\";\r\n        wg.done();\r\n    });\r\n\r\n    wg.wait();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the above code, the coroutines created by `go()` will be evenly distributed to different scheduling threads. Users can also control the scheduling of coroutines by themselves:\r\n\r\n```cpp\r\n// run f1 and f2 in the same scheduler\r\nauto s = co::next_scheduler();\r\ns-\u003ego(f1);\r\ns-\u003ego(f2);\r\n\r\n// run f in all schedulers\r\nfor (auto\u0026 s : co::schedulers()) {\r\n    s-\u003ego(f);\r\n}\r\n```\r\n\r\n\r\n\r\n### network programming\r\n\r\ncoost provides a coroutine-based network programming framework, which can be roughly divided into 3 parts:\r\n\r\n- **[coroutineized socket API](https://coostdocs.github.io/en/co/coroutine/#coroutineized-socket-api)**, similar in form to the system socket API, users familiar with socket programming can easily write high-performance network programs in a synchronous manner.\r\n- [TCP](https://coostdocs.github.io/en/co/net/tcp/), [HTTP](https://coostdocs.github.io/en/co/net/http/), [RPC](https://coostdocs.github.io/en/co/net/rpc/) and other high-level network programming components, compatible with IPv6, also support SSL, it is more convenient to use than socket API.\r\n- **[System API hook](https://coostdocs.github.io/en/co/coroutine/#system-api-hook)**, with which, third-party network libraries can be used directly in coroutines.\r\n\r\n\r\n**RPC server**\r\n\r\n```cpp\r\n#include \"co/co.h\"\r\n#include \"co/rpc.h\"\r\n#include \"co/time.h\"\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n\r\n    rpc::Server()\r\n        .add_service(new xx::HelloWorldImpl)\r\n        .start(\"127.0.0.1\", 7788, \"/xx\");\r\n\r\n    for (;;) sleep::sec(80000);\r\n    return 0;\r\n}\r\n```\r\n\r\n`rpc::Server` also supports HTTP protocol, you may use the POST method to call the RPC service:\r\n\r\n```sh\r\ncurl http://127.0.0.1:7788/xx --request POST --data '{\"api\":\"ping\"}'\r\n```\r\n\r\n\r\n**Static web server**\r\n\r\n```cpp\r\n#include \"co/flag.h\"\r\n#include \"co/http.h\"\r\n\r\nDEF_string(d, \".\", \"root dir\"); // docroot for the web server\r\n\r\nint main(int argc, char** argv) {\r\n    flag::init(argc, argv);\r\n    so::easy(FLG_d.c_str()); // mum never have to worry again\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n**HTTP server**\r\n\r\n```cpp\r\nvoid cb(const http::Req\u0026 req, http::Res\u0026 res) {\r\n    if (req.is_method_get()) {\r\n        if (req.url() == \"/hello\") {\r\n            res.set_status(200);\r\n            res.set_body(\"hello world\");\r\n        } else {\r\n            res.set_status(404);\r\n        }\r\n    } else {\r\n        res.set_status(405); // method not allowed\r\n    }\r\n}\r\n\r\n// http\r\nhttp::Server().on_req(cb).start(\"0.0.0.0\", 80);\r\n\r\n// https\r\nhttp::Server().on_req(cb).start(\r\n    \"0.0.0.0\", 443, \"privkey.pem\", \"certificate.pem\"\r\n);\r\n```\r\n\r\n\r\n**HTTP client**\r\n\r\n```cpp\r\nvoid f() {\r\n    http::Client c(\"https://github.com\");\r\n\r\n    c.get(\"/\");\r\n    LOG \u003c\u003c \"response code: \"\u003c\u003c c.status();\r\n    LOG \u003c\u003c \"body size: \"\u003c\u003c c.body().size();\r\n    LOG \u003c\u003c \"Content-Length: \"\u003c\u003c c.header(\"Content-Length\");\r\n    LOG \u003c\u003c c.header();\r\n\r\n    c.post(\"/hello\", \"data xxx\");\r\n    LOG \u003c\u003c \"response code: \"\u003c\u003c c.status();\r\n}\r\n\r\ngo(f);\r\n```","comments_url":"https://lobste.rs/s/i5wkp8/coost_fantastic_c_library","submitter_user":{"username":"idealvin","created_at":"2022-01-18T08:53:26.000-06:00","is_admin":false,"about":"I'm a C++ programmer. I'm working on [cocoyaxi](https://github.com/idealvin/cocoyaxi), a go-style coroutine library in C++11 and more.","is_moderator":false,"karma":8,"avatar_url":"/avatars/idealvin-100.png","invited_by_user":"ruki","github_username":"idealvin"},"tags":["c++","programming"]},{"short_id":"vnnyip","short_id_url":"https://lobste.rs/s/vnnyip","created_at":"2022-10-06T18:55:42.000-05:00","title":"lambda-8cc: An x86 C compiler written in untyped lambda calculus","url":"https://github.com/woodrush/lambda-8cc","score":14,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vnnyip/lambda_8cc_x86_c_compiler_written_untyped","submitter_user":{"username":"woodrush","created_at":"2022-01-11T19:58:03.000-06:00","is_admin":false,"about":"Things I made:\r\n- LambdaLisp, a Lisp interpreter that runs on lambda calculus\r\n- Lisp in Life, a Lisp interpreter that runs in Conway's Game of Life\r\n\r\nI'm currently a Ph.D. student studying machine learning at The University of Tokyo.","is_moderator":false,"karma":100,"avatar_url":"/avatars/woodrush-100.png","invited_by_user":"jart","github_username":"woodrush","twitter_username":"woodrush924"},"tags":["c","compilers"]},{"short_id":"9irgta","short_id_url":"https://lobste.rs/s/9irgta","created_at":"2022-10-06T16:35:22.000-05:00","title":"Crubit: High-level design of C++/Rust interop","url":"https://github.com/google/crubit/blob/main/docs/design.md","score":4,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9irgta/crubit_high_level_design_c_rust_interop","submitter_user":{"username":"hsivonen","created_at":"2020-01-19T01:58:54.000-06:00","is_admin":false,"about":"[Twitter](https://twitter.com/hsivonen/)","is_moderator":false,"karma":160,"avatar_url":"/avatars/hsivonen-100.png","invited_by_user":"danburzo"},"tags":["c++","rust"]},{"short_id":"dqxx4h","short_id_url":"https://lobste.rs/s/dqxx4h","created_at":"2022-10-06T16:29:40.000-05:00","title":"libgrapheme 2.0.0 released - A suckless Unicode string library","url":"https://libs.suckless.org/libgrapheme/","score":22,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dqxx4h/libgrapheme_2_0_0_released_suckless","submitter_user":{"username":"FRIGN","created_at":"2015-02-19T10:11:05.000-06:00","is_admin":false,"about":"dev@frign.de\r\n\r\nsuckless developer, UNIX enthusiast\r\n\r\n|| https://frign.de ||\r\n\r\n(https://2f30.org https://suckless.org)","is_moderator":false,"karma":3282,"avatar_url":"/avatars/FRIGN-100.png","invited_by_user":"sin"},"tags":["c","release","unix"]},{"short_id":"o83lbm","short_id_url":"https://lobste.rs/s/o83lbm","created_at":"2022-10-06T16:12:48.000-05:00","title":"Construction and analysis of the build and runtime dependency graph of nixpkgs","url":"https://www.tweag.io/blog/2022-09-13-nixpkgs-graph/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o83lbm/construction_analysis_build_runtime","submitter_user":{"username":"knl","created_at":"2017-07-21T07:12:24.000-05:00","is_admin":false,"about":"Senior software engineer specialized in distributed systems and low latency, high frequency trading infrastructure.","is_moderator":false,"karma":5458,"avatar_url":"/avatars/knl-100.png","invited_by_user":"james","github_username":"knl","keybase_signatures":[{"kb_username":"knl","sig_hash":"cb1fe17fead6d360f9abca902132b2407ee736f1a243f615ad9757dfe8d17e3b0f"}]},"tags":["nix","visualization"]},{"short_id":"lo1nmx","short_id_url":"https://lobste.rs/s/lo1nmx","created_at":"2022-10-06T15:25:52.000-05:00","title":"GitHub - naftaliharris/tauthon: Fork of Python 2.7 with new syntax, builtins, and libraries backported from Python 3","url":"https://github.com/naftaliharris/tauthon","score":2,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lo1nmx/github_naftaliharris_tauthon_fork","submitter_user":{"username":"lproven","created_at":"2016-08-19T03:04:15.000-05:00","is_admin":false,"about":"Tall dark black-clad atheist biker skeptic vegetarian SF fan; writes (mostly about computers) for a living. \r\n\r\n• [Profile](https://about.me/liamproven)\r\n\r\n• [Tech blog](https://liam-on-linux.livejournal.com/)\r\n\r\n","is_moderator":false,"karma":524,"avatar_url":"/avatars/lproven-100.png","invited_by_user":"mjturner","github_username":"lproven","twitter_username":"lproven"},"tags":["programming","python"]},{"short_id":"m4vz4k","short_id_url":"https://lobste.rs/s/m4vz4k","created_at":"2022-10-06T15:17:26.000-05:00","title":"I've been playing with OS/2 again -- more on that soon -- but it was doomed from a young age","url":"https://liam-on-linux.dreamwidth.org/87435.html","score":17,"flags":0,"comment_count":24,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m4vz4k/i_ve_been_playing_with_os_2_again_more_on","submitter_user":{"username":"lproven","created_at":"2016-08-19T03:04:15.000-05:00","is_admin":false,"about":"Tall dark black-clad atheist biker skeptic vegetarian SF fan; writes (mostly about computers) for a living. \r\n\r\n• [Profile](https://about.me/liamproven)\r\n\r\n• [Tech blog](https://liam-on-linux.livejournal.com/)\r\n\r\n","is_moderator":false,"karma":524,"avatar_url":"/avatars/lproven-100.png","invited_by_user":"mjturner","github_username":"lproven","twitter_username":"lproven"},"tags":["historical"]},{"short_id":"xq00ml","short_id_url":"https://lobste.rs/s/xq00ml","created_at":"2022-10-06T12:39:32.000-05:00","title":"HEVC uAPI mainlined","url":"https://www.collabora.com/news-and-blog/news-and-events/hevc-uapi-mainlined.html","score":3,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xq00ml/hevc_uapi_mainlined","submitter_user":{"username":"mfilion","created_at":"2020-04-23T10:57:43.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":430,"avatar_url":"/avatars/mfilion-100.png","invited_by_user":"eloy"},"tags":["linux"]},{"short_id":"c2r1fp","short_id_url":"https://lobste.rs/s/c2r1fp","created_at":"2022-10-06T11:54:05.000-05:00","title":"Unix, Plan 9 and the Lurking Smalltalk","url":"https://www.humprog.org/~stephen/research/papers/kell19unix-personal.pdf","score":12,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/c2r1fp/unix_plan_9_lurking_smalltalk","submitter_user":{"username":"chrislloyd","created_at":"2019-05-16T09:41:07.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":157,"avatar_url":"/avatars/chrislloyd-100.png","invited_by_user":"ozan"},"tags":["osdev","pdf","plt"]},{"short_id":"x7hxyq","short_id_url":"https://lobste.rs/s/x7hxyq","created_at":"2022-10-06T11:06:11.000-05:00","title":"Apple AirPods Pro Are As Unrepairable As Ever","url":"https://www.ifixit.com/News/66194/apples-new-airpods-are-telling-users-to-replace-the-batteries-already-too-bad-thats-impossible","score":18,"flags":4,"comment_count":29,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/x7hxyq/apple_airpods_pro_are_as_unrepairable_as","submitter_user":{"username":"kujaw","created_at":"2020-05-24T04:04:44.000-05:00","is_admin":false,"about":"Located in Łódź, Poland","is_moderator":false,"karma":22,"avatar_url":"/avatars/kujaw-100.png","invited_by_user":"pzduniak","github_username":"kujaw"},"tags":["hardware"]}]